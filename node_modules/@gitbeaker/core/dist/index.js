'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var FormData = require('form-data');
var li = require('li');
var xcase = require('xcase');
var requesterUtils = require('@gitbeaker/requester-utils');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var FormData__default = /*#__PURE__*/_interopDefaultLegacy(FormData);

function bundler(services) {
  return function Bundle(options) {
    Object.entries(services).forEach(([name, Ser]) => {
      this[name] = new Ser(options);
    });
  };
}
function appendFormFromObject(object) {
  const form = new FormData__default['default']();
  Object.entries(object).forEach(([k, v]) => {
    if (Array.isArray(v))
      form.append(k, v[0], v[1]);
    else
      form.append(k, v);
  });
  return form;
}

var __defProp$O = Object.defineProperty;
var __hasOwnProp$U = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$U = Object.getOwnPropertySymbols;
var __propIsEnum$U = Object.prototype.propertyIsEnumerable;
var __defNormalProp$O = (obj, key, value) => key in obj ? __defProp$O(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$O = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$U.call(b, prop))
      __defNormalProp$O(a, prop, b[prop]);
  if (__getOwnPropSymbols$U)
    for (var prop of __getOwnPropSymbols$U(b)) {
      if (__propIsEnum$U.call(b, prop))
        __defNormalProp$O(a, prop, b[prop]);
    }
  return a;
};
var __objRest$n = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$U.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$U)
    for (var prop of __getOwnPropSymbols$U(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$U.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
async function getHelper(service, endpoint, _a = {}, acc = []) {
  var _b = _a, {
    sudo,
    showExpanded,
    maxPages
  } = _b, query = __objRest$n(_b, [
    "sudo",
    "showExpanded",
    "maxPages"
  ]);
  const response = await service.requester.get(endpoint, {query, sudo});
  const {headers, status} = response;
  let {body} = response;
  if (service.camelize)
    body = xcase.camelizeKeys(body);
  if (!Array.isArray(body)) {
    if (!showExpanded)
      return body;
    return {
      data: body,
      headers,
      status
    };
  }
  const newAcc = [...acc, ...body];
  const {next} = li.parse(headers.link);
  const withinBounds = maxPages ? newAcc.length / (query.perPage || 20) < maxPages : true;
  if (!query.page && next && withinBounds) {
    const leaf = service.url.split("/").pop() || "";
    const regex = new RegExp(`.+/api/v\\d(/${leaf})?/`);
    return getHelper(service, next.replace(regex, ""), __objSpread$O(__objSpread$O({}, query), {
      maxPages,
      sudo
    }), newAcc);
  }
  if (!showExpanded || query.pagination === "keyset")
    return newAcc;
  return {
    data: newAcc,
    paginationInfo: {
      total: parseInt(headers["x-total"], 10),
      next: parseInt(headers["x-next-page"], 10) || null,
      current: parseInt(headers["x-page"], 10) || 1,
      previous: parseInt(headers["x-prev-page"], 10) || null,
      perPage: parseInt(headers["x-per-page"], 10),
      totalPages: parseInt(headers["x-total-pages"], 10)
    }
  };
}
function get() {
  return async function(service, endpoint, options) {
    return getHelper(service, endpoint, options);
  };
}
function post() {
  return async function(service, endpoint, _a = {}) {
    var _b = _a, {
      query,
      isForm,
      sudo,
      showExpanded
    } = _b, options = __objRest$n(_b, [
      "query",
      "isForm",
      "sudo",
      "showExpanded"
    ]);
    const body = isForm ? appendFormFromObject(options) : options;
    const r = await service.requester.post(endpoint, {
      query,
      body,
      sudo
    });
    return showExpanded ? {
      data: r.body,
      status: r.status,
      headers: r.headers
    } : r.body;
  };
}
function put() {
  return async function(service, endpoint, _a = {}) {
    var _b = _a, {
      query,
      isForm,
      sudo,
      showExpanded
    } = _b, options = __objRest$n(_b, [
      "query",
      "isForm",
      "sudo",
      "showExpanded"
    ]);
    const body = isForm ? appendFormFromObject(options) : options;
    const r = await service.requester.put(endpoint, {
      body,
      query,
      sudo
    });
    return showExpanded ? {
      data: r.body,
      status: r.status,
      headers: r.headers
    } : r.body;
  };
}
function del() {
  return async function(service, endpoint, _a = {}) {
    var _b = _a, {sudo, showExpanded} = _b, query = __objRest$n(_b, ["sudo", "showExpanded"]);
    const r = await service.requester.delete(endpoint, {
      query,
      sudo
    });
    return showExpanded ? {
      data: r.body,
      status: r.status,
      headers: r.headers
    } : r.body;
  };
}
function stream(service, endpoint, options) {
  if (typeof service.requester.stream !== "function") {
    throw new Error("Stream method is not implementated in requester!");
  }
  return service.requester.stream(endpoint, {
    query: options
  });
}
const RequestHelper = {
  post,
  put,
  get,
  del,
  stream
};

var __defProp$N = Object.defineProperty;
var __hasOwnProp$T = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$T = Object.getOwnPropertySymbols;
var __propIsEnum$T = Object.prototype.propertyIsEnumerable;
var __defNormalProp$N = (obj, key, value) => key in obj ? __defProp$N(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$N = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$T.call(b, prop))
      __defNormalProp$N(a, prop, b[prop]);
  if (__getOwnPropSymbols$T)
    for (var prop of __getOwnPropSymbols$T(b)) {
      if (__propIsEnum$T.call(b, prop))
        __defNormalProp$N(a, prop, b[prop]);
    }
  return a;
};
var __objRest$m = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$T.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$T)
    for (var prop of __getOwnPropSymbols$T(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$T.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Groups extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "groups", options);
  }
  create(name, path, options) {
    return RequestHelper.post()(this, "groups", __objSpread$N({name, path}, options));
  }
  createLDAPLink(groupId, cn, groupAccess, provider, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.post()(this, `groups/${gId}/ldap_group_links`, __objSpread$N({
      cn,
      groupAccess,
      provider
    }, options));
  }
  edit(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.put()(this, `groups/${gId}`, options);
  }
  projects(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.get()(this, `groups/${gId}/projects`, options);
  }
  remove(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.del()(this, `groups/${gId}`, options);
  }
  removeLDAPLink(groupId, cn, _a = {}) {
    var _b = _a, {provider} = _b, options = __objRest$m(_b, ["provider"]);
    const gId = encodeURIComponent(groupId);
    const url = provider ? `${provider}/${cn}` : `${cn}`;
    return RequestHelper.del()(this, `groups/${gId}/ldap_group_links/${url}`, options);
  }
  search(nameOrPath, options) {
    return RequestHelper.get()(this, "groups", __objSpread$N({
      search: nameOrPath
    }, options));
  }
  show(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.get()(this, `groups/${gId}`, options);
  }
  subgroups(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.get()(this, `groups/${gId}/subgroups`, options);
  }
  syncLDAP(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.post()(this, `groups/${gId}/ldap_sync`, options);
  }
  transferProject(groupId, projectId, options) {
    const [gId, pId] = [groupId, projectId].map(encodeURIComponent);
    return RequestHelper.post()(this, `groups/${gId}/projects/${pId}`, options);
  }
}

var __defProp$M = Object.defineProperty;
var __hasOwnProp$S = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$S = Object.getOwnPropertySymbols;
var __propIsEnum$S = Object.prototype.propertyIsEnumerable;
var __defNormalProp$M = (obj, key, value) => key in obj ? __defProp$M(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$M = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$S.call(b, prop))
      __defNormalProp$M(a, prop, b[prop]);
  if (__getOwnPropSymbols$S)
    for (var prop of __getOwnPropSymbols$S(b)) {
      if (__propIsEnum$S.call(b, prop))
        __defNormalProp$M(a, prop, b[prop]);
    }
  return a;
};
class ResourceAccessRequests extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$M({prefixUrl: resourceType}, options));
  }
  all(resourceId) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/access_requests`);
  }
  request(resourceId) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.post()(this, `${rId}/access_requests`);
  }
  approve(resourceId, userId, options) {
    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/access_requests/${uId}/approve`, options);
  }
  deny(resourceId, userId) {
    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/access_requests/${uId}`);
  }
}

var __defProp$L = Object.defineProperty;
var __hasOwnProp$R = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$R = Object.getOwnPropertySymbols;
var __propIsEnum$R = Object.prototype.propertyIsEnumerable;
var __defNormalProp$L = (obj, key, value) => key in obj ? __defProp$L(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$L = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$R.call(b, prop))
      __defNormalProp$L(a, prop, b[prop]);
  if (__getOwnPropSymbols$R)
    for (var prop of __getOwnPropSymbols$R(b)) {
      if (__propIsEnum$R.call(b, prop))
        __defNormalProp$L(a, prop, b[prop]);
    }
  return a;
};
function url$4(projectId, resourceType, resourceId, awardId, noteId) {
  const [pId, rId] = [projectId, resourceId].map(encodeURIComponent);
  const output = [pId, resourceType, rId];
  if (noteId)
    output.push("notes", encodeURIComponent(noteId));
  output.push("award_emoji");
  if (awardId)
    output.push(encodeURIComponent(awardId));
  return output.join("/");
}
class ResourceAwardEmojis extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$L({prefixUrl: "projects"}, options));
    this.resourceType = resourceType;
  }
  all(projectId, resourceIId, options) {
    return RequestHelper.get()(this, url$4(projectId, this.resourceType, resourceIId), options);
  }
  award(projectId, resourceIId, name, options) {
    return RequestHelper.post()(this, url$4(projectId, this.resourceType, resourceIId), __objSpread$L({
      name
    }, options));
  }
  remove(projectId, resourceIId, awardId, options) {
    return RequestHelper.del()(this, url$4(projectId, this.resourceType, resourceIId, awardId), options);
  }
  show(projectId, resourceIId, awardId, options) {
    return RequestHelper.get()(this, url$4(projectId, this.resourceType, resourceIId, awardId), options);
  }
}

var __defProp$K = Object.defineProperty;
var __hasOwnProp$Q = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$Q = Object.getOwnPropertySymbols;
var __propIsEnum$Q = Object.prototype.propertyIsEnumerable;
var __defNormalProp$K = (obj, key, value) => key in obj ? __defProp$K(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$K = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$Q.call(b, prop))
      __defNormalProp$K(a, prop, b[prop]);
  if (__getOwnPropSymbols$Q)
    for (var prop of __getOwnPropSymbols$Q(b)) {
      if (__propIsEnum$Q.call(b, prop))
        __defNormalProp$K(a, prop, b[prop]);
    }
  return a;
};
class ResourceNoteAwardEmojis extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$K({prefixUrl: "projects"}, options));
    this.resourceType = resourceType;
  }
  all(projectId, resourceIId, noteId, options) {
    return RequestHelper.get()(this, url$4(projectId, this.resourceType, resourceIId, null, noteId), options);
  }
  award(projectId, resourceIId, noteId, name, options) {
    return RequestHelper.post()(this, url$4(projectId, this.resourceType, resourceIId, null, noteId), __objSpread$K({
      name
    }, options));
  }
  remove(projectId, resourceIId, noteId, awardId, options) {
    return RequestHelper.del()(this, url$4(projectId, this.resourceType, resourceIId, awardId, noteId), options);
  }
  show(projectId, resourceIId, noteId, awardId, options) {
    return RequestHelper.get()(this, url$4(projectId, this.resourceType, resourceIId, awardId, noteId), options);
  }
}

var __defProp$J = Object.defineProperty;
var __hasOwnProp$P = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$P = Object.getOwnPropertySymbols;
var __propIsEnum$P = Object.prototype.propertyIsEnumerable;
var __defNormalProp$J = (obj, key, value) => key in obj ? __defProp$J(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$J = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$P.call(b, prop))
      __defNormalProp$J(a, prop, b[prop]);
  if (__getOwnPropSymbols$P)
    for (var prop of __getOwnPropSymbols$P(b)) {
      if (__propIsEnum$P.call(b, prop))
        __defNormalProp$J(a, prop, b[prop]);
    }
  return a;
};
class ResourceBadges extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$J({prefixUrl: resourceType}, options));
  }
  add(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.post()(this, `${rId}/badges`, options);
  }
  all(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/badges`, options);
  }
  edit(resourceId, badgeId, options) {
    const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/badges/${bId}`, options);
  }
  preview(resourceId, linkUrl, imageUrl, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/badges/render`, __objSpread$J({linkUrl, imageUrl}, options));
  }
  remove(resourceId, badgeId, options) {
    const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/badges/${bId}`, options);
  }
  show(resourceId, badgeId, options) {
    const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/badges/${bId}`, options);
  }
}

var __defProp$I = Object.defineProperty;
var __hasOwnProp$O = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$O = Object.getOwnPropertySymbols;
var __propIsEnum$O = Object.prototype.propertyIsEnumerable;
var __defNormalProp$I = (obj, key, value) => key in obj ? __defProp$I(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$I = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$O.call(b, prop))
      __defNormalProp$I(a, prop, b[prop]);
  if (__getOwnPropSymbols$O)
    for (var prop of __getOwnPropSymbols$O(b)) {
      if (__propIsEnum$O.call(b, prop))
        __defNormalProp$I(a, prop, b[prop]);
    }
  return a;
};
class ResourceCustomAttributes extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$I({prefixUrl: resourceType}, options));
  }
  all(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/custom_attributes`, options);
  }
  set(resourceId, customAttributeId, value, options) {
    const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/custom_attributes/${cId}`, __objSpread$I({
      value
    }, options));
  }
  remove(resourceId, customAttributeId, options) {
    const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/custom_attributes/${cId}`, options);
  }
  show(resourceId, customAttributeId, options) {
    const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/custom_attributes/${cId}`, options);
  }
}

var __defProp$H = Object.defineProperty;
var __hasOwnProp$N = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$N = Object.getOwnPropertySymbols;
var __propIsEnum$N = Object.prototype.propertyIsEnumerable;
var __defNormalProp$H = (obj, key, value) => key in obj ? __defProp$H(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$H = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$N.call(b, prop))
      __defNormalProp$H(a, prop, b[prop]);
  if (__getOwnPropSymbols$N)
    for (var prop of __getOwnPropSymbols$N(b)) {
      if (__propIsEnum$N.call(b, prop))
        __defNormalProp$H(a, prop, b[prop]);
    }
  return a;
};
var __objRest$l = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$N.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$N)
    for (var prop of __getOwnPropSymbols$N(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$N.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class ResourceDeployTokens extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$H({prefixUrl: resourceType}, options));
  }
  add(resourceId, tokenName, tokenScopes, options) {
    return RequestHelper.post()(this, `${encodeURIComponent(resourceId)}/deploy_tokens`, __objSpread$H({
      name: tokenName,
      scopes: tokenScopes
    }, options));
  }
  all(_a = {}) {
    var _b = _a, {
      resourceId,
      projectId,
      groupId
    } = _b, options = __objRest$l(_b, [
      "resourceId",
      "projectId",
      "groupId"
    ]);
    const prefix = resourceId || projectId || groupId ? `${encodeURIComponent(resourceId || projectId || groupId)}/` : "";
    return RequestHelper.get()(this, `${prefix}deploy_tokens`, options);
  }
  remove(resourceId, tokenId, options) {
    const [rId, tId] = [resourceId, tokenId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/deploy_tokens/${tId}`, options);
  }
}

var __defProp$G = Object.defineProperty;
var __hasOwnProp$M = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$M = Object.getOwnPropertySymbols;
var __propIsEnum$M = Object.prototype.propertyIsEnumerable;
var __defNormalProp$G = (obj, key, value) => key in obj ? __defProp$G(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$G = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$M.call(b, prop))
      __defNormalProp$G(a, prop, b[prop]);
  if (__getOwnPropSymbols$M)
    for (var prop of __getOwnPropSymbols$M(b)) {
      if (__propIsEnum$M.call(b, prop))
        __defNormalProp$G(a, prop, b[prop]);
    }
  return a;
};
var __objRest$k = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$M.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$M)
    for (var prop of __getOwnPropSymbols$M(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$M.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class ResourceDiscussions extends requesterUtils.BaseService {
  constructor(resourceType, resource2Type, options) {
    super(__objSpread$G({prefixUrl: resourceType}, options));
    this.resource2Type = resource2Type;
  }
  addNote(resourceId, resource2Id, discussionId, noteId, body, options) {
    const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes`, __objSpread$G({query: {body}, noteId: nId}, options));
  }
  all(resourceId, resource2Id, options) {
    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, options);
  }
  create(resourceId, resource2Id, body, options) {
    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, __objSpread$G({
      query: {body}
    }, options));
  }
  editNote(resourceId, resource2Id, discussionId, noteId, _a = {}) {
    var _b = _a, {body} = _b, options = __objRest$k(_b, ["body"]);
    const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, __objSpread$G({
      query: {body}
    }, options));
  }
  removeNote(resourceId, resource2Id, discussionId, noteId, options) {
    const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, options);
  }
  show(resourceId, resource2Id, discussionId, options) {
    const [rId, r2Id, dId] = [resourceId, resource2Id, discussionId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}`, options);
  }
}

var __defProp$F = Object.defineProperty;
var __hasOwnProp$L = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$L = Object.getOwnPropertySymbols;
var __propIsEnum$L = Object.prototype.propertyIsEnumerable;
var __defNormalProp$F = (obj, key, value) => key in obj ? __defProp$F(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$F = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$L.call(b, prop))
      __defNormalProp$F(a, prop, b[prop]);
  if (__getOwnPropSymbols$L)
    for (var prop of __getOwnPropSymbols$L(b)) {
      if (__propIsEnum$L.call(b, prop))
        __defNormalProp$F(a, prop, b[prop]);
    }
  return a;
};
class ResourceIssueBoards extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$F({prefixUrl: resourceType}, options));
  }
  all(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/boards`, options);
  }
  create(resourceId, name, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.post()(this, `${rId}/boards`, __objSpread$F({name}, options));
  }
  createList(resourceId, boardId, labelId, options) {
    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/boards/${bId}/lists`, __objSpread$F({
      labelId
    }, options));
  }
  edit(resourceId, boardId, options) {
    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/boards/${bId}`, options);
  }
  editList(resourceId, boardId, listId, position, options) {
    const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/boards/${bId}/lists/${lId}`, __objSpread$F({
      position
    }, options));
  }
  lists(resourceId, boardId, options) {
    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/boards/${bId}/lists`, options);
  }
  remove(resourceId, boardId, options) {
    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/boards/${bId}`, options);
  }
  removeList(resourceId, boardId, listId, options) {
    const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/boards/${bId}/lists/${lId}`, options);
  }
  show(resourceId, boardId, options) {
    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/boards/${bId}`, options);
  }
  showList(resourceId, boardId, listId, options) {
    const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/boards/${bId}/lists/${lId}`, options);
  }
}

var __defProp$E = Object.defineProperty;
var __hasOwnProp$K = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$K = Object.getOwnPropertySymbols;
var __propIsEnum$K = Object.prototype.propertyIsEnumerable;
var __defNormalProp$E = (obj, key, value) => key in obj ? __defProp$E(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$E = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$K.call(b, prop))
      __defNormalProp$E(a, prop, b[prop]);
  if (__getOwnPropSymbols$K)
    for (var prop of __getOwnPropSymbols$K(b)) {
      if (__propIsEnum$K.call(b, prop))
        __defNormalProp$E(a, prop, b[prop]);
    }
  return a;
};
class ResourceLabels extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$E({prefixUrl: resourceType}, options));
  }
  all(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/labels`, options);
  }
  create(resourceId, labelName, color, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.post()(this, `${rId}/labels`, __objSpread$E({
      name: labelName,
      color
    }, options));
  }
  edit(resourceId, labelId, options) {
    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/labels/${lId}`, options);
  }
  remove(resourceId, labelId, options) {
    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/labels/${lId}`, options);
  }
  subscribe(resourceId, labelId, options) {
    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/issues/${lId}/subscribe`, options);
  }
  unsubscribe(resourceId, labelId, options) {
    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/issues/${lId}/unsubscribe`, options);
  }
}

var __defProp$D = Object.defineProperty;
var __hasOwnProp$J = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$J = Object.getOwnPropertySymbols;
var __propIsEnum$J = Object.prototype.propertyIsEnumerable;
var __defNormalProp$D = (obj, key, value) => key in obj ? __defProp$D(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$D = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$J.call(b, prop))
      __defNormalProp$D(a, prop, b[prop]);
  if (__getOwnPropSymbols$J)
    for (var prop of __getOwnPropSymbols$J(b)) {
      if (__propIsEnum$J.call(b, prop))
        __defNormalProp$D(a, prop, b[prop]);
    }
  return a;
};
var __objRest$j = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$J.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$J)
    for (var prop of __getOwnPropSymbols$J(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$J.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class ResourceMembers extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$D({prefixUrl: resourceType}, options));
  }
  add(resourceId, userId, accessLevel, options) {
    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/members`, __objSpread$D({
      userId: uId,
      accessLevel
    }, options));
  }
  all(resourceId, _a = {}) {
    var _b = _a, {includeInherited} = _b, options = __objRest$j(_b, ["includeInherited"]);
    const rId = encodeURIComponent(resourceId);
    const url = [rId, "members"];
    if (includeInherited)
      url.push("all");
    return RequestHelper.get()(this, url.join("/"), options);
  }
  edit(resourceId, userId, accessLevel, options) {
    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/members/${uId}`, __objSpread$D({
      accessLevel
    }, options));
  }
  show(resourceId, userId, _c = {}) {
    var _d = _c, {includeInherited} = _d, options = __objRest$j(_d, ["includeInherited"]);
    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
    const url = [rId, "members"];
    if (includeInherited)
      url.push("all");
    url.push(uId);
    return RequestHelper.get()(this, url.join("/"), options);
  }
  remove(resourceId, userId, options) {
    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/members/${uId}`, options);
  }
}

var __defProp$C = Object.defineProperty;
var __hasOwnProp$I = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$I = Object.getOwnPropertySymbols;
var __propIsEnum$I = Object.prototype.propertyIsEnumerable;
var __defNormalProp$C = (obj, key, value) => key in obj ? __defProp$C(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$C = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$I.call(b, prop))
      __defNormalProp$C(a, prop, b[prop]);
  if (__getOwnPropSymbols$I)
    for (var prop of __getOwnPropSymbols$I(b)) {
      if (__propIsEnum$I.call(b, prop))
        __defNormalProp$C(a, prop, b[prop]);
    }
  return a;
};
class ResourceMilestones extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$C({prefixUrl: resourceType}, options));
  }
  all(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/milestones`, options);
  }
  create(resourceId, title, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.post()(this, `${rId}/milestones`, __objSpread$C({title}, options));
  }
  edit(resourceId, milestoneId, options) {
    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/milestones/${mId}`, options);
  }
  issues(resourceId, milestoneId, options) {
    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/milestones/${mId}/issues`, options);
  }
  mergeRequests(resourceId, milestoneId, options) {
    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/milestones/${mId}/merge_requests`, options);
  }
  show(resourceId, milestoneId, options) {
    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/milestones/${mId}`, options);
  }
}

var __defProp$B = Object.defineProperty;
var __hasOwnProp$H = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$H = Object.getOwnPropertySymbols;
var __propIsEnum$H = Object.prototype.propertyIsEnumerable;
var __defNormalProp$B = (obj, key, value) => key in obj ? __defProp$B(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$B = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$H.call(b, prop))
      __defNormalProp$B(a, prop, b[prop]);
  if (__getOwnPropSymbols$H)
    for (var prop of __getOwnPropSymbols$H(b)) {
      if (__propIsEnum$H.call(b, prop))
        __defNormalProp$B(a, prop, b[prop]);
    }
  return a;
};
class ResourceNotes extends requesterUtils.BaseService {
  constructor(resourceType, resource2Type, options) {
    super(__objSpread$B({prefixUrl: resourceType}, options));
    this.resource2Type = resource2Type;
  }
  all(resourceId, resource2Id, options) {
    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, options);
  }
  create(resourceId, resource2Id, body, options) {
    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
    return RequestHelper.post()(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, __objSpread$B({
      body
    }, options));
  }
  edit(resourceId, resource2Id, noteId, body, options) {
    const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, __objSpread$B({
      body
    }, options));
  }
  remove(resourceId, resource2Id, noteId, options) {
    const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
  }
  show(resourceId, resource2Id, noteId, options) {
    const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
  }
}

var __defProp$A = Object.defineProperty;
var __hasOwnProp$G = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$G = Object.getOwnPropertySymbols;
var __propIsEnum$G = Object.prototype.propertyIsEnumerable;
var __defNormalProp$A = (obj, key, value) => key in obj ? __defProp$A(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$A = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$G.call(b, prop))
      __defNormalProp$A(a, prop, b[prop]);
  if (__getOwnPropSymbols$G)
    for (var prop of __getOwnPropSymbols$G(b)) {
      if (__propIsEnum$G.call(b, prop))
        __defNormalProp$A(a, prop, b[prop]);
    }
  return a;
};
class ResourceTemplates extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$A({prefixUrl: ["templates", resourceType].join("/")}, options));
  }
  all(options) {
    return RequestHelper.get()(this, "", options);
  }
  show(key, options) {
    const rId = encodeURIComponent(key);
    return RequestHelper.get()(this, `${rId}`, options);
  }
}

var __defProp$z = Object.defineProperty;
var __hasOwnProp$F = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$F = Object.getOwnPropertySymbols;
var __propIsEnum$F = Object.prototype.propertyIsEnumerable;
var __defNormalProp$z = (obj, key, value) => key in obj ? __defProp$z(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$z = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$F.call(b, prop))
      __defNormalProp$z(a, prop, b[prop]);
  if (__getOwnPropSymbols$F)
    for (var prop of __getOwnPropSymbols$F(b)) {
      if (__propIsEnum$F.call(b, prop))
        __defNormalProp$z(a, prop, b[prop]);
    }
  return a;
};
class ResourceVariables extends requesterUtils.BaseService {
  constructor(resourceType, options) {
    super(__objSpread$z({prefixUrl: resourceType}, options));
  }
  all(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.get()(this, `${rId}/variables`, options);
  }
  create(resourceId, options) {
    const rId = encodeURIComponent(resourceId);
    return RequestHelper.post()(this, `${rId}/variables`, options);
  }
  edit(resourceId, keyId, options) {
    const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
    return RequestHelper.put()(this, `${rId}/variables/${kId}`, options);
  }
  show(resourceId, keyId, options) {
    const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
    return RequestHelper.get()(this, `${rId}/variables/${kId}`, options);
  }
  remove(resourceId, keyId, options) {
    const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
    return RequestHelper.del()(this, `${rId}/variables/${kId}`, options);
  }
}

class GroupAccessRequests extends ResourceAccessRequests {
  constructor(options) {
    super("groups", options);
  }
}

class GroupBadges extends ResourceBadges {
  constructor(options) {
    super("groups", options);
  }
}

class GroupCustomAttributes extends ResourceCustomAttributes {
  constructor(options) {
    super("groups", options);
  }
}

class GroupIssueBoards extends ResourceIssueBoards {
  constructor(options) {
    super("groups", options);
  }
}

class GroupMembers extends ResourceMembers {
  constructor(options) {
    super("groups", options);
  }
}

class GroupMilestones extends ResourceMilestones {
  constructor(options) {
    super("groups", options);
  }
}

class GroupRunners extends requesterUtils.BaseService {
  all(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.get()(this, `groups/${gId}/runners`, options);
  }
}

class GroupVariables extends ResourceVariables {
  constructor(options) {
    super("groups", options);
  }
}

class GroupLabels extends ResourceLabels {
  constructor(options) {
    super("groups", options);
  }
}

class GroupDeployTokens extends ResourceDeployTokens {
  constructor(options) {
    super("groups", options);
  }
}

var __defProp$y = Object.defineProperty;
var __hasOwnProp$E = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$E = Object.getOwnPropertySymbols;
var __propIsEnum$E = Object.prototype.propertyIsEnumerable;
var __defNormalProp$y = (obj, key, value) => key in obj ? __defProp$y(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$y = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$E.call(b, prop))
      __defNormalProp$y(a, prop, b[prop]);
  if (__getOwnPropSymbols$E)
    for (var prop of __getOwnPropSymbols$E(b)) {
      if (__propIsEnum$E.call(b, prop))
        __defNormalProp$y(a, prop, b[prop]);
    }
  return a;
};
class Epics extends requesterUtils.BaseService {
  all(groupId, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.get()(this, `groups/${gId}/epics`, options);
  }
  create(groupId, title, options) {
    const gId = encodeURIComponent(groupId);
    return RequestHelper.post()(this, `groups/${gId}/epics`, __objSpread$y({title}, options));
  }
  edit(groupId, epicId, options) {
    const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
    return RequestHelper.put()(this, `groups/${gId}/epics/${eId}`, options);
  }
  remove(groupId, epicId, options) {
    const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
    return RequestHelper.del()(this, `groups/${gId}/epics/${eId}`, options);
  }
  show(groupId, epicId, options) {
    const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
    return RequestHelper.get()(this, `groups/${gId}/epics/${eId}`, options);
  }
}

class EpicIssues extends requesterUtils.BaseService {
  all(groupId, epicIId, options) {
    const [gId, eId] = [groupId, epicIId].map(encodeURIComponent);
    return RequestHelper.get()(this, `groups/${gId}/epics/${eId}/issues`, options);
  }
  assign(groupId, epicIId, epicIssueId, options) {
    const [gId, eId, iId] = [groupId, epicIId, epicIssueId].map(encodeURIComponent);
    return RequestHelper.post()(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
  }
  edit(groupId, epicIId, epicIssueId, options) {
    const [gId, eId, iId] = [groupId, epicIId, epicIssueId].map(encodeURIComponent);
    return RequestHelper.put()(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
  }
  remove(groupId, epicIId, epicIssueId, options) {
    const [gId, eId, iId] = [groupId, epicIId, epicIssueId].map(encodeURIComponent);
    return RequestHelper.del()(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
  }
}

class EpicNotes extends ResourceNotes {
  constructor(options) {
    super("groups", "epics", options);
  }
}

class EpicDiscussions extends ResourceDiscussions {
  constructor(options) {
    super("groups", "epics", options);
  }
}

var __defProp$x = Object.defineProperty;
var __hasOwnProp$D = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$D = Object.getOwnPropertySymbols;
var __propIsEnum$D = Object.prototype.propertyIsEnumerable;
var __defNormalProp$x = (obj, key, value) => key in obj ? __defProp$x(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$x = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$D.call(b, prop))
      __defNormalProp$x(a, prop, b[prop]);
  if (__getOwnPropSymbols$D)
    for (var prop of __getOwnPropSymbols$D(b)) {
      if (__propIsEnum$D.call(b, prop))
        __defNormalProp$x(a, prop, b[prop]);
    }
  return a;
};
class Users extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "users", options);
  }
  activities(options) {
    return RequestHelper.get()(this, "users/activities", options);
  }
  projects(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.get()(this, `users/${uId}/projects`, options);
  }
  block(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.post()(this, `users/${uId}/block`, options);
  }
  create(options) {
    return RequestHelper.post()(this, "users", options);
  }
  current(options) {
    return RequestHelper.get()(this, "user", options);
  }
  edit(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.put()(this, `users/${uId}`, options);
  }
  events(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.get()(this, `users/${uId}/events`, options);
  }
  search(emailOrUsername, options) {
    return RequestHelper.get()(this, "users", __objSpread$x({
      search: emailOrUsername
    }, options));
  }
  show(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.get()(this, `users/${uId}`, options);
  }
  remove(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.del()(this, `users/${uId}`, options);
  }
  unblock(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.post()(this, `users/${uId}/unblock`, options);
  }
}

class UserCustomAttributes extends ResourceCustomAttributes {
  constructor(options) {
    super("users", options);
  }
}

var __defProp$w = Object.defineProperty;
var __hasOwnProp$C = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$C = Object.getOwnPropertySymbols;
var __propIsEnum$C = Object.prototype.propertyIsEnumerable;
var __defNormalProp$w = (obj, key, value) => key in obj ? __defProp$w(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$w = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$C.call(b, prop))
      __defNormalProp$w(a, prop, b[prop]);
  if (__getOwnPropSymbols$C)
    for (var prop of __getOwnPropSymbols$C(b)) {
      if (__propIsEnum$C.call(b, prop))
        __defNormalProp$w(a, prop, b[prop]);
    }
  return a;
};
var __objRest$i = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$C.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$C)
    for (var prop of __getOwnPropSymbols$C(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$C.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const url$3 = (userId) => userId ? `users/${encodeURIComponent(userId)}/emails` : "user/emails";
class UserEmails extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {userId} = _b, options = __objRest$i(_b, ["userId"]);
    return RequestHelper.get()(this, url$3(userId), options);
  }
  add(email, _c = {}) {
    var _d = _c, {userId} = _d, options = __objRest$i(_d, ["userId"]);
    return RequestHelper.post()(this, url$3(userId), __objSpread$w({
      email
    }, options));
  }
  show(emailId, options) {
    const eId = encodeURIComponent(emailId);
    return RequestHelper.get()(this, `user/emails/${eId}`, options);
  }
  remove(emailId, _e = {}) {
    var _f = _e, {userId} = _f, options = __objRest$i(_f, ["userId"]);
    const eId = encodeURIComponent(emailId);
    return RequestHelper.del()(this, `${url$3(userId)}/${eId}`, options);
  }
}

var __defProp$v = Object.defineProperty;
var __hasOwnProp$B = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$B = Object.getOwnPropertySymbols;
var __propIsEnum$B = Object.prototype.propertyIsEnumerable;
var __defNormalProp$v = (obj, key, value) => key in obj ? __defProp$v(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$v = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$B.call(b, prop))
      __defNormalProp$v(a, prop, b[prop]);
  if (__getOwnPropSymbols$B)
    for (var prop of __getOwnPropSymbols$B(b)) {
      if (__propIsEnum$B.call(b, prop))
        __defNormalProp$v(a, prop, b[prop]);
    }
  return a;
};
class UserImpersonationTokens extends requesterUtils.BaseService {
  all(userId, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.get()(this, `users/${uId}/impersonation_tokens`, options);
  }
  add(userId, name, scopes, expiresAt, options) {
    const uId = encodeURIComponent(userId);
    return RequestHelper.post()(this, `users/${uId}/impersonation_tokens`, __objSpread$v({
      name,
      expiresAt,
      scopes
    }, options));
  }
  show(userId, tokenId, options) {
    const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
    return RequestHelper.get()(this, `users/${uId}/impersonation_tokens/${tId}`, options);
  }
  revoke(userId, tokenId, options) {
    const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
    return RequestHelper.del()(this, `users/${uId}/impersonation_tokens/${tId}`, options);
  }
}

var __defProp$u = Object.defineProperty;
var __hasOwnProp$A = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$A = Object.getOwnPropertySymbols;
var __propIsEnum$A = Object.prototype.propertyIsEnumerable;
var __defNormalProp$u = (obj, key, value) => key in obj ? __defProp$u(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$u = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$A.call(b, prop))
      __defNormalProp$u(a, prop, b[prop]);
  if (__getOwnPropSymbols$A)
    for (var prop of __getOwnPropSymbols$A(b)) {
      if (__propIsEnum$A.call(b, prop))
        __defNormalProp$u(a, prop, b[prop]);
    }
  return a;
};
var __objRest$h = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$A.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$A)
    for (var prop of __getOwnPropSymbols$A(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$A.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const url$2 = (userId) => userId ? `users/${encodeURIComponent(userId)}/keys` : "user/keys";
class UserSSHKeys extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {userId} = _b, options = __objRest$h(_b, ["userId"]);
    return RequestHelper.get()(this, url$2(userId), options);
  }
  create(title, key, _c = {}) {
    var _d = _c, {userId} = _d, options = __objRest$h(_d, ["userId"]);
    return RequestHelper.post()(this, url$2(userId), __objSpread$u({
      title,
      key
    }, options));
  }
  show(keyId, _e = {}) {
    var _f = _e, {userId} = _f, options = __objRest$h(_f, ["userId"]);
    const kId = encodeURIComponent(keyId);
    return RequestHelper.get()(this, `${url$2(userId)}/${kId}`, options);
  }
  remove(keyId, _g = {}) {
    var _h = _g, {userId} = _h, options = __objRest$h(_h, ["userId"]);
    const kId = encodeURIComponent(keyId);
    return RequestHelper.del()(this, `${url$2(userId)}/${kId}`, options);
  }
}

var __defProp$t = Object.defineProperty;
var __hasOwnProp$z = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$z = Object.getOwnPropertySymbols;
var __propIsEnum$z = Object.prototype.propertyIsEnumerable;
var __defNormalProp$t = (obj, key, value) => key in obj ? __defProp$t(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$t = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$z.call(b, prop))
      __defNormalProp$t(a, prop, b[prop]);
  if (__getOwnPropSymbols$z)
    for (var prop of __getOwnPropSymbols$z(b)) {
      if (__propIsEnum$z.call(b, prop))
        __defNormalProp$t(a, prop, b[prop]);
    }
  return a;
};
var __objRest$g = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$z.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$z)
    for (var prop of __getOwnPropSymbols$z(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$z.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const url$1 = (userId) => userId ? `users/${encodeURIComponent(userId)}/gpg_keys` : "user/gpg_keys";
class UserGPGKeys extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {userId} = _b, options = __objRest$g(_b, ["userId"]);
    return RequestHelper.get()(this, url$1(userId), options);
  }
  add(key, _c = {}) {
    var _d = _c, {userId} = _d, options = __objRest$g(_d, ["userId"]);
    return RequestHelper.post()(this, url$1(userId), __objSpread$t({
      key
    }, options));
  }
  show(keyId, _e = {}) {
    var _f = _e, {userId} = _f, options = __objRest$g(_f, ["userId"]);
    const kId = encodeURIComponent(keyId);
    return RequestHelper.get()(this, `${url$1(userId)}/${kId}`, options);
  }
  remove(keyId, _g = {}) {
    var _h = _g, {userId} = _h, options = __objRest$g(_h, ["userId"]);
    const kId = encodeURIComponent(keyId);
    return RequestHelper.del()(this, `${url$1(userId)}/${kId}`, options);
  }
}

var __defProp$s = Object.defineProperty;
var __hasOwnProp$y = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$y = Object.getOwnPropertySymbols;
var __propIsEnum$y = Object.prototype.propertyIsEnumerable;
var __defNormalProp$s = (obj, key, value) => key in obj ? __defProp$s(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$s = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$y.call(b, prop))
      __defNormalProp$s(a, prop, b[prop]);
  if (__getOwnPropSymbols$y)
    for (var prop of __getOwnPropSymbols$y(b)) {
      if (__propIsEnum$y.call(b, prop))
        __defNormalProp$s(a, prop, b[prop]);
    }
  return a;
};
class Branches extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/branches`, options);
  }
  create(projectId, branchName, ref, options) {
    const pId = encodeURIComponent(projectId);
    const branchKey = this.url.includes("v3") ? "branchName" : "branch";
    return RequestHelper.post()(this, `projects/${pId}/repository/branches`, __objSpread$s({
      [branchKey]: branchName,
      ref
    }, options));
  }
  remove(projectId, branchName, options) {
    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/repository/branches/${bName}`, options);
  }
  show(projectId, branchName, options) {
    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/repository/branches/${bName}`, options);
  }
}

var __defProp$r = Object.defineProperty;
var __hasOwnProp$x = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$x = Object.getOwnPropertySymbols;
var __propIsEnum$x = Object.prototype.propertyIsEnumerable;
var __defNormalProp$r = (obj, key, value) => key in obj ? __defProp$r(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$r = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$x.call(b, prop))
      __defNormalProp$r(a, prop, b[prop]);
  if (__getOwnPropSymbols$x)
    for (var prop of __getOwnPropSymbols$x(b)) {
      if (__propIsEnum$x.call(b, prop))
        __defNormalProp$r(a, prop, b[prop]);
    }
  return a;
};
class Commits extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits`, options);
  }
  cherryPick(projectId, sha, branch, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/repository/commits/${sha}/cherry_pick`, __objSpread$r({
      branch
    }, options));
  }
  comments(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits/${sha}/comments`, options);
  }
  create(projectId, branch, message, actions = [], options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/repository/commits`, __objSpread$r({
      branch,
      commitMessage: message,
      actions
    }, options));
  }
  createComment(projectId, sha, note, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/repository/commits/${sha}/comments`, __objSpread$r({
      note
    }, options));
  }
  diff(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits/${sha}/diff`, options);
  }
  editStatus(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/statuses/${sha}`, options);
  }
  references(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits/${sha}/refs`, options);
  }
  revert(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/repository/commits/${sha}/revert`, options);
  }
  show(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits/${sha}`, options);
  }
  statuses(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits/${sha}/statuses`, options);
  }
  mergeRequests(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits/${sha}/merge_requests`, options);
  }
  signature(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/commits/${sha}/signature`, options);
  }
}

class CommitDiscussions extends ResourceDiscussions {
  constructor(options) {
    super("projects", "repository/commits", options);
  }
}

var __defProp$q = Object.defineProperty;
var __hasOwnProp$w = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$w = Object.getOwnPropertySymbols;
var __propIsEnum$w = Object.prototype.propertyIsEnumerable;
var __defNormalProp$q = (obj, key, value) => key in obj ? __defProp$q(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$q = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$w.call(b, prop))
      __defNormalProp$q(a, prop, b[prop]);
  if (__getOwnPropSymbols$w)
    for (var prop of __getOwnPropSymbols$w(b)) {
      if (__propIsEnum$w.call(b, prop))
        __defNormalProp$q(a, prop, b[prop]);
    }
  return a;
};
class ContainerRegistry extends requesterUtils.BaseService {
  projectRepositories(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/registry/repositories`, options);
  }
  groupRepositories(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `groups/${pId}/registry/repositories`, options);
  }
  showRepository(projectId, repositoryId, options) {
    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/registry/repositories/${rId}`, options);
  }
  tags(projectId, repositoryId, options) {
    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/registry/repositories/${rId}/tags`, options);
  }
  removeRepository(projectId, repositoryId, options) {
    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/registry/repositories/${rId}`, options);
  }
  removeTag(projectId, repositoryId, tagName, options) {
    const [pId, rId, tId] = [projectId, repositoryId, tagName].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/registry/repositories/${rId}/tags/${tId}`, options);
  }
  removeTags(projectId, repositoryId, nameRegexDelete, options) {
    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/registry/repositories/${rId}/tags`, __objSpread$q({
      nameRegexDelete
    }, options));
  }
  showTag(projectId, repositoryId, tagName, options) {
    const [pId, rId, tId] = [projectId, repositoryId, tagName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/registry/repositories/${rId}/tags/${tId}`, options);
  }
}

var __defProp$p = Object.defineProperty;
var __hasOwnProp$v = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$v = Object.getOwnPropertySymbols;
var __propIsEnum$v = Object.prototype.propertyIsEnumerable;
var __defNormalProp$p = (obj, key, value) => key in obj ? __defProp$p(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$p = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$v.call(b, prop))
      __defNormalProp$p(a, prop, b[prop]);
  if (__getOwnPropSymbols$v)
    for (var prop of __getOwnPropSymbols$v(b)) {
      if (__propIsEnum$v.call(b, prop))
        __defNormalProp$p(a, prop, b[prop]);
    }
  return a;
};
class Deployments extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/deployments`, options);
  }
  create(projectId, environment, sha, ref, tag, status, options) {
    const [pId] = [projectId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/deployments`, __objSpread$p({
      environment,
      sha,
      ref,
      tag,
      status
    }, options));
  }
  edit(projectId, deploymentId, status, options) {
    const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/deployments/${dId}`, __objSpread$p({
      status
    }, options));
  }
  show(projectId, deploymentId, options) {
    const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/deployments/${dId}`, options);
  }
  mergeRequests(projectId, deploymentId, options) {
    const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/deployments/${dId}/merge_requests`, options);
  }
}

var __hasOwnProp$u = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$u = Object.getOwnPropertySymbols;
var __propIsEnum$u = Object.prototype.propertyIsEnumerable;
var __objRest$f = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$u.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$u)
    for (var prop of __getOwnPropSymbols$u(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$u.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class DeployKeys extends requesterUtils.BaseService {
  add(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/deploy_keys`, options);
  }
  all(_a = {}) {
    var _b = _a, {projectId} = _b, options = __objRest$f(_b, ["projectId"]);
    let url;
    if (projectId) {
      url = `projects/${encodeURIComponent(projectId)}/deploy_keys`;
    } else {
      url = "deploy_keys";
    }
    return RequestHelper.get()(this, url, options);
  }
  edit(projectId, keyId, options) {
    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/deploy_keys/${kId}`, options);
  }
  enable(projectId, keyId, options) {
    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/deploy_keys/${kId}/enable`, options);
  }
  remove(projectId, keyId, options) {
    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/deploy_keys/${kId}`, options);
  }
  show(projectId, keyId, options) {
    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/deploy_keys/${kId}`, options);
  }
}

class Environments extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/environments`, options);
  }
  show(projectId, environmentId, options) {
    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/environments/${eId}`, options);
  }
  create(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/environments`, options);
  }
  edit(projectId, environmentId, options) {
    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/environments/${eId}`, options);
  }
  remove(projectId, environmentId, options) {
    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/environments/${eId}`, options);
  }
  stop(projectId, environmentId, options) {
    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/environments/${eId}/stop`, options);
  }
}

var __defProp$o = Object.defineProperty;
var __hasOwnProp$t = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$t = Object.getOwnPropertySymbols;
var __propIsEnum$t = Object.prototype.propertyIsEnumerable;
var __defNormalProp$o = (obj, key, value) => key in obj ? __defProp$o(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$o = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$t.call(b, prop))
      __defNormalProp$o(a, prop, b[prop]);
  if (__getOwnPropSymbols$t)
    for (var prop of __getOwnPropSymbols$t(b)) {
      if (__propIsEnum$t.call(b, prop))
        __defNormalProp$o(a, prop, b[prop]);
    }
  return a;
};
class FreezePeriods extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/freeze_periods`, options);
  }
  show(projectId, freezePeriodId, options) {
    const [pId, fId] = [projectId, freezePeriodId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/freeze_periods/${fId}`, options);
  }
  create(projectId, freezeStart, freezeEnd, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/freeze_periods`, __objSpread$o({
      freezeStart,
      freezeEnd
    }, options));
  }
  edit(projectId, freezePeriodId, options) {
    const [pId, fId] = [projectId, freezePeriodId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/freeze_periods/${fId}`, options);
  }
  delete(projectId, freezePeriodId, options) {
    const [pId, fId] = [projectId, freezePeriodId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/freeze_periods/${fId}`, options);
  }
}

var __defProp$n = Object.defineProperty;
var __hasOwnProp$s = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$s = Object.getOwnPropertySymbols;
var __propIsEnum$s = Object.prototype.propertyIsEnumerable;
var __defNormalProp$n = (obj, key, value) => key in obj ? __defProp$n(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$n = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$s.call(b, prop))
      __defNormalProp$n(a, prop, b[prop]);
  if (__getOwnPropSymbols$s)
    for (var prop of __getOwnPropSymbols$s(b)) {
      if (__propIsEnum$s.call(b, prop))
        __defNormalProp$n(a, prop, b[prop]);
    }
  return a;
};
var __objRest$e = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$s.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$s)
    for (var prop of __getOwnPropSymbols$s(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$s.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Issues extends requesterUtils.BaseService {
  addSpentTime(projectId, issueIid, duration, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/issues/${iId}/add_spent_time`, __objSpread$n({
      duration
    }, options));
  }
  addTimeEstimate(projectId, issueIid, duration, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/issues/${iId}/time_estimate`, __objSpread$n({
      duration
    }, options));
  }
  all(_a = {}) {
    var _b = _a, {projectId, groupId} = _b, options = __objRest$e(_b, ["projectId", "groupId"]);
    let url;
    if (projectId) {
      url = `projects/${encodeURIComponent(projectId)}/issues`;
    } else if (groupId) {
      url = `groups/${encodeURIComponent(groupId)}/issues`;
    } else {
      url = "issues";
    }
    return RequestHelper.get()(this, url, options);
  }
  create(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/issues`, options);
  }
  closedBy(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/issues/${iId}/closed_by`, options);
  }
  edit(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/issues/${iId}`, options);
  }
  link(projectId, issueIId, targetProjectId, targetIssueIId, options) {
    const [pId, iIId] = [projectId, issueIId].map(encodeURIComponent);
    const [targetPId, targetIId] = [targetProjectId, targetIssueIId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/issues/${iIId}/links`, __objSpread$n({
      targetProjectId: targetPId,
      targetIssueIid: targetIId
    }, options));
  }
  links(projectId, issueIid) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/issues/${iId}/links`);
  }
  participants(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/issues/${iId}/participants`, options);
  }
  relatedMergeRequests(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/issues/${iId}/related_merge_requests`, options);
  }
  removeLink(projectId, issueIid, issueLinkId, options) {
    const [pId, iId, iLinkId] = [projectId, issueIid, issueLinkId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/issues/${iId}/links/${iLinkId}`, __objSpread$n({}, options));
  }
  remove(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/issues/${iId}`, options);
  }
  resetSpentTime(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/issues/${iId}/reset_spent_time`, options);
  }
  resetTimeEstimate(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/issues/${iId}/reset_time_estimate`, options);
  }
  show(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/issues/${iId}`, options);
  }
  subscribe(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/issues/${iId}/subscribe`, options);
  }
  timeStats(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/issues/${iId}/time_stats`, options);
  }
  unsubscribe(projectId, issueIid, options) {
    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/issues/${iId}/unsubscribe`, options);
  }
}

var __hasOwnProp$r = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$r = Object.getOwnPropertySymbols;
var __propIsEnum$r = Object.prototype.propertyIsEnumerable;
var __objRest$d = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$r.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$r)
    for (var prop of __getOwnPropSymbols$r(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$r.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class IssuesStatistics extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {projectId, groupId} = _b, options = __objRest$d(_b, ["projectId", "groupId"]);
    let url;
    if (projectId) {
      url = `projects/${encodeURIComponent(projectId)}/issues_statistics`;
    } else if (groupId) {
      url = `groups/${encodeURIComponent(groupId)}/issues_statistics`;
    } else {
      url = "issues_statistics";
    }
    return RequestHelper.get()(this, url, options);
  }
}

class IssueNotes extends ResourceNotes {
  constructor(options) {
    super("projects", "issues", options);
  }
}

class IssueNoteAwardEmojis extends ResourceNoteAwardEmojis {
  constructor(options) {
    super("issues", options);
  }
}

class IssueDiscussions extends ResourceDiscussions {
  constructor(options) {
    super("projects", "issues", options);
  }
}

class IssueAwardEmojis extends ResourceAwardEmojis {
  constructor(options) {
    super("issues", options);
  }
}

var __hasOwnProp$q = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$q = Object.getOwnPropertySymbols;
var __propIsEnum$q = Object.prototype.propertyIsEnumerable;
var __objRest$c = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$q.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$q)
    for (var prop of __getOwnPropSymbols$q(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$q.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Jobs extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/jobs`, options);
  }
  cancel(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/jobs/${jId}/cancel`, options);
  }
  downloadSingleArtifactFile(projectId, jobId, artifactPath, _a = {}) {
    var _b = _a, {stream = false} = _b, options = __objRest$c(_b, ["stream"]);
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    if (stream) {
      return RequestHelper.stream(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
    }
    return RequestHelper.get()(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
  }
  downloadSingleArtifactFileFromRef(projectId, ref, artifactPath, jobName, _c = {}) {
    var _d = _c, {stream = false} = _d, options = __objRest$c(_d, ["stream"]);
    const [pId, rId, name] = [projectId, ref, jobName].map(encodeURIComponent);
    if (stream) {
      return RequestHelper.stream(this, `projects/${pId}/jobs/artifacts/${rId}/raw/${artifactPath}?job=${name}`, options);
    }
    return RequestHelper.get()(this, `projects/${pId}/jobs/artifacts/${rId}/raw/${artifactPath}?job=${name}`, options);
  }
  downloadLatestArtifactFile(projectId, ref, jobName, _e = {}) {
    var _f = _e, {stream = false} = _f, options = __objRest$c(_f, ["stream"]);
    const [pId, rId, name] = [projectId, ref, jobName].map(encodeURIComponent);
    if (stream) {
      return RequestHelper.stream(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${name}`, options);
    }
    return RequestHelper.get()(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${name}`, options);
  }
  downloadTraceFile(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/jobs/${jId}/trace`, options);
  }
  erase(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/jobs/${jId}/erase`, options);
  }
  eraseArtifacts(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/jobs/${jId}/artifacts`, options);
  }
  keepArtifacts(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/jobs/${jId}/artifacts/keep`, options);
  }
  play(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/jobs/${jId}/play`, options);
  }
  retry(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/jobs/${jId}/retry`, options);
  }
  show(projectId, jobId, options) {
    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/jobs/${jId}`, options);
  }
  showPipelineJobs(projectId, pipelineId, options) {
    const [pId, ppId] = [projectId, pipelineId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/pipelines/${ppId}/jobs`, options);
  }
  showPipelineBridges(projectId, pipelineId, options) {
    const [pId, ppId] = [projectId, pipelineId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/pipelines/${ppId}/bridges`, options);
  }
}

class Labels extends ResourceLabels {
  constructor(options) {
    super("projects", options);
  }
}

var __defProp$m = Object.defineProperty;
var __hasOwnProp$p = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$p = Object.getOwnPropertySymbols;
var __propIsEnum$p = Object.prototype.propertyIsEnumerable;
var __defNormalProp$m = (obj, key, value) => key in obj ? __defProp$m(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$m = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$p.call(b, prop))
      __defNormalProp$m(a, prop, b[prop]);
  if (__getOwnPropSymbols$p)
    for (var prop of __getOwnPropSymbols$p(b)) {
      if (__propIsEnum$p.call(b, prop))
        __defNormalProp$m(a, prop, b[prop]);
    }
  return a;
};
var __objRest$b = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$p.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$p)
    for (var prop of __getOwnPropSymbols$p(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$p.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class MergeRequests extends requesterUtils.BaseService {
  accept(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/merge_requests/${mIid}/merge`, options);
  }
  addSpentTime(projectId, mergerequestIid, duration, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/add_spent_time`, __objSpread$m({
      duration
    }, options));
  }
  addTimeEstimate(projectId, mergerequestIid, duration, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/time_estimate`, __objSpread$m({
      duration
    }, options));
  }
  all(_a = {}) {
    var _b = _a, {
      projectId,
      groupId
    } = _b, options = __objRest$b(_b, [
      "projectId",
      "groupId"
    ]);
    let url;
    if (projectId) {
      url = `projects/${encodeURIComponent(projectId)}/merge_requests`;
    } else if (groupId) {
      url = `groups/${encodeURIComponent(groupId)}/merge_requests`;
    } else {
      url = "merge_requests";
    }
    return RequestHelper.get()(this, url, options);
  }
  cancelOnPipelineSucess(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/merge_requests/${mIid}/cancel_merge_when_pipeline_succeeds`, options);
  }
  changes(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/changes`, options);
  }
  closesIssues(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/closes_issues`, options);
  }
  commits(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/commits`, options);
  }
  create(projectId, sourceBranch, targetBranch, title, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests`, __objSpread$m({
      sourceBranch,
      targetBranch,
      title
    }, options));
  }
  edit(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/merge_requests/${mIid}`, options);
  }
  participants(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/participants`, options);
  }
  pipelines(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/pipelines`, options);
  }
  rebase(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/merge_requests/${mIid}/rebase`, options);
  }
  remove(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/merge_requests/${mIid}`, options);
  }
  resetSpentTime(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/reset_spent_time`, options);
  }
  resetTimeEstimate(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/reset_time_estimate`, options);
  }
  show(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}`, options);
  }
  subscribe(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/subscribe`, options);
  }
  timeStats(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/time_stats`, options);
  }
  version(projectId, mergerequestIid, versionId, options) {
    const [pId, mIid, vId] = [projectId, mergerequestIid, versionId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/versions/${vId}`, options);
  }
  versions(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/versions`, options);
  }
  unsubscribe(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/unsubscribe`, options);
  }
}

var __defProp$l = Object.defineProperty;
var __hasOwnProp$o = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$o = Object.getOwnPropertySymbols;
var __propIsEnum$o = Object.prototype.propertyIsEnumerable;
var __defNormalProp$l = (obj, key, value) => key in obj ? __defProp$l(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$l = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$o.call(b, prop))
      __defNormalProp$l(a, prop, b[prop]);
  if (__getOwnPropSymbols$o)
    for (var prop of __getOwnPropSymbols$o(b)) {
      if (__propIsEnum$o.call(b, prop))
        __defNormalProp$l(a, prop, b[prop]);
    }
  return a;
};
var __objRest$a = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$o.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$o)
    for (var prop of __getOwnPropSymbols$o(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$o.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class MergeRequestApprovals extends requesterUtils.BaseService {
  addApprovalRule(projectId, name, approvalsRequired, _a) {
    var _b = _a, {
      mergerequestIid
    } = _b, options = __objRest$a(_b, [
      "mergerequestIid"
    ]);
    const pId = encodeURIComponent(projectId);
    let url;
    if (mergerequestIid) {
      const mIid = encodeURIComponent(mergerequestIid);
      url = `projects/${pId}/merge_requests/${mIid}/approval_rules`;
    } else {
      url = `projects/${pId}/approval_rules`;
    }
    return RequestHelper.post()(this, url, __objSpread$l({name, approvalsRequired}, options));
  }
  approvalRules(projectId, _c = {}) {
    var _d = _c, {mergerequestIid} = _d, options = __objRest$a(_d, ["mergerequestIid"]);
    const pId = encodeURIComponent(projectId);
    let url;
    if (mergerequestIid) {
      const mIid = encodeURIComponent(mergerequestIid);
      url = `projects/${pId}/merge_requests/${mIid}/approval_rules`;
    } else {
      url = `projects/${pId}/approval_rules`;
    }
    return RequestHelper.get()(this, url, options);
  }
  approvals(projectId, _e = {}) {
    var _f = _e, {mergerequestIid} = _f, options = __objRest$a(_f, ["mergerequestIid"]);
    const pId = encodeURIComponent(projectId);
    let url;
    if (mergerequestIid) {
      const mIid = encodeURIComponent(mergerequestIid);
      url = `projects/${pId}/merge_requests/${mIid}/approvals`;
    } else {
      url = `projects/${pId}/approvals`;
    }
    return RequestHelper.get()(this, url, options);
  }
  approvalState(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/merge_requests/${mIid}/approval_state`, options);
  }
  approve(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/approve`, options);
  }
  approvers(projectId, approverIds, approverGroupIds, _g = {}) {
    var _h = _g, {mergerequestIid} = _h, options = __objRest$a(_h, ["mergerequestIid"]);
    const pId = encodeURIComponent(projectId);
    let url;
    if (mergerequestIid) {
      const mIid = encodeURIComponent(mergerequestIid);
      url = `projects/${pId}/merge_requests/${mIid}/approvers`;
    } else {
      url = `projects/${pId}/approvers`;
    }
    return RequestHelper.put()(this, url, __objSpread$l({approverIds, approverGroupIds}, options));
  }
  editApprovalRule(projectId, approvalRuleId, name, approvalsRequired, _i = {}) {
    var _j = _i, {
      mergerequestIid
    } = _j, options = __objRest$a(_j, [
      "mergerequestIid"
    ]);
    const [pId, aId] = [projectId, approvalRuleId].map(encodeURIComponent);
    let url;
    if (mergerequestIid) {
      const mIid = encodeURIComponent(mergerequestIid);
      url = `projects/${pId}/merge_requests/${mIid}/approval_rules/${aId}`;
    } else {
      url = `projects/${pId}/approval_rules/${aId}`;
    }
    return RequestHelper.put()(this, url, __objSpread$l({name, approvalsRequired}, options));
  }
  editApprovals(projectId, _k = {}) {
    var _l = _k, {mergerequestIid} = _l, options = __objRest$a(_l, ["mergerequestIid"]);
    const pId = encodeURIComponent(projectId);
    let url;
    if (mergerequestIid) {
      const mIid = encodeURIComponent(mergerequestIid);
      url = `projects/${pId}/merge_requests/${mIid}/approvals`;
    } else {
      url = `projects/${pId}/approvals`;
    }
    return RequestHelper.post()(this, url, options);
  }
  removeApprovalRule(projectId, approvalRuleId, _m = {}) {
    var _n = _m, {mergerequestIid} = _n, options = __objRest$a(_n, ["mergerequestIid"]);
    const [pId, aId] = [projectId, approvalRuleId].map(encodeURIComponent);
    let url;
    if (mergerequestIid) {
      const mIid = encodeURIComponent(mergerequestIid);
      url = `projects/${pId}/merge_requests/${mIid}/approval_rules/${aId}`;
    } else {
      url = `projects/${pId}/approval_rules/${aId}`;
    }
    return RequestHelper.del()(this, url, options);
  }
  unapprove(projectId, mergerequestIid, options) {
    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/unapprove`, options);
  }
}

class MergeRequestAwardEmojis extends ResourceAwardEmojis {
  constructor(options) {
    super("merge_requests", options);
  }
}

class MergeRequestDiscussions extends ResourceDiscussions {
  constructor(options) {
    super("projects", "merge_requests", options);
  }
}

class MergeRequestNotes extends ResourceNotes {
  constructor(options) {
    super("projects", "merge_requests", options);
  }
}

class Packages extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/packages`, options);
  }
  remove(projectId, packageId, options) {
    const [pId, pkId] = [projectId, packageId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/packages/${pkId}`, options);
  }
  show(projectId, packageId, options) {
    const [pId, pkId] = [projectId, packageId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/packages/${pkId}`, options);
  }
  showFiles(projectId, packageId, options) {
    const [pId, pkId] = [projectId, packageId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/packages/${pkId}/package_files`, options);
  }
}

var __defProp$k = Object.defineProperty;
var __hasOwnProp$n = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$n = Object.getOwnPropertySymbols;
var __propIsEnum$n = Object.prototype.propertyIsEnumerable;
var __defNormalProp$k = (obj, key, value) => key in obj ? __defProp$k(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$k = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$n.call(b, prop))
      __defNormalProp$k(a, prop, b[prop]);
  if (__getOwnPropSymbols$n)
    for (var prop of __getOwnPropSymbols$n(b)) {
      if (__propIsEnum$n.call(b, prop))
        __defNormalProp$k(a, prop, b[prop]);
    }
  return a;
};
class Pipelines extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/pipelines`, options);
  }
  create(projectId, ref, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/pipeline`, __objSpread$k({
      ref
    }, options));
  }
  delete(projectId, pipelineId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.del()(this, `projects/${pId}/pipelines/${pipelineId}`, options);
  }
  show(projectId, pipelineId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/pipelines/${pipelineId}`, options);
  }
  retry(projectId, pipelineId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/pipelines/${pipelineId}/retry`, options);
  }
  cancel(projectId, pipelineId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/pipelines/${pipelineId}/cancel`, options);
  }
  allVariables(projectId, pipelineId, options) {
    const [pId, pipeId] = [projectId, pipelineId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/pipelines/${pipeId}/variables`, options);
  }
}

var __defProp$j = Object.defineProperty;
var __hasOwnProp$m = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$m = Object.getOwnPropertySymbols;
var __propIsEnum$m = Object.prototype.propertyIsEnumerable;
var __defNormalProp$j = (obj, key, value) => key in obj ? __defProp$j(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$j = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$m.call(b, prop))
      __defNormalProp$j(a, prop, b[prop]);
  if (__getOwnPropSymbols$m)
    for (var prop of __getOwnPropSymbols$m(b)) {
      if (__propIsEnum$m.call(b, prop))
        __defNormalProp$j(a, prop, b[prop]);
    }
  return a;
};
class PipelineSchedules extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/pipeline_schedules`, options);
  }
  create(projectId, description, ref, cron, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/pipeline_schedules`, __objSpread$j({
      description,
      ref,
      cron
    }, options));
  }
  edit(projectId, scheduleId, options) {
    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
  }
  remove(projectId, scheduleId, options) {
    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
  }
  show(projectId, scheduleId, options) {
    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
  }
  takeOwnership(projectId, scheduleId, options) {
    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/pipeline_schedules/${sId}/take_ownership`, options);
  }
}

class PipelineScheduleVariables extends requesterUtils.BaseService {
  all(projectId, pipelineScheduleId, options) {
    const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
  }
  create(projectId, pipelineScheduleId, options) {
    const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
  }
  edit(projectId, pipelineScheduleId, keyId, options) {
    const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
  }
  show(projectId, pipelineScheduleId, keyId, options) {
    const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
  }
  remove(projectId, pipelineScheduleId, keyId, options) {
    const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
  }
}

var __defProp$i = Object.defineProperty;
var __hasOwnProp$l = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$l = Object.getOwnPropertySymbols;
var __propIsEnum$l = Object.prototype.propertyIsEnumerable;
var __defNormalProp$i = (obj, key, value) => key in obj ? __defProp$i(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$i = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$l.call(b, prop))
      __defNormalProp$i(a, prop, b[prop]);
  if (__getOwnPropSymbols$l)
    for (var prop of __getOwnPropSymbols$l(b)) {
      if (__propIsEnum$l.call(b, prop))
        __defNormalProp$i(a, prop, b[prop]);
    }
  return a;
};
var __objRest$9 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$l.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$l)
    for (var prop of __getOwnPropSymbols$l(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$l.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultMetadata = {
  filename: `${Date.now().toString()}.tar.gz`,
  contentType: "application/octet-stream"
};
class ProjectImportExport extends requesterUtils.BaseService {
  download(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/export/download`, options);
  }
  exportStatus(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/export`, options);
  }
  import(content, path, _a = {}) {
    var _b = _a, {metadata} = _b, options = __objRest$9(_b, ["metadata"]);
    return RequestHelper.post()(this, "projects/import", __objSpread$i(__objSpread$i({
      isForm: true
    }, options), {
      file: [content, __objSpread$i(__objSpread$i({}, defaultMetadata), metadata)],
      path
    }));
  }
  importStatus(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/import`, options);
  }
  schedule(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/export`, options);
  }
}

var __defProp$h = Object.defineProperty;
var __hasOwnProp$k = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$k = Object.getOwnPropertySymbols;
var __propIsEnum$k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$h = (obj, key, value) => key in obj ? __defProp$h(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$h = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$k.call(b, prop))
      __defNormalProp$h(a, prop, b[prop]);
  if (__getOwnPropSymbols$k)
    for (var prop of __getOwnPropSymbols$k(b)) {
      if (__propIsEnum$k.call(b, prop))
        __defNormalProp$h(a, prop, b[prop]);
    }
  return a;
};
var __objRest$8 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$k.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$k)
    for (var prop of __getOwnPropSymbols$k(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$k.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Projects extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "projects", options);
  }
  archive(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/archive`, options);
  }
  create(_a) {
    var _b = _a, {
      userId
    } = _b, options = __objRest$8(_b, [
      "userId"
    ]);
    const url = userId ? `projects/user/${encodeURIComponent(userId)}` : "projects";
    return RequestHelper.post()(this, url, options);
  }
  edit(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.put()(this, `projects/${pId}`, options);
  }
  fork(projectId, _c = {}) {
    var _d = _c, {forkedFromId} = _d, options = __objRest$8(_d, ["forkedFromId"]);
    const pId = encodeURIComponent(projectId);
    let url = `projects/${pId}/fork`;
    if (forkedFromId)
      url += `/${encodeURIComponent(forkedFromId)}`;
    return RequestHelper.post()(this, url, options);
  }
  forks(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/forks`, options);
  }
  languages(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/languages`, options);
  }
  mirrorPull(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/mirror/pull`, options);
  }
  remove(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.del()(this, `projects/${pId}`, options);
  }
  removeFork(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.del()(this, `projects/${pId}/fork`, options);
  }
  search(projectName, options) {
    return RequestHelper.get()(this, "projects", __objSpread$h({
      search: projectName
    }, options));
  }
  share(projectId, groupId, groupAccess, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/share`, __objSpread$h({
      groupId,
      groupAccess
    }, options));
  }
  show(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}`, options);
  }
  star(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/star`, options);
  }
  transfer(projectId, namespaceId) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.put()(this, `projects/${pId}/transfer`, {
      namespace: namespaceId
    });
  }
  unarchive(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/unarchive`, options);
  }
  unshare(projectId, groupId, options) {
    const [pId, gId] = [projectId, groupId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/share/${gId}`, options);
  }
  unstar(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/unstar`, options);
  }
  upload(projectId, content, _e = {}) {
    var _f = _e, {metadata} = _f, options = __objRest$8(_f, ["metadata"]);
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/uploads`, __objSpread$h({
      isForm: true,
      file: [content, __objSpread$h(__objSpread$h({}, defaultMetadata), metadata)]
    }, options));
  }
}

class ProjectAccessRequests extends ResourceAccessRequests {
  constructor(options) {
    super("projects", options);
  }
}

class ProjectBadges extends ResourceBadges {
  constructor(options) {
    super("groups", options);
  }
}

class ProjectCustomAttributes extends ResourceCustomAttributes {
  constructor(options) {
    super("projects", options);
  }
}

class ProjectIssueBoards extends ResourceIssueBoards {
  constructor(options) {
    super("projects", options);
  }
}

var __defProp$g = Object.defineProperty;
var __hasOwnProp$j = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$j = Object.getOwnPropertySymbols;
var __propIsEnum$j = Object.prototype.propertyIsEnumerable;
var __defNormalProp$g = (obj, key, value) => key in obj ? __defProp$g(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$g = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$j.call(b, prop))
      __defNormalProp$g(a, prop, b[prop]);
  if (__getOwnPropSymbols$j)
    for (var prop of __getOwnPropSymbols$j(b)) {
      if (__propIsEnum$j.call(b, prop))
        __defNormalProp$g(a, prop, b[prop]);
    }
  return a;
};
class ProjectHooks extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/hooks`, options);
  }
  show(projectId, hookId, options) {
    const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/hooks/${hId}`, options);
  }
  add(projectId, url, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/hooks`, __objSpread$g({
      url
    }, options));
  }
  edit(projectId, hookId, url, options) {
    const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/hooks/${hId}`, __objSpread$g({
      url
    }, options));
  }
  remove(projectId, hookId, options) {
    const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/hooks/${hId}`, options);
  }
}

class ProjectMembers extends ResourceMembers {
  constructor(options) {
    super("projects", options);
  }
}

class ProjectMilestones extends ResourceMilestones {
  constructor(options) {
    super("projects", options);
  }
}

var __defProp$f = Object.defineProperty;
var __hasOwnProp$i = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$i = Object.getOwnPropertySymbols;
var __propIsEnum$i = Object.prototype.propertyIsEnumerable;
var __defNormalProp$f = (obj, key, value) => key in obj ? __defProp$f(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$f = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$i.call(b, prop))
      __defNormalProp$f(a, prop, b[prop]);
  if (__getOwnPropSymbols$i)
    for (var prop of __getOwnPropSymbols$i(b)) {
      if (__propIsEnum$i.call(b, prop))
        __defNormalProp$f(a, prop, b[prop]);
    }
  return a;
};
class ProjectSnippets extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/snippets`, options);
  }
  content(projectId, snippetId, options) {
    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/snippets/${sId}/raw`, options);
  }
  create(projectId, title, fileName, code, visibility, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/snippets`, __objSpread$f({
      title,
      fileName,
      code,
      visibility
    }, options));
  }
  edit(projectId, snippetId, options) {
    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/snippets/${sId}`, options);
  }
  remove(projectId, snippetId, options) {
    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/snippets/${sId}`, options);
  }
  show(projectId, snippetId, options) {
    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/snippets/${sId}`, options);
  }
  userAgentDetails(projectId, snippetId, options) {
    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/snippets/${sId}/user_agent_detail`, options);
  }
}

class ProjectSnippetNotes extends ResourceNotes {
  constructor(options) {
    super("projects", "snippets", options);
  }
}

class ProjectSnippetDiscussions extends ResourceDiscussions {
  constructor(options) {
    super("projects", "snippets", options);
  }
}

class ProjectSnippetAwardEmojis extends ResourceAwardEmojis {
  constructor(options) {
    super("snippets", options);
  }
}

var __defProp$e = Object.defineProperty;
var __hasOwnProp$h = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$h = Object.getOwnPropertySymbols;
var __propIsEnum$h = Object.prototype.propertyIsEnumerable;
var __defNormalProp$e = (obj, key, value) => key in obj ? __defProp$e(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$e = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$h.call(b, prop))
      __defNormalProp$e(a, prop, b[prop]);
  if (__getOwnPropSymbols$h)
    for (var prop of __getOwnPropSymbols$h(b)) {
      if (__propIsEnum$h.call(b, prop))
        __defNormalProp$e(a, prop, b[prop]);
    }
  return a;
};
class ProtectedBranches extends requesterUtils.BaseService {
  all(projectId, options = {}) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/protected_branches`, options);
  }
  protect(projectId, branchName, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/protected_branches`, __objSpread$e({
      name: branchName
    }, options));
  }
  show(projectId, branchName, options) {
    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/protected_branches/${bName}`, options);
  }
  unprotect(projectId, branchName, options) {
    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/protected_branches/${bName}`, options);
  }
}

var __defProp$d = Object.defineProperty;
var __hasOwnProp$g = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
var __defNormalProp$d = (obj, key, value) => key in obj ? __defProp$d(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$d = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$g.call(b, prop))
      __defNormalProp$d(a, prop, b[prop]);
  if (__getOwnPropSymbols$g)
    for (var prop of __getOwnPropSymbols$g(b)) {
      if (__propIsEnum$g.call(b, prop))
        __defNormalProp$d(a, prop, b[prop]);
    }
  return a;
};
class ProtectedTags extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/protected_tags`, options);
  }
  protect(projectId, tagName, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/protected_tags`, __objSpread$d({
      name: tagName
    }, options));
  }
  show(projectId, tagName, options) {
    const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/protected_tags/${tName}`, options);
  }
  unprotect(projectId, tagName, options) {
    const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/protected_tags/${tName}`, options);
  }
}

class ProjectVariables extends ResourceVariables {
  constructor(options) {
    super("projects", options);
  }
}

class ProjectDeployTokens extends ResourceDeployTokens {
  constructor(options) {
    super("projects", options);
  }
}

class PushRules extends requesterUtils.BaseService {
  create(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/push_rule`, options);
  }
  edit(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.put()(this, `projects/${pId}/push_rule`, options);
  }
  remove(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.del()(this, `projects/${pId}/push_rule`, options);
  }
  show(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/push_rule`, options);
  }
}

class Releases extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/releases`, options);
  }
  create(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/releases`, options);
  }
  edit(projectId, tagName, options) {
    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/releases/${tId}`, options);
  }
  remove(projectId, tagName, options) {
    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/releases/${tId}`, options);
  }
  show(projectId, tagName, options) {
    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/releases/${tId}`, options);
  }
}

var __defProp$c = Object.defineProperty;
var __hasOwnProp$f = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$f = Object.getOwnPropertySymbols;
var __propIsEnum$f = Object.prototype.propertyIsEnumerable;
var __defNormalProp$c = (obj, key, value) => key in obj ? __defProp$c(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$c = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$f.call(b, prop))
      __defNormalProp$c(a, prop, b[prop]);
  if (__getOwnPropSymbols$f)
    for (var prop of __getOwnPropSymbols$f(b)) {
      if (__propIsEnum$f.call(b, prop))
        __defNormalProp$c(a, prop, b[prop]);
    }
  return a;
};
class ReleaseLinks extends requesterUtils.BaseService {
  all(projectId, tagName, options) {
    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/releases/${tId}/assets/links`, options);
  }
  create(projectId, tagName, name, url, options) {
    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/releases/${tId}/assets/links`, __objSpread$c({
      name,
      url
    }, options));
  }
  edit(projectId, tagName, linkId, options) {
    const [pId, tId, lId] = [projectId, tagName, linkId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/releases/${tId}/assets/links/${lId}`, options);
  }
  remove(projectId, tagName, linkId, options) {
    const [pId, tId, lId] = [projectId, tagName, linkId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/releases/${tId}/assets/links/${lId}`, options);
  }
  show(projectId, tagName, linkId, options) {
    const [pId, tId, lId] = [projectId, tagName, linkId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/releases/${tId}/assets/links/${lId}`, options);
  }
}

var __defProp$b = Object.defineProperty;
var __hasOwnProp$e = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$e = Object.getOwnPropertySymbols;
var __propIsEnum$e = Object.prototype.propertyIsEnumerable;
var __defNormalProp$b = (obj, key, value) => key in obj ? __defProp$b(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$b = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$e.call(b, prop))
      __defNormalProp$b(a, prop, b[prop]);
  if (__getOwnPropSymbols$e)
    for (var prop of __getOwnPropSymbols$e(b)) {
      if (__propIsEnum$e.call(b, prop))
        __defNormalProp$b(a, prop, b[prop]);
    }
  return a;
};
var __objRest$7 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$e.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$e)
    for (var prop of __getOwnPropSymbols$e(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$e.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Repositories extends requesterUtils.BaseService {
  compare(projectId, from, to, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/compare`, __objSpread$b({
      from,
      to
    }, options));
  }
  contributors(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/contributors`, options);
  }
  mergeBase(projectId, refs, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/merge_base`, __objSpread$b({
      refs
    }, options));
  }
  showArchive(projectId, _a = {}) {
    var _b = _a, {fileType = "tar.gz"} = _b, options = __objRest$7(_b, ["fileType"]);
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/archive.${fileType}`, options);
  }
  showBlob(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/blobs/${sha}`, options);
  }
  showBlobRaw(projectId, sha, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/blobs/${sha}/raw`, options);
  }
  tree(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/tree`, options);
  }
}

var __defProp$a = Object.defineProperty;
var __hasOwnProp$d = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$d = Object.getOwnPropertySymbols;
var __propIsEnum$d = Object.prototype.propertyIsEnumerable;
var __defNormalProp$a = (obj, key, value) => key in obj ? __defProp$a(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$a = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$d.call(b, prop))
      __defNormalProp$a(a, prop, b[prop]);
  if (__getOwnPropSymbols$d)
    for (var prop of __getOwnPropSymbols$d(b)) {
      if (__propIsEnum$d.call(b, prop))
        __defNormalProp$a(a, prop, b[prop]);
    }
  return a;
};
class RepositoryFiles extends requesterUtils.BaseService {
  create(projectId, filePath, branch, content, commitMessage, options) {
    const [pId, path] = [projectId, filePath].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/repository/files/${path}`, __objSpread$a({
      branch,
      content,
      commitMessage
    }, options));
  }
  edit(projectId, filePath, branch, content, commitMessage, options) {
    const [pId, path] = [projectId, filePath].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/repository/files/${path}`, __objSpread$a({
      branch,
      content,
      commitMessage
    }, options));
  }
  remove(projectId, filePath, branch, commitMessage, options) {
    const [pId, path] = [projectId, filePath].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/repository/files/${path}`, __objSpread$a({
      branch,
      commitMessage
    }, options));
  }
  show(projectId, filePath, ref, options) {
    const [pId, path] = [projectId, filePath].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/repository/files/${path}`, __objSpread$a({
      ref
    }, options));
  }
  showBlame(projectId, filePath, options) {
    const [pId, path] = [projectId, filePath].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/repository/files/${path}/blame`, options);
  }
  showRaw(projectId, filePath, ref, options) {
    const [pId, path] = [projectId, filePath].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/repository/files/${path}/raw`, __objSpread$a({
      ref
    }, options));
  }
}

var __defProp$9 = Object.defineProperty;
var __hasOwnProp$c = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$c = Object.getOwnPropertySymbols;
var __propIsEnum$c = Object.prototype.propertyIsEnumerable;
var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$9 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$c.call(b, prop))
      __defNormalProp$9(a, prop, b[prop]);
  if (__getOwnPropSymbols$c)
    for (var prop of __getOwnPropSymbols$c(b)) {
      if (__propIsEnum$c.call(b, prop))
        __defNormalProp$9(a, prop, b[prop]);
    }
  return a;
};
var __objRest$6 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$c.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$c)
    for (var prop of __getOwnPropSymbols$c(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$c.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Runners extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {projectId} = _b, options = __objRest$6(_b, ["projectId"]);
    const url = projectId ? `projects/${encodeURIComponent(projectId)}/runners` : "runners/all";
    return RequestHelper.get()(this, url, options);
  }
  allOwned(options) {
    return RequestHelper.get()(this, "runners", options);
  }
  edit(runnerId, options) {
    const rId = encodeURIComponent(runnerId);
    return RequestHelper.put()(this, `runners/${rId}`, options);
  }
  enable(projectId, runnerId, options) {
    const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/runners`, __objSpread$9({
      runnerId: rId
    }, options));
  }
  disable(projectId, runnerId, options) {
    const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/runners/${rId}`, options);
  }
  jobs(runnerId, options) {
    const rId = encodeURIComponent(runnerId);
    return RequestHelper.get()(this, `runners/${rId}/jobs`, options);
  }
  remove(runnerId, options) {
    const rId = encodeURIComponent(runnerId);
    return RequestHelper.del()(this, `runners/${rId}`, options);
  }
  show(runnerId, options) {
    const rId = encodeURIComponent(runnerId);
    return RequestHelper.get()(this, `runners/${rId}`, options);
  }
}

class Services extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/services`, options);
  }
  edit(projectId, serviceName, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.put()(this, `projects/${pId}/services/${serviceName}`, options);
  }
  remove(projectId, serviceName, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.del()(this, `projects/${pId}/services/${serviceName}`, options);
  }
  show(projectId, serviceName, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/services/${serviceName}`, options);
  }
}

class Tags extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/repository/tags`, options);
  }
  create(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/repository/tags`, options);
  }
  remove(projectId, tagName, options) {
    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/repository/tags/${tId}`, options);
  }
  show(projectId, tagName, options) {
    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/repository/tags/${tId}`, options);
  }
}

var __hasOwnProp$b = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$b = Object.getOwnPropertySymbols;
var __propIsEnum$b = Object.prototype.propertyIsEnumerable;
var __objRest$5 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$b.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$b)
    for (var prop of __getOwnPropSymbols$b(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$b.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Todos extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "todos", options);
  }
  create(projectId, resourceId, resourceName, options) {
    const resourceAPI = resourceName === "issue" ? "issues" : "merge_requests";
    return RequestHelper.post()(this, `projects/${projectId}/${resourceAPI}/${resourceId}/todo`, options);
  }
  done(_a = {}) {
    var _b = _a, {todoId} = _b, options = __objRest$5(_b, ["todoId"]);
    const url = ["todos"];
    if (todoId)
      url.push(todoId.toString());
    url.push("mark_as_done");
    if (todoId) {
      return RequestHelper.post()(this, url.join("/"), options);
    }
    return RequestHelper.post()(this, url.join("/"), options);
  }
}

var __defProp$8 = Object.defineProperty;
var __hasOwnProp$a = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$a = Object.getOwnPropertySymbols;
var __propIsEnum$a = Object.prototype.propertyIsEnumerable;
var __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$8 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$a.call(b, prop))
      __defNormalProp$8(a, prop, b[prop]);
  if (__getOwnPropSymbols$a)
    for (var prop of __getOwnPropSymbols$a(b)) {
      if (__propIsEnum$a.call(b, prop))
        __defNormalProp$8(a, prop, b[prop]);
    }
  return a;
};
class Triggers extends requesterUtils.BaseService {
  add(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/triggers`, options);
  }
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/triggers`, options);
  }
  edit(projectId, triggerId, options) {
    const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/triggers/${tId}`, options);
  }
  pipeline(projectId, ref, token, {variables} = {}) {
    const pId = encodeURIComponent(projectId);
    const hapiVariables = {};
    if (variables) {
      Object.entries(variables).forEach(([k, v]) => {
        hapiVariables[`variables[${k}]`] = v;
      });
    }
    return RequestHelper.post()(this, `projects/${pId}/trigger/pipeline`, __objSpread$8({
      isForm: true,
      ref,
      token
    }, hapiVariables));
  }
  remove(projectId, triggerId, options) {
    const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/triggers/${tId}`, options);
  }
  show(projectId, triggerId, options) {
    const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/triggers/${tId}`, options);
  }
}

class VulnerabilityFindings extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/vulnerability_findings`, options);
  }
}

class ApplicationSettings extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "application/settings", options);
  }
  edit(options) {
    return RequestHelper.put()(this, "application/settings", options);
  }
}

class BroadcastMessages extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "broadcast_messages", options);
  }
  create(options) {
    return RequestHelper.post()(this, "broadcast_messages", options);
  }
  edit(broadcastMessageId, options) {
    const bId = encodeURIComponent(broadcastMessageId);
    return RequestHelper.put()(this, `broadcast_messages/${bId}`, options);
  }
  remove(broadcastMessageId, options) {
    const bId = encodeURIComponent(broadcastMessageId);
    return RequestHelper.del()(this, `broadcast_messages/${bId}`, options);
  }
  show(broadcastMessageId, options) {
    const bId = encodeURIComponent(broadcastMessageId);
    return RequestHelper.get()(this, `broadcast_messages/${bId}`, options);
  }
}

var __hasOwnProp$9 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;
var __propIsEnum$9 = Object.prototype.propertyIsEnumerable;
var __objRest$4 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$9.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$9)
    for (var prop of __getOwnPropSymbols$9(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$9.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Events extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {
      projectId
    } = _b, options = __objRest$4(_b, [
      "projectId"
    ]);
    let url;
    if (projectId) {
      const pId = encodeURIComponent(projectId);
      url = `projects/${pId}/events`;
    } else {
      url = "events";
    }
    return RequestHelper.get()(this, url, options);
  }
}

var __defProp$7 = Object.defineProperty;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$7 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$8.call(b, prop))
      __defNormalProp$7(a, prop, b[prop]);
  if (__getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(b)) {
      if (__propIsEnum$8.call(b, prop))
        __defNormalProp$7(a, prop, b[prop]);
    }
  return a;
};
class FeatureFlags extends requesterUtils.BaseService {
  all(projectId, options = {}) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/features_flags`, options);
  }
  create(projectId, flagName, version, options) {
    const [pId, fName, ver] = [projectId, flagName, version].map(encodeURIComponent);
    return RequestHelper.post()(this, `projects/${pId}/features_flags`, __objSpread$7({
      version: ver,
      name: fName
    }, options));
  }
  edit(projectId, flagName, options) {
    const [pId, fName] = [projectId, flagName].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/features_flags/${fName}`, options);
  }
  remove(projectId, flagName, options) {
    const [pId, fName] = [projectId, flagName].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/features_flags/${fName}`, options);
  }
  show(projectId, flagName, options) {
    const [pId, fName] = [projectId, flagName].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/features_flags/${fName}`, options);
  }
}

class GeoNodes extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "geo_nodes", options);
  }
  create(geonodeId, options) {
    const gId = encodeURIComponent(geonodeId);
    return RequestHelper.post()(this, `geo_nodes/${gId}`, options);
  }
  edit(geonodeId, options) {
    const gId = encodeURIComponent(geonodeId);
    return RequestHelper.put()(this, `geo_nodes/${gId}`, options);
  }
  failures(options) {
    return RequestHelper.get()(this, "geo_nodes/current/failures", options);
  }
  repair(geonodeId, options) {
    const gId = encodeURIComponent(geonodeId);
    return RequestHelper.post()(this, `geo_nodes/${gId}/repair`, options);
  }
  remove(geonodeId, options) {
    const gId = encodeURIComponent(geonodeId);
    return RequestHelper.del()(this, `geo_nodes/${gId}`, options);
  }
  show(geonodeId, options) {
    const gId = encodeURIComponent(geonodeId);
    return RequestHelper.get()(this, `geo_nodes/${gId}`, options);
  }
  status(geonodeId, options) {
    const gId = encodeURIComponent(geonodeId);
    return RequestHelper.get()(this, `geo_nodes/${gId}/status`, options);
  }
  statuses(options) {
    return RequestHelper.get()(this, "geo_nodes/statuses", options);
  }
}

class GitignoreTemplates extends ResourceTemplates {
  constructor(options) {
    super("gitignores", options);
  }
}

class GitLabCIYMLTemplates extends ResourceTemplates {
  constructor(options) {
    super("gitlab_ci_ymls", options);
  }
}

class Keys extends requesterUtils.BaseService {
  show(keyId, options) {
    const kId = encodeURIComponent(keyId);
    return RequestHelper.get()(this, `keys/${kId}`, options);
  }
}

var __defProp$6 = Object.defineProperty;
var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$6 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$7.call(b, prop))
      __defNormalProp$6(a, prop, b[prop]);
  if (__getOwnPropSymbols$7)
    for (var prop of __getOwnPropSymbols$7(b)) {
      if (__propIsEnum$7.call(b, prop))
        __defNormalProp$6(a, prop, b[prop]);
    }
  return a;
};
class License extends requesterUtils.BaseService {
  add(license, options) {
    return RequestHelper.post()(this, "license", __objSpread$6({license}, options));
  }
  all(options) {
    return RequestHelper.get()(this, "licenses", options);
  }
  show(options) {
    return RequestHelper.get()(this, "license", options);
  }
  remove(licenceId, options) {
    const lId = encodeURIComponent(licenceId);
    return RequestHelper.del()(this, `license/${lId}`, options);
  }
}

class LicenseTemplates extends ResourceTemplates {
  constructor(options) {
    super("Licenses", options);
  }
}

var __defProp$5 = Object.defineProperty;
var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$5 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$6.call(b, prop))
      __defNormalProp$5(a, prop, b[prop]);
  if (__getOwnPropSymbols$6)
    for (var prop of __getOwnPropSymbols$6(b)) {
      if (__propIsEnum$6.call(b, prop))
        __defNormalProp$5(a, prop, b[prop]);
    }
  return a;
};
class Lint extends requesterUtils.BaseService {
  lint(content, options) {
    return RequestHelper.post()(this, "ci/lint", __objSpread$5({content}, options));
  }
}

class Namespaces extends requesterUtils.BaseService {
  all(options) {
    return RequestHelper.get()(this, "namespaces", options);
  }
  show(namespaceId, options) {
    const nId = encodeURIComponent(namespaceId);
    return RequestHelper.get()(this, `namespaces/${nId}`, options);
  }
}

var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
var __objRest$3 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$5.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$5)
    for (var prop of __getOwnPropSymbols$5(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$5.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function url({projectId, groupId}) {
  let uri = "";
  if (projectId) {
    uri += `projects/${encodeURIComponent(projectId)}/`;
  } else if (groupId) {
    uri += `groups/${encodeURIComponent(groupId)}/`;
  }
  return `${uri}notification_settings`;
}
class NotificationSettings extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {projectId, groupId} = _b, options = __objRest$3(_b, ["projectId", "groupId"]);
    return RequestHelper.get()(this, url({groupId, projectId}), options);
  }
  edit(_c = {}) {
    var _d = _c, {
      projectId,
      groupId
    } = _d, options = __objRest$3(_d, [
      "projectId",
      "groupId"
    ]);
    return RequestHelper.put()(this, url({groupId, projectId}), options);
  }
}

var __defProp$4 = Object.defineProperty;
var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$4 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$4.call(b, prop))
      __defNormalProp$4(a, prop, b[prop]);
  if (__getOwnPropSymbols$4)
    for (var prop of __getOwnPropSymbols$4(b)) {
      if (__propIsEnum$4.call(b, prop))
        __defNormalProp$4(a, prop, b[prop]);
    }
  return a;
};
class Markdown extends requesterUtils.BaseService {
  render(text, options) {
    return RequestHelper.post()(this, "markdown", __objSpread$4({text}, options));
  }
}

var __defProp$3 = Object.defineProperty;
var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$3 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$3.call(b, prop))
      __defNormalProp$3(a, prop, b[prop]);
  if (__getOwnPropSymbols$3)
    for (var prop of __getOwnPropSymbols$3(b)) {
      if (__propIsEnum$3.call(b, prop))
        __defNormalProp$3(a, prop, b[prop]);
    }
  return a;
};
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$3.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$3)
    for (var prop of __getOwnPropSymbols$3(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$3.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class PagesDomains extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {projectId} = _b, options = __objRest$2(_b, ["projectId"]);
    const url = projectId ? `projects/${encodeURIComponent(projectId)}/` : "";
    return RequestHelper.get()(this, `${url}pages/domains`, options);
  }
  create(projectId, domain, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/pages/domains`, __objSpread$3({
      domain
    }, options));
  }
  edit(projectId, domain, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.put()(this, `projects/${pId}/pages/domains/${domain}`, options);
  }
  show(projectId, domain, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/pages/domains/${domain}`, options);
  }
  remove(projectId, domain, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.del()(this, `projects/${pId}/pages/domains/${domain}`, options);
  }
}

var __defProp$2 = Object.defineProperty;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$2.call(b, prop))
      __defNormalProp$2(a, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b)) {
      if (__propIsEnum$2.call(b, prop))
        __defNormalProp$2(a, prop, b[prop]);
    }
  return a;
};
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$2.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$2.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Search extends requesterUtils.BaseService {
  all(scope, search, _a = {}) {
    var _b = _a, {
      projectId,
      groupId
    } = _b, options = __objRest$1(_b, [
      "projectId",
      "groupId"
    ]);
    let url = "";
    if (projectId) {
      url += `projects/${encodeURIComponent(projectId)}/`;
    } else if (groupId) {
      url += `groups/${encodeURIComponent(groupId)}/`;
    }
    return RequestHelper.get()(this, `${url}search`, __objSpread$2({
      scope,
      search
    }, options));
  }
}

class SidekiqMetrics extends requesterUtils.BaseService {
  queueMetrics() {
    return RequestHelper.get()(this, "sidekiq/queue_metrics");
  }
  processMetrics() {
    return RequestHelper.get()(this, "sidekiq/process_metrics");
  }
  jobStats() {
    return RequestHelper.get()(this, "sidekiq/job_stats");
  }
  compoundMetrics() {
    return RequestHelper.get()(this, "sidekiq/compound_metrics");
  }
}

var __defProp$1 = Object.defineProperty;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Snippets extends requesterUtils.BaseService {
  all(_a = {}) {
    var _b = _a, {public: p} = _b, options = __objRest(_b, ["public"]);
    const url = p ? "snippets/public" : "snippets";
    return RequestHelper.get()(this, url, options);
  }
  content(snippetId, options) {
    const sId = encodeURIComponent(snippetId);
    return RequestHelper.get()(this, `snippets/${sId}/raw`, options);
  }
  create(title, fileName, content, visibility, options) {
    return RequestHelper.post()(this, "snippets", __objSpread$1({
      title,
      fileName,
      content,
      visibility
    }, options));
  }
  edit(snippetId, options) {
    const sId = encodeURIComponent(snippetId);
    return RequestHelper.put()(this, `snippets/${sId}`, options);
  }
  remove(snippetId, options) {
    const sId = encodeURIComponent(snippetId);
    return RequestHelper.del()(this, `snippets/${sId}`, options);
  }
  show(snippetId, options) {
    const sId = encodeURIComponent(snippetId);
    return RequestHelper.get()(this, `snippets/${sId}`, options);
  }
  userAgentDetails(snippetId, options) {
    const sId = encodeURIComponent(snippetId);
    return RequestHelper.get()(this, `snippets/${sId}/user_agent_detail`, options);
  }
}

var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
class SystemHooks extends requesterUtils.BaseService {
  add(url, options) {
    return RequestHelper.post()(this, "hooks", __objSpread({url}, options));
  }
  all(options) {
    return RequestHelper.get()(this, "hooks", options);
  }
  edit(hookId, url, options) {
    const hId = encodeURIComponent(hookId);
    return RequestHelper.put()(this, `hooks/${hId}`, __objSpread({url}, options));
  }
  remove(hookId, options) {
    const hId = encodeURIComponent(hookId);
    return RequestHelper.del()(this, `hooks/${hId}`, options);
  }
}

class Version extends requesterUtils.BaseService {
  show(options) {
    return RequestHelper.get()(this, "version", options);
  }
}

class Wikis extends requesterUtils.BaseService {
  all(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.get()(this, `projects/${pId}/wikis`, options);
  }
  create(projectId, options) {
    const pId = encodeURIComponent(projectId);
    return RequestHelper.post()(this, `projects/${pId}/wikis`, options);
  }
  edit(projectId, slug, options) {
    const [pId, s] = [projectId, slug].map(encodeURIComponent);
    return RequestHelper.put()(this, `projects/${pId}/wikis/${s}`, options);
  }
  show(projectId, slug, options) {
    const [pId, s] = [projectId, slug].map(encodeURIComponent);
    return RequestHelper.get()(this, `projects/${pId}/wikis/${s}`, options);
  }
  remove(projectId, slug, options) {
    const [pId, s] = [projectId, slug].map(encodeURIComponent);
    return RequestHelper.del()(this, `projects/${pId}/wikis/${s}`, options);
  }
}

var APIServices = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Groups: Groups,
  GroupAccessRequests: GroupAccessRequests,
  GroupBadges: GroupBadges,
  GroupCustomAttributes: GroupCustomAttributes,
  GroupIssueBoards: GroupIssueBoards,
  GroupMembers: GroupMembers,
  GroupMilestones: GroupMilestones,
  GroupRunners: GroupRunners,
  GroupVariables: GroupVariables,
  GroupLabels: GroupLabels,
  GroupDeployTokens: GroupDeployTokens,
  Epics: Epics,
  EpicIssues: EpicIssues,
  EpicNotes: EpicNotes,
  EpicDiscussions: EpicDiscussions,
  Users: Users,
  UserCustomAttributes: UserCustomAttributes,
  UserEmails: UserEmails,
  UserImpersonationTokens: UserImpersonationTokens,
  UserSSHKeys: UserSSHKeys,
  UserGPGKeys: UserGPGKeys,
  Branches: Branches,
  Commits: Commits,
  CommitDiscussions: CommitDiscussions,
  ContainerRegistry: ContainerRegistry,
  Deployments: Deployments,
  DeployKeys: DeployKeys,
  Environments: Environments,
  FreezePeriods: FreezePeriods,
  Issues: Issues,
  IssuesStatistics: IssuesStatistics,
  IssueNotes: IssueNotes,
  IssueNoteAwardEmojis: IssueNoteAwardEmojis,
  IssueDiscussions: IssueDiscussions,
  IssueAwardEmojis: IssueAwardEmojis,
  Jobs: Jobs,
  Labels: Labels,
  MergeRequests: MergeRequests,
  MergeRequestApprovals: MergeRequestApprovals,
  MergeRequestAwardEmojis: MergeRequestAwardEmojis,
  MergeRequestDiscussions: MergeRequestDiscussions,
  MergeRequestNotes: MergeRequestNotes,
  Packages: Packages,
  Pipelines: Pipelines,
  PipelineSchedules: PipelineSchedules,
  PipelineScheduleVariables: PipelineScheduleVariables,
  Projects: Projects,
  ProjectAccessRequests: ProjectAccessRequests,
  ProjectBadges: ProjectBadges,
  ProjectCustomAttributes: ProjectCustomAttributes,
  ProjectImportExport: ProjectImportExport,
  ProjectIssueBoards: ProjectIssueBoards,
  ProjectHooks: ProjectHooks,
  ProjectMembers: ProjectMembers,
  ProjectMilestones: ProjectMilestones,
  ProjectSnippets: ProjectSnippets,
  ProjectSnippetNotes: ProjectSnippetNotes,
  ProjectSnippetDiscussions: ProjectSnippetDiscussions,
  ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
  ProtectedBranches: ProtectedBranches,
  ProtectedTags: ProtectedTags,
  ProjectVariables: ProjectVariables,
  ProjectDeployTokens: ProjectDeployTokens,
  PushRules: PushRules,
  Releases: Releases,
  ReleaseLinks: ReleaseLinks,
  Repositories: Repositories,
  RepositoryFiles: RepositoryFiles,
  Runners: Runners,
  Services: Services,
  Tags: Tags,
  Todos: Todos,
  Triggers: Triggers,
  VulnerabilityFindings: VulnerabilityFindings,
  ApplicationSettings: ApplicationSettings,
  BroadcastMessages: BroadcastMessages,
  Events: Events,
  FeatureFlags: FeatureFlags,
  GeoNodes: GeoNodes,
  GitignoreTemplates: GitignoreTemplates,
  GitLabCIYMLTemplates: GitLabCIYMLTemplates,
  Keys: Keys,
  License: License,
  LicenseTemplates: LicenseTemplates,
  Lint: Lint,
  Namespaces: Namespaces,
  NotificationSettings: NotificationSettings,
  Markdown: Markdown,
  PagesDomains: PagesDomains,
  Search: Search,
  SidekiqMetrics: SidekiqMetrics,
  Snippets: Snippets,
  SystemHooks: SystemHooks,
  Version: Version,
  Wikis: Wikis
});

function getAPIMap() {
  const map = "__apiMap__";
  if (!map.includes("{")) {
    throw new Error("This function is only available in the distributed code");
  }
  return JSON.parse(map);
}
const GroupsBundle = bundler({
  Groups: Groups,
  GroupAccessRequests: GroupAccessRequests,
  GroupBadges: GroupBadges,
  GroupCustomAttributes: GroupCustomAttributes,
  GroupIssueBoards: GroupIssueBoards,
  GroupMembers: GroupMembers,
  GroupMilestones: GroupMilestones,
  GroupRunners: GroupRunners,
  GroupVariables: GroupVariables,
  GroupLabels: GroupLabels,
  GroupDeployTokens: GroupDeployTokens,
  Epics: Epics,
  EpicIssues: EpicIssues,
  EpicNotes: EpicNotes,
  EpicDiscussions: EpicDiscussions
});
const UsersBundle = bundler({
  Users: Users,
  UserCustomAttributes: UserCustomAttributes,
  UserEmails: UserEmails,
  UserImpersonationTokens: UserImpersonationTokens,
  UserSSHKeys: UserSSHKeys,
  UserGPGKeys: UserGPGKeys
});
const ProjectsBundle = bundler({
  Branches: Branches,
  Commits: Commits,
  CommitDiscussions: CommitDiscussions,
  ContainerRegistry: ContainerRegistry,
  DeployKeys: DeployKeys,
  Deployments: Deployments,
  Environments: Environments,
  FreezePeriods: FreezePeriods,
  Issues: Issues,
  IssuesStatistics: IssuesStatistics,
  IssueAwardEmojis: IssueAwardEmojis,
  IssueNotes: IssueNotes,
  IssueNoteAwardEmojis: IssueNoteAwardEmojis,
  IssueDiscussions: IssueDiscussions,
  Jobs: Jobs,
  Labels: Labels,
  MergeRequests: MergeRequests,
  MergeRequestApprovals: MergeRequestApprovals,
  MergeRequestAwardEmojis: MergeRequestAwardEmojis,
  MergeRequestDiscussions: MergeRequestDiscussions,
  MergeRequestNotes: MergeRequestNotes,
  Packages: Packages,
  Pipelines: Pipelines,
  PipelineSchedules: PipelineSchedules,
  PipelineScheduleVariables: PipelineScheduleVariables,
  Projects: Projects,
  ProjectAccessRequests: ProjectAccessRequests,
  ProjectBadges: ProjectBadges,
  ProjectCustomAttributes: ProjectCustomAttributes,
  ProjectImportExport: ProjectImportExport,
  ProjectIssueBoards: ProjectIssueBoards,
  ProjectHooks: ProjectHooks,
  ProjectMembers: ProjectMembers,
  ProjectMilestones: ProjectMilestones,
  ProjectSnippets: ProjectSnippets,
  ProjectSnippetNotes: ProjectSnippetNotes,
  ProjectSnippetDiscussions: ProjectSnippetDiscussions,
  ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
  ProtectedBranches: ProtectedBranches,
  ProtectedTags: ProtectedTags,
  ProjectVariables: ProjectVariables,
  ProjectDeployTokens: ProjectDeployTokens,
  PushRules: PushRules,
  Releases: Releases,
  ReleaseLinks: ReleaseLinks,
  Repositories: Repositories,
  RepositoryFiles: RepositoryFiles,
  Runners: Runners,
  Services: Services,
  Tags: Tags,
  Todos: Todos,
  Triggers: Triggers,
  VulnerabilityFindings: VulnerabilityFindings
});
const Gitlab = bundler(APIServices);

exports.ApplicationSettings = ApplicationSettings;
exports.Branches = Branches;
exports.BroadcastMessages = BroadcastMessages;
exports.CommitDiscussions = CommitDiscussions;
exports.Commits = Commits;
exports.ContainerRegistry = ContainerRegistry;
exports.DeployKeys = DeployKeys;
exports.Deployments = Deployments;
exports.Environments = Environments;
exports.EpicDiscussions = EpicDiscussions;
exports.EpicIssues = EpicIssues;
exports.EpicNotes = EpicNotes;
exports.Epics = Epics;
exports.Events = Events;
exports.FeatureFlags = FeatureFlags;
exports.FreezePeriods = FreezePeriods;
exports.GeoNodes = GeoNodes;
exports.GitLabCIYMLTemplates = GitLabCIYMLTemplates;
exports.GitignoreTemplates = GitignoreTemplates;
exports.Gitlab = Gitlab;
exports.GroupAccessRequests = GroupAccessRequests;
exports.GroupBadges = GroupBadges;
exports.GroupCustomAttributes = GroupCustomAttributes;
exports.GroupDeployTokens = GroupDeployTokens;
exports.GroupIssueBoards = GroupIssueBoards;
exports.GroupLabels = GroupLabels;
exports.GroupMembers = GroupMembers;
exports.GroupMilestones = GroupMilestones;
exports.GroupRunners = GroupRunners;
exports.GroupVariables = GroupVariables;
exports.Groups = Groups;
exports.GroupsBundle = GroupsBundle;
exports.IssueAwardEmojis = IssueAwardEmojis;
exports.IssueDiscussions = IssueDiscussions;
exports.IssueNoteAwardEmojis = IssueNoteAwardEmojis;
exports.IssueNotes = IssueNotes;
exports.Issues = Issues;
exports.IssuesStatistics = IssuesStatistics;
exports.Jobs = Jobs;
exports.Keys = Keys;
exports.Labels = Labels;
exports.License = License;
exports.LicenseTemplates = LicenseTemplates;
exports.Lint = Lint;
exports.Markdown = Markdown;
exports.MergeRequestApprovals = MergeRequestApprovals;
exports.MergeRequestAwardEmojis = MergeRequestAwardEmojis;
exports.MergeRequestDiscussions = MergeRequestDiscussions;
exports.MergeRequestNotes = MergeRequestNotes;
exports.MergeRequests = MergeRequests;
exports.Namespaces = Namespaces;
exports.NotificationSettings = NotificationSettings;
exports.Packages = Packages;
exports.PagesDomains = PagesDomains;
exports.PipelineScheduleVariables = PipelineScheduleVariables;
exports.PipelineSchedules = PipelineSchedules;
exports.Pipelines = Pipelines;
exports.ProjectAccessRequests = ProjectAccessRequests;
exports.ProjectBadges = ProjectBadges;
exports.ProjectCustomAttributes = ProjectCustomAttributes;
exports.ProjectDeployTokens = ProjectDeployTokens;
exports.ProjectHooks = ProjectHooks;
exports.ProjectImportExport = ProjectImportExport;
exports.ProjectIssueBoards = ProjectIssueBoards;
exports.ProjectMembers = ProjectMembers;
exports.ProjectMilestones = ProjectMilestones;
exports.ProjectSnippetAwardEmojis = ProjectSnippetAwardEmojis;
exports.ProjectSnippetDiscussions = ProjectSnippetDiscussions;
exports.ProjectSnippetNotes = ProjectSnippetNotes;
exports.ProjectSnippets = ProjectSnippets;
exports.ProjectVariables = ProjectVariables;
exports.Projects = Projects;
exports.ProjectsBundle = ProjectsBundle;
exports.ProtectedBranches = ProtectedBranches;
exports.ProtectedTags = ProtectedTags;
exports.PushRules = PushRules;
exports.ReleaseLinks = ReleaseLinks;
exports.Releases = Releases;
exports.Repositories = Repositories;
exports.RepositoryFiles = RepositoryFiles;
exports.Runners = Runners;
exports.Search = Search;
exports.Services = Services;
exports.SidekiqMetrics = SidekiqMetrics;
exports.Snippets = Snippets;
exports.SystemHooks = SystemHooks;
exports.Tags = Tags;
exports.Todos = Todos;
exports.Triggers = Triggers;
exports.UserCustomAttributes = UserCustomAttributes;
exports.UserEmails = UserEmails;
exports.UserGPGKeys = UserGPGKeys;
exports.UserImpersonationTokens = UserImpersonationTokens;
exports.UserSSHKeys = UserSSHKeys;
exports.Users = Users;
exports.UsersBundle = UsersBundle;
exports.Version = Version;
exports.VulnerabilityFindings = VulnerabilityFindings;
exports.Wikis = Wikis;
exports.getAPIMap = getAPIMap;
//# sourceMappingURL=index.js.map
