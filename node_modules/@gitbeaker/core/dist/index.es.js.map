{"version":3,"file":"index.es.js","sources":["../src/infrastructure/Utils.ts","../src/infrastructure/RequestHelper.ts","../src/services/Groups.ts","../src/templates/ResourceAccessRequests.ts","../src/templates/ResourceAwardEmojis.ts","../src/templates/ResourceNoteAwardEmojis.ts","../src/templates/ResourceBadges.ts","../src/templates/ResourceCustomAttributes.ts","../src/templates/ResourceDeployTokens.ts","../src/templates/ResourceDiscussions.ts","../src/templates/ResourceIssueBoards.ts","../src/templates/ResourceLabels.ts","../src/templates/ResourceMembers.ts","../src/templates/ResourceMilestones.ts","../src/templates/ResourceNotes.ts","../src/templates/ResourceTemplates.ts","../src/templates/ResourceVariables.ts","../src/services/GroupAccessRequests.ts","../src/services/GroupBadges.ts","../src/services/GroupCustomAttributes.ts","../src/services/GroupIssueBoards.ts","../src/services/GroupMembers.ts","../src/services/GroupMilestones.ts","../src/services/GroupRunners.ts","../src/services/GroupVariables.ts","../src/services/GroupLabels.ts","../src/services/GroupDeployTokens.ts","../src/services/Epics.ts","../src/services/EpicIssues.ts","../src/services/EpicNotes.ts","../src/services/EpicDiscussions.ts","../src/services/Users.ts","../src/services/UserCustomAttributes.ts","../src/services/UserEmails.ts","../src/services/UserImpersonationTokens.ts","../src/services/UserSSHKeys.ts","../src/services/UserGPGKeys.ts","../src/services/Branches.ts","../src/services/Commits.ts","../src/services/CommitDiscussions.ts","../src/services/ContainerRegistry.ts","../src/services/Deployments.ts","../src/services/DeployKeys.ts","../src/services/Environments.ts","../src/services/FreezePeriods.ts","../src/services/Issues.ts","../src/services/IssuesStatistics.ts","../src/services/IssueNotes.ts","../src/services/IssueNoteAwardEmojis.ts","../src/services/IssueDiscussions.ts","../src/services/IssueAwardEmojis.ts","../src/services/Jobs.ts","../src/services/Labels.ts","../src/services/MergeRequests.ts","../src/services/MergeRequestApprovals.ts","../src/services/MergeRequestAwardEmojis.ts","../src/services/MergeRequestDiscussions.ts","../src/services/MergeRequestNotes.ts","../src/services/Packages.ts","../src/services/Pipelines.ts","../src/services/PipelineSchedules.ts","../src/services/PipelineScheduleVariables.ts","../src/services/ProjectImportExport.ts","../src/services/Projects.ts","../src/services/ProjectAccessRequests.ts","../src/services/ProjectBadges.ts","../src/services/ProjectCustomAttributes.ts","../src/services/ProjectIssueBoards.ts","../src/services/ProjectHooks.ts","../src/services/ProjectMembers.ts","../src/services/ProjectMilestones.ts","../src/services/ProjectSnippets.ts","../src/services/ProjectSnippetNotes.ts","../src/services/ProjectSnippetDiscussions.ts","../src/services/ProjectSnippetAwardEmojis.ts","../src/services/ProtectedBranches.ts","../src/services/ProtectedTags.ts","../src/services/ProjectVariables.ts","../src/services/ProjectDeployTokens.ts","../src/services/PushRules.ts","../src/services/Releases.ts","../src/services/ReleaseLinks.ts","../src/services/Repositories.ts","../src/services/RepositoryFiles.ts","../src/services/Runners.ts","../src/services/Services.ts","../src/services/Tags.ts","../src/services/Todos.ts","../src/services/Triggers.ts","../src/services/VulnerabilityFindings.ts","../src/services/ApplicationSettings.ts","../src/services/BroadcastMessages.ts","../src/services/Events.ts","../src/services/FeatureFlags.ts","../src/services/GeoNodes.ts","../src/services/GitignoreTemplates.ts","../src/services/GitLabCIYMLTemplates.ts","../src/services/Keys.ts","../src/services/License.ts","../src/services/LicenseTemplates.ts","../src/services/Lint.ts","../src/services/Namespaces.ts","../src/services/NotificationSettings.ts","../src/services/Markdown.ts","../src/services/PagesDomains.ts","../src/services/Search.ts","../src/services/SidekiqMetrics.ts","../src/services/Snippets.ts","../src/services/SystemHooks.ts","../src/services/Version.ts","../src/services/Wikis.ts","../src/index.ts"],"sourcesContent":["import FormData from 'form-data';\n\nexport type CamelizeString<T extends PropertyKey> = T extends string\n  ? string extends T\n    ? string\n    : T extends `${infer F}_${infer R}`\n    ? `${F}${Capitalize<CamelizeString<R>>}`\n    : T\n  : T;\n\nexport type Camelize<T> = { [K in keyof T as CamelizeString<K>]: T[K] };\n\n/* eslint @typescript-eslint/no-explicit-any: 0 */\ninterface Constructor {\n  new (...args: any): any;\n}\n\ntype Mapper<T extends { [name: string]: Constructor }, P extends keyof T> = {\n  [name in P]: InstanceType<T[name]>;\n};\n\nexport interface BundleType<T extends { [name: string]: Constructor }, P extends keyof T> {\n  new (options?: any): Mapper<T, P>;\n}\n\nexport function bundler<T extends { [name: string]: Constructor }, P extends keyof T>(\n  services: T,\n): BundleType<T, P> {\n  return function Bundle(options?: any) {\n    Object.entries(services).forEach(([name, Ser]) => {\n      /* eslint @typescript-eslint/ban-ts-comment: 0 */\n      // @ts-ignore\n      this[name] = new Ser(options);\n    });\n  } as any as BundleType<T, P>;\n}\n\nexport function appendFormFromObject(object: Record<string, unknown>): FormData {\n  /* eslint @typescript-eslint/ban-ts-comment: 0 */\n  // @ts-ignore\n  const form = new FormData();\n\n  Object.entries(object).forEach(([k, v]) => {\n    if (Array.isArray(v)) form.append(k, v[0], v[1]);\n    else form.append(k, v as any);\n  });\n\n  return form;\n}\n","import { parse as parseLink } from 'li';\nimport { camelizeKeys } from 'xcase';\nimport { BaseService } from '@gitbeaker/requester-utils';\nimport { appendFormFromObject, Camelize } from './Utils';\n\n// Request Options\nexport type IsForm = {\n  isForm?: boolean;\n};\n\nexport type Sudo = {\n  sudo?: string | number;\n};\n\nexport type ShowExpanded<T extends boolean = boolean> = {\n  showExpanded?: T;\n};\n\nexport type BaseRequestOptions = Sudo & Record<string, unknown>;\n\nexport type BasePaginationRequestOptions<P extends 'keyset' | 'offset' = 'keyset' | 'offset'> =\n  BaseRequestOptions & {\n    pagination?: P;\n    perPage?: number;\n  };\n\nexport type OffsetPaginationRequestOptions = {\n  page?: number;\n  maxPages?: number;\n};\n\nexport type PaginatedRequestOptions<P extends 'keyset' | 'offset' = 'keyset' | 'offset'> =\n  P extends 'keyset'\n    ? BasePaginationRequestOptions<P>\n    : BasePaginationRequestOptions<P> & OffsetPaginationRequestOptions;\n\n// Response Formats\nexport interface ExpandedResponse<T = Record<string, unknown>> {\n  data: T;\n  headers: Record<string, unknown>;\n  status: number;\n}\nexport interface PaginationResponse<T = Record<string, unknown>[]> {\n  data: T;\n  paginationInfo: {\n    total: number;\n    next: number | null;\n    current: number;\n    previous: number | null;\n    perPage: number;\n    totalPages: number;\n  };\n}\n\nexport type CamelizedRecord<C, T> = C extends true ? Camelize<T> : T;\n\nexport type ExtendedRecordReturn<\n  C extends boolean,\n  E extends boolean,\n  T extends Record<string, unknown> | void,\n> = T extends void\n  ? void\n  : E extends false\n  ? CamelizedRecord<C, T>\n  : ExpandedResponse<CamelizedRecord<C, T>>;\n\ntype ExtendedArrayReturn<C extends boolean, E extends boolean, T, P extends 'keyset' | 'offset'> =\n  E extends false\n    ? CamelizedRecord<C, T>[]\n    : P extends 'keyset'\n    ? CamelizedRecord<C, T>[]\n    : PaginationResponse<CamelizedRecord<C, T>[]>;\n\ntype ExtendedReturn<\n  C extends boolean,\n  E extends boolean,\n  P extends 'keyset' | 'offset',\n  T extends Record<string, unknown> | Record<string, unknown>[],\n> = T extends Record<string, unknown>\n  ? ExtendedRecordReturn<C, E, T>\n  : T extends (infer R)[]\n  ? ExtendedArrayReturn<C, E, R, P>\n  : never;\n\nasync function getHelper<P extends 'keyset' | 'offset', E extends boolean>(\n  service: BaseService<boolean>,\n  endpoint: string,\n  {\n    sudo,\n    showExpanded,\n    maxPages,\n    ...query\n  }: BasePaginationRequestOptions<P> & ShowExpanded<E> & { maxPages?: number } = {},\n  acc: any[] = [],\n): Promise<any> {\n  const response = await service.requester.get(endpoint, { query, sudo });\n  const { headers, status } = response;\n  let { body } = response;\n\n  // Camelize response body if specified\n  if (service.camelize) body = camelizeKeys(body);\n\n  // Handle object responses\n  if (!Array.isArray(body)) {\n    if (!showExpanded) return body;\n\n    return {\n      data: body,\n      headers,\n      status,\n    };\n  }\n\n  // Handle array responses\n  const newAcc = [...acc, ...body];\n  const { next }: { next: string } = parseLink(headers.link);\n  const withinBounds = maxPages ? newAcc.length / (query.perPage || 20) < maxPages : true;\n\n  // Recurse through pagination results\n  if (!query.page && next && withinBounds) {\n    const leaf = service.url.split('/').pop() || '';\n    const regex = new RegExp(`.+/api/v\\\\d(/${leaf})?/`);\n\n    return getHelper(\n      service,\n      next.replace(regex, ''),\n      {\n        ...query,\n        maxPages,\n        sudo,\n      },\n      newAcc,\n    );\n  }\n\n  if (!showExpanded || query.pagination === 'keyset') return newAcc;\n\n  return {\n    data: newAcc,\n    paginationInfo: {\n      total: parseInt(headers['x-total'], 10),\n      next: parseInt(headers['x-next-page'], 10) || null,\n      current: parseInt(headers['x-page'], 10) || 1,\n      previous: parseInt(headers['x-prev-page'], 10) || null,\n      perPage: parseInt(headers['x-per-page'], 10),\n      totalPages: parseInt(headers['x-total-pages'], 10),\n    },\n  };\n}\n\nexport function get<\n  T extends Record<string, unknown> | Record<string, unknown>[] = Record<string, unknown>,\n>() {\n  return async function <\n    C extends boolean,\n    P extends 'keyset' | 'offset' = 'offset',\n    E extends boolean = false,\n  >(\n    service: BaseService<C>,\n    endpoint: string,\n    options?: PaginatedRequestOptions<P> & ShowExpanded<E> & Record<string, any>,\n  ): Promise<ExtendedReturn<C, E, P, T>> {\n    return getHelper(service, endpoint, options);\n  };\n}\n\nexport function post<T extends Record<string, unknown> | void = Record<string, unknown>>() {\n  return async function <C extends boolean, E extends boolean = false>(\n    service: BaseService<C>,\n    endpoint: string,\n    {\n      query,\n      isForm,\n      sudo,\n      showExpanded,\n      ...options\n    }: IsForm & BaseRequestOptions & ShowExpanded<E> = {},\n  ): Promise<ExtendedRecordReturn<C, E, T>> {\n    const body = isForm ? appendFormFromObject(options) : options;\n\n    const r = await service.requester.post(endpoint, {\n      query,\n      body,\n      sudo,\n    });\n\n    return showExpanded\n      ? {\n          data: r.body,\n          status: r.status,\n          headers: r.headers,\n        }\n      : r.body;\n  };\n}\n\nexport function put<T extends Record<string, unknown> = Record<string, unknown>>() {\n  return async function <C extends boolean, E extends boolean = false>(\n    service: BaseService<C>,\n    endpoint: string,\n    {\n      query,\n      isForm,\n      sudo,\n      showExpanded,\n      ...options\n    }: IsForm & BaseRequestOptions & ShowExpanded<E> = {},\n  ): Promise<ExtendedRecordReturn<C, E, T>> {\n    const body = isForm ? appendFormFromObject(options) : options;\n\n    const r = await service.requester.put(endpoint, {\n      body,\n      query,\n      sudo,\n    });\n\n    return showExpanded\n      ? {\n          data: r.body,\n          status: r.status,\n          headers: r.headers,\n        }\n      : r.body;\n  };\n}\n\nexport function del<T extends Record<string, unknown> | void = void>() {\n  return async function <C extends boolean, E extends boolean = false>(\n    service: BaseService<C>,\n    endpoint: string,\n    { sudo, showExpanded, ...query }: BaseRequestOptions & ShowExpanded<E> = {},\n  ): Promise<ExtendedRecordReturn<C, E, T>> {\n    const r = await service.requester.delete(endpoint, {\n      query,\n      sudo,\n    });\n\n    return showExpanded\n      ? {\n          data: r.body,\n          status: r.status,\n          headers: r.headers,\n        }\n      : r.body;\n  };\n}\n\nfunction stream<C extends boolean>(\n  service: BaseService<C>,\n  endpoint: string,\n  options?: BaseRequestOptions,\n): NodeJS.ReadableStream {\n  if (typeof service.requester.stream !== 'function') {\n    throw new Error('Stream method is not implementated in requester!');\n  }\n\n  return service.requester.stream(endpoint, {\n    query: options,\n  });\n}\n\nexport const RequestHelper = {\n  post,\n  put,\n  get,\n  del,\n  stream,\n};\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  ShowExpanded,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { ProjectSchema } from './Projects';\n\nexport interface GroupSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  path: string;\n  full_name: string;\n  full_path: string;\n  parent_id: number;\n  visibility: string;\n  avatar_url: string;\n  web_url: string;\n  description: string;\n  share_with_group_lock: boolean;\n  require_two_factor_authentication: boolean;\n  two_factor_grace_period: number;\n  project_creation_level: string;\n  auto_devops_enabled: boolean;\n  subgroup_creation_level: string;\n  emails_disabled: boolean;\n  mentions_disabled: boolean;\n  lfs_enabled: boolean;\n  default_branch_protection: number;\n  request_access_enabled: boolean;\n  file_template_project_id: number;\n  created_at: string;\n}\n\nexport type GroupDetailSchema = {\n  id: number;\n  name: string;\n  path: string;\n  full_name: string;\n  full_path: string;\n  parent_id: number;\n  visibility: string;\n  avatar_url: string;\n  web_url: string;\n  description: string;\n  request_access_enabled: boolean;\n  file_template_project_id: number;\n  runners_token: string;\n  shared_with_groups: {\n    group_id: number;\n    group_name: string;\n    group_full_path: string;\n    group_access_level: number;\n    expires_at: string;\n  }[];\n  created_at: string;\n};\n\nexport class Groups<C extends boolean = false> extends BaseService<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<GroupSchema[]>()(this, 'groups', options);\n  }\n\n  create(name: string, path: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<GroupSchema>()(this, 'groups', { name, path, ...options });\n  }\n\n  createLDAPLink(\n    groupId: string | number,\n    cn: string,\n    groupAccess: number,\n    provider: string,\n    options?: Sudo & ShowExpanded,\n  ) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.post()(this, `groups/${gId}/ldap_group_links`, {\n      cn,\n      groupAccess,\n      provider,\n      ...options,\n    });\n  }\n\n  edit(groupId: string | number, options?: BaseRequestOptions) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.put()(this, `groups/${gId}`, options);\n  }\n\n  projects(groupId: string | number, options?: BaseRequestOptions) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.get<ProjectSchema[]>()(this, `groups/${gId}/projects`, options);\n  }\n\n  remove(groupId: string | number, options?: Sudo & ShowExpanded) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.del()(this, `groups/${gId}`, options);\n  }\n\n  removeLDAPLink(\n    groupId: string | number,\n    cn: string,\n    { provider, ...options }: Sudo & ShowExpanded & { provider?: string } = {},\n  ) {\n    const gId = encodeURIComponent(groupId);\n    const url = provider ? `${provider}/${cn}` : `${cn}`;\n\n    return RequestHelper.del()(\n      this,\n      `groups/${gId}/ldap_group_links/${url}`,\n      options as Record<string, unknown>,\n    );\n  }\n\n  search(nameOrPath: string, options?: Sudo) {\n    return RequestHelper.get()(this, 'groups', {\n      search: nameOrPath,\n      ...options,\n    });\n  }\n\n  show(groupId: string | number, options?: BaseRequestOptions) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.get<GroupDetailSchema>()(this, `groups/${gId}`, options);\n  }\n\n  subgroups(groupId: string | number, options?: PaginatedRequestOptions) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.get()(this, `groups/${gId}/subgroups`, options);\n  }\n\n  syncLDAP(groupId: string | number, options?: Sudo & ShowExpanded) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.post()(this, `groups/${gId}/ldap_sync`, options);\n  }\n\n  transferProject(\n    groupId: string | number,\n    projectId: string | number,\n    options?: BaseRequestOptions & ShowExpanded,\n  ) {\n    const [gId, pId] = [groupId, projectId].map(encodeURIComponent);\n\n    return RequestHelper.post()(this, `groups/${gId}/projects/${pId}`, options);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport type AccessLevel = 0 | 5 | 10 | 20 | 30 | 40 | 50;\n\nexport interface AccessRequestSchema extends Record<string, unknown> {\n  id: number;\n  username: string;\n  name: string;\n  state: string;\n  created_at: string;\n  requested_at: string;\n}\n\nexport class ResourceAccessRequests<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<AccessRequestSchema[]>()(this, `${rId}/access_requests`);\n  }\n\n  request(resourceId: string | number) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.post<AccessRequestSchema>()(this, `${rId}/access_requests`);\n  }\n\n  approve(\n    resourceId: string | number,\n    userId: number,\n    options?: { accessLevel?: AccessLevel } & Sudo,\n  ) {\n    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);\n\n    return RequestHelper.post<AccessRequestSchema>()(\n      this,\n      `${rId}/access_requests/${uId}/approve`,\n      options,\n    );\n  }\n\n  deny(resourceId: string | number, userId: number) {\n    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/access_requests/${uId}`);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { UserSchema } from '../services/Users';\nimport { PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface AwardEmojiSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  user: UserSchema;\n  created_at: string;\n  updated_at: string;\n  awardable_id: number;\n  awardable_type: string;\n}\n\nexport function url(\n  projectId: number | string,\n  resourceType: string,\n  resourceId: number | string,\n  awardId?: number | null,\n  noteId?: number,\n) {\n  const [pId, rId] = [projectId, resourceId].map(encodeURIComponent);\n  const output = [pId, resourceType, rId];\n\n  if (noteId) output.push('notes', encodeURIComponent(noteId));\n\n  output.push('award_emoji');\n\n  if (awardId) output.push(encodeURIComponent(awardId));\n\n  return output.join('/');\n}\n\nexport class ResourceAwardEmojis<C extends boolean = false> extends BaseService<C> {\n  protected resourceType: string;\n\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: 'projects', ...options });\n\n    this.resourceType = resourceType;\n  }\n\n  all(projectId: string | number, resourceIId: number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<AwardEmojiSchema[]>()(\n      this,\n      url(projectId, this.resourceType, resourceIId),\n      options,\n    );\n  }\n\n  award(projectId: string | number, resourceIId: number, name: string, options?: Sudo) {\n    return RequestHelper.post<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId),\n      {\n        name,\n        ...options,\n      },\n    );\n  }\n\n  remove(projectId: string | number, resourceIId: number, awardId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId),\n      options,\n    );\n  }\n\n  show(projectId: string | number, resourceIId: number, awardId: number, options?: Sudo) {\n    return RequestHelper.get<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId),\n      options,\n    );\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\nimport { AwardEmojiSchema, url } from './ResourceAwardEmojis';\n\nexport class ResourceNoteAwardEmojis<C extends boolean = false> extends BaseService<C> {\n  protected resourceType: string;\n\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: 'projects', ...options });\n\n    this.resourceType = resourceType;\n  }\n\n  all(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    options?: PaginatedRequestOptions,\n  ) {\n    return RequestHelper.get<AwardEmojiSchema[]>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, null, noteId),\n      options,\n    );\n  }\n\n  award(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    name: string,\n    options?: Sudo,\n  ) {\n    return RequestHelper.post<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, null, noteId),\n      {\n        name,\n        ...options,\n      },\n    );\n  }\n\n  remove(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.del()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId, noteId),\n      options,\n    );\n  }\n\n  show(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.get<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId, noteId),\n      options,\n    );\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface BadgeSchema extends Record<string, unknown> {\n  name: string;\n  id: number;\n  link_url: string;\n  image_url: string;\n  rendered_link_url: string;\n  rendered_image_url: string;\n  kind: 'project' | 'group';\n}\n\nexport class ResourceBadges<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  add(resourceId: string | number, options?: BaseRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.post<BadgeSchema>()(this, `${rId}/badges`, options);\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<BadgeSchema[]>()(this, `${rId}/badges`, options);\n  }\n\n  edit(resourceId: string | number, badgeId: number, options?: BaseRequestOptions) {\n    const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);\n\n    return RequestHelper.put<BadgeSchema>()(this, `${rId}/badges/${bId}`, options);\n  }\n\n  preview(resourceId: string | number, linkUrl: string, imageUrl: string, options?: Sudo) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<Omit<BadgeSchema, 'id' | 'name' | 'kind'>>()(\n      this,\n      `${rId}/badges/render`,\n      { linkUrl, imageUrl, ...options },\n    );\n  }\n\n  remove(resourceId: string | number, badgeId: number, options?: Sudo) {\n    const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/badges/${bId}`, options);\n  }\n\n  show(resourceId: string | number, badgeId: number, options?: Sudo) {\n    const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);\n\n    return RequestHelper.get<BadgeSchema>()(this, `${rId}/badges/${bId}`, options);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface CustomAttributeSchema extends Record<string, unknown> {\n  key: string;\n  value: string;\n}\n\nexport class ResourceCustomAttributes<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<CustomAttributeSchema[]>()(this, `${rId}/custom_attributes`, options);\n  }\n\n  set(resourceId: string | number, customAttributeId: number, value: string, options?: Sudo) {\n    const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);\n\n    return RequestHelper.put<CustomAttributeSchema>()(this, `${rId}/custom_attributes/${cId}`, {\n      value,\n      ...options,\n    });\n  }\n\n  remove(resourceId: string | number, customAttributeId: number, options?: Sudo) {\n    const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/custom_attributes/${cId}`, options);\n  }\n\n  show(resourceId: string | number, customAttributeId: number, options?: Sudo) {\n    const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);\n\n    return RequestHelper.get<CustomAttributeSchema>()(\n      this,\n      `${rId}/custom_attributes/${cId}`,\n      options,\n    );\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport type DeployTokenScope =\n  | 'read_repository'\n  | 'read_registry'\n  | 'write_registry'\n  | 'read_package_registry'\n  | 'write_package_registry';\n\nexport interface DeployTokenSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  username: string;\n  expires_at: string;\n  scopes?: string[];\n}\n\n// https://docs.gitlab.com/ee/api/deploy_tokens.html\nexport class ResourceDeployTokens<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  add(\n    resourceId: string | number,\n    tokenName: string,\n    tokenScopes: DeployTokenScope[],\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<DeployTokenSchema>()(\n      this,\n      `${encodeURIComponent(resourceId)}/deploy_tokens`,\n      {\n        name: tokenName,\n        scopes: tokenScopes,\n        ...options,\n      },\n    );\n  }\n\n  all({\n    resourceId,\n    projectId,\n    groupId,\n    ...options\n  }: {\n    resourceId?: string | number;\n    projectId?: string | number;\n    groupId?: string | number;\n  } & PaginatedRequestOptions = {}) {\n    const prefix =\n      resourceId || projectId || groupId\n        ? `${encodeURIComponent((resourceId || projectId || groupId) as string)}/`\n        : '';\n\n    return RequestHelper.get<DeployTokenSchema[]>()(this, `${prefix}deploy_tokens`, options);\n  }\n\n  remove(resourceId: string | number, tokenId: number, options?: Sudo) {\n    const [rId, tId] = [resourceId, tokenId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/deploy_tokens/${tId}`, options);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { UserSchema } from '../services/Users';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface PositionSchema {\n  base_sha: string;\n  start_sha: string;\n  head_sha: string;\n  old_path: string;\n  new_path: string;\n  position_type: string;\n  old_line: number;\n  new_line: number;\n}\n\nexport interface NotesEntitySchema {\n  id: number;\n  type?: string;\n  body: string;\n  attachment?: string;\n  author: Omit<UserSchema, 'created_at'>;\n  created_at: string;\n  updated_at: string;\n  system: boolean;\n  noteable_id: number;\n  noteable_type: string;\n  noteable_iid?: number;\n  resolvable: boolean;\n  position?: PositionSchema;\n}\n\nexport interface DiscussionSchema extends Record<string, unknown> {\n  id: string;\n  individual_note: boolean;\n  notes?: NotesEntitySchema[];\n}\n\nexport class ResourceDiscussions<C extends boolean = false> extends BaseService<C> {\n  protected resource2Type: string;\n\n  constructor(resourceType: string, resource2Type: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n\n    this.resource2Type = resource2Type;\n  }\n\n  addNote(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(\n      encodeURIComponent,\n    );\n\n    return RequestHelper.post()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes`,\n      { query: { body }, noteId: nId, ...options },\n    );\n  }\n\n  all(\n    resourceId: string | number,\n    resource2Id: string | number,\n    options?: PaginatedRequestOptions,\n  ) {\n    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);\n\n    return RequestHelper.get<DiscussionSchema[]>()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/discussions`,\n      options,\n    );\n  }\n\n  create(\n    resourceId: string | number,\n    resource2Id: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);\n\n    return RequestHelper.post<DiscussionSchema>()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/discussions`,\n      {\n        query: { body },\n        ...options,\n      },\n    );\n  }\n\n  editNote(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    noteId: number,\n    { body, ...options }: BaseRequestOptions & { body?: string } = {},\n  ) {\n    const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(\n      encodeURIComponent,\n    );\n\n    return RequestHelper.put<DiscussionSchema>()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`,\n      {\n        query: { body },\n        ...options,\n      },\n    );\n  }\n\n  removeNote(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ) {\n    const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(\n      encodeURIComponent,\n    );\n\n    return RequestHelper.del()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`,\n      options,\n    );\n  }\n\n  show(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    options?: Sudo,\n  ) {\n    const [rId, r2Id, dId] = [resourceId, resource2Id, discussionId].map(encodeURIComponent);\n\n    return RequestHelper.get<DiscussionSchema>()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}`,\n      options,\n    );\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { MilestoneSchema } from './ResourceMilestones';\nimport { LabelSchema } from './ResourceLabels';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface IssueBoardListSchema extends Record<string, unknown> {\n  id: number;\n  label: Pick<LabelSchema, 'name' | 'color' | 'description'>;\n  position: number;\n  max_issue_count: number;\n  max_issue_weight: number;\n  limit_metric?: string;\n}\n\nexport interface IssueBoardSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  milestone: Pick<MilestoneSchema, 'id' | 'title'>;\n  lists?: IssueBoardListSchema[];\n}\n\nexport class ResourceIssueBoards<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<IssueBoardSchema[]>()(this, `${rId}/boards`, options);\n  }\n\n  create(resourceId: string | number, name: string, options?: Sudo) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.post<IssueBoardSchema>()(this, `${rId}/boards`, { name, ...options });\n  }\n\n  createList(\n    resourceId: string | number,\n    boardId: number,\n    labelId: number | string,\n    options?: Sudo,\n  ) {\n    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);\n\n    return RequestHelper.post<IssueBoardListSchema>()(this, `${rId}/boards/${bId}/lists`, {\n      labelId,\n      ...options,\n    });\n  }\n\n  edit(resourceId: string | number, boardId: number, options?: BaseRequestOptions) {\n    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);\n\n    return RequestHelper.put()(this, `${rId}/boards/${bId}`, options);\n  }\n\n  editList(\n    resourceId: string | number,\n    boardId: number,\n    listId: number,\n    position: number,\n    options?: Sudo,\n  ) {\n    const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);\n\n    return RequestHelper.put<IssueBoardListSchema>()(this, `${rId}/boards/${bId}/lists/${lId}`, {\n      position,\n      ...options,\n    });\n  }\n\n  lists(resourceId: string | number, boardId: number, options?: Sudo) {\n    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);\n\n    return RequestHelper.get<IssueBoardListSchema[]>()(this, `${rId}/boards/${bId}/lists`, options);\n  }\n\n  remove(resourceId: string | number, boardId: number, options?: Sudo) {\n    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/boards/${bId}`, options);\n  }\n\n  removeList(resourceId: string | number, boardId: number, listId: number, options?: Sudo) {\n    const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/boards/${bId}/lists/${lId}`, options);\n  }\n\n  show(resourceId: string | number, boardId: number, options?: Sudo) {\n    const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);\n\n    return RequestHelper.get<IssueBoardSchema>()(this, `${rId}/boards/${bId}`, options);\n  }\n\n  showList(resourceId: string | number, boardId: number, listId: number, options?: Sudo) {\n    const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);\n\n    return RequestHelper.get<IssueBoardListSchema>()(\n      this,\n      `${rId}/boards/${bId}/lists/${lId}`,\n      options,\n    );\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n  ShowExpanded,\n} from '../infrastructure';\n\nexport interface LabelSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  color: string;\n  text_color: string;\n  description: string;\n  description_html: string;\n  open_issues_count: number;\n  closed_issues_count: number;\n  open_merge_requests_count: number;\n  subscribed: boolean;\n  priority: number;\n  is_project_label: boolean;\n}\n\nexport class ResourceLabels<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<LabelSchema[]>()(this, `${rId}/labels`, options);\n  }\n\n  create(\n    resourceId: string | number,\n    labelName: string,\n    color: string,\n    options?: BaseRequestOptions,\n  ) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.post<LabelSchema>()(this, `${rId}/labels`, {\n      name: labelName,\n      color,\n      ...options,\n    });\n  }\n\n  edit(resourceId: string | number, labelId: number | string, options?: BaseRequestOptions) {\n    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);\n\n    return RequestHelper.put<LabelSchema>()(this, `${rId}/labels/${lId}`, options);\n  }\n\n  remove(resourceId: string | number, labelId: number | string, options?: Sudo & ShowExpanded) {\n    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/labels/${lId}`, options);\n  }\n\n  subscribe(resourceId: string | number, labelId: number | string, options?: Sudo & ShowExpanded) {\n    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);\n\n    return RequestHelper.post<LabelSchema>()(this, `${rId}/issues/${lId}/subscribe`, options);\n  }\n\n  unsubscribe(\n    resourceId: string | number,\n    labelId: number | string,\n    options?: Sudo & ShowExpanded,\n  ) {\n    const [rId, lId] = [resourceId, labelId].map(encodeURIComponent);\n\n    return RequestHelper.post<LabelSchema>()(this, `${rId}/issues/${lId}/unsubscribe`, options);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { AccessLevel } from './ResourceAccessRequests';\n\nexport interface IncludeInherited {\n  includeInherited?: boolean;\n}\n\nexport interface MembersSchema extends Record<string, unknown> {\n  id: number;\n  username: string;\n  name: string;\n  state: string;\n  avatar_url: string;\n  web_url: string;\n  expires_at: string;\n  access_level: AccessLevel;\n  email: string;\n  group_saml_identity: {\n    extern_uid: string;\n    provider: string;\n    saml_provider_id: number;\n  };\n}\n\nexport class ResourceMembers<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  add(\n    resourceId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ) {\n    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);\n\n    return RequestHelper.post<MembersSchema>()(this, `${rId}/members`, {\n      userId: uId,\n      accessLevel,\n      ...options,\n    });\n  }\n\n  all(\n    resourceId: string | number,\n    { includeInherited, ...options }: IncludeInherited & PaginatedRequestOptions = {},\n  ) {\n    const rId = encodeURIComponent(resourceId);\n    const url = [rId, 'members'];\n\n    if (includeInherited) url.push('all');\n\n    return RequestHelper.get<MembersSchema[]>()(this, url.join('/'), options);\n  }\n\n  edit(\n    resourceId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ) {\n    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);\n\n    return RequestHelper.put<MembersSchema>()(this, `${rId}/members/${uId}`, {\n      accessLevel,\n      ...options,\n    });\n  }\n\n  show(\n    resourceId: string | number,\n    userId: number,\n    { includeInherited, ...options }: IncludeInherited & Sudo = {},\n  ) {\n    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);\n    const url = [rId, 'members'];\n\n    if (includeInherited) url.push('all');\n\n    url.push(uId);\n\n    return RequestHelper.get<MembersSchema>()(\n      this,\n      url.join('/'),\n      options as Record<string, unknown>,\n    );\n  }\n\n  remove(resourceId: string | number, userId: number, options?: Sudo) {\n    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/members/${uId}`, options);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport {\n  RequestHelper,\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n} from '../infrastructure';\nimport { IssueSchema } from '../services/Issues';\nimport { MergeRequestSchema } from '../services/MergeRequests';\n\nexport interface MilestoneSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  project_id: number;\n  title: string;\n  description: string;\n  due_date?: string;\n  start_date: string;\n  state: string;\n  updated_at: string;\n  created_at: string;\n  expired: boolean;\n  web_url?: string;\n}\n\nexport class ResourceMilestones<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<MilestoneSchema[]>()(this, `${rId}/milestones`, options);\n  }\n\n  create(resourceId: string | number, title: string, options?: BaseRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.post<MilestoneSchema>()(this, `${rId}/milestones`, { title, ...options });\n  }\n\n  edit(resourceId: string | number, milestoneId: number, options?: BaseRequestOptions) {\n    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);\n\n    return RequestHelper.put<MilestoneSchema>()(this, `${rId}/milestones/${mId}`, options);\n  }\n\n  issues(resourceId: string | number, milestoneId: number, options?: Sudo) {\n    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);\n\n    return RequestHelper.get<IssueSchema[]>()(this, `${rId}/milestones/${mId}/issues`, options);\n  }\n\n  mergeRequests(resourceId: string | number, milestoneId: number, options?: Sudo) {\n    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);\n\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      `${rId}/milestones/${mId}/merge_requests`,\n      options,\n    );\n  }\n\n  show(resourceId: string | number, milestoneId: number, options?: Sudo) {\n    const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);\n\n    return RequestHelper.get<MilestoneSchema>()(this, `${rId}/milestones/${mId}`, options);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { UserSchema } from '../services/Users';\nimport {\n  RequestHelper,\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n} from '../infrastructure';\n\nexport interface NoteSchema extends Record<string, unknown> {\n  id: number;\n  body: string;\n  author: UserSchema;\n  created_at: string;\n  updated_at: string;\n  confidential: boolean;\n}\n\nexport class ResourceNotes<C extends boolean = false> extends BaseService<C> {\n  protected resource2Type: string;\n\n  constructor(resourceType: string, resource2Type: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n\n    this.resource2Type = resource2Type;\n  }\n\n  all(\n    resourceId: string | number,\n    resource2Id: string | number,\n    options?: PaginatedRequestOptions,\n  ) {\n    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);\n\n    return RequestHelper.get<NoteSchema[]>()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/notes`,\n      options,\n    );\n  }\n\n  create(\n    resourceId: string | number,\n    resource2Id: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);\n\n    return RequestHelper.post<NoteSchema>()(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, {\n      body,\n      ...options,\n    });\n  }\n\n  edit(\n    resourceId: string | number,\n    resource2Id: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);\n\n    return RequestHelper.put<NoteSchema>()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`,\n      {\n        body,\n        ...options,\n      },\n    );\n  }\n\n  remove(\n    resourceId: string | number,\n    resource2Id: string | number,\n    noteId: number,\n    options?: Sudo,\n  ) {\n    const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);\n  }\n\n  show(resourceId: string | number, resource2Id: string | number, noteId: number, options?: Sudo) {\n    const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);\n\n    return RequestHelper.get<NoteSchema>()(\n      this,\n      `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`,\n      options,\n    );\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\nexport interface ResourceTemplateSchema extends Record<string, unknown> {\n  name: string;\n  content: string;\n}\n\nexport class ResourceTemplates<C extends boolean = false> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: ['templates', resourceType].join('/'), ...options });\n  }\n\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ResourceTemplateSchema[]>()(this, '', options);\n  }\n\n  show(key: string | number, options?: Sudo) {\n    const rId = encodeURIComponent(key);\n\n    return RequestHelper.get<ResourceTemplateSchema>()(this, `${rId}`, options);\n  }\n}\n","import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions } from '../infrastructure';\n\nexport interface ResourceVariableSchema extends Record<string, unknown> {\n  variable_type: 'env_var' | 'file';\n  value: string;\n  protected: boolean;\n  masked: boolean;\n  environment_scope?: string; // Environment scope is only available for projects.\n  key: string;\n}\n\nexport class ResourceVariables<C extends boolean> extends BaseService<C> {\n  constructor(resourceType: string, options: BaseServiceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.get<ResourceVariableSchema[]>()(this, `${rId}/variables`, options);\n  }\n\n  create(resourceId: string | number, options?: ResourceVariableSchema) {\n    const rId = encodeURIComponent(resourceId);\n\n    return RequestHelper.post<ResourceVariableSchema>()(this, `${rId}/variables`, options);\n  }\n\n  edit(resourceId: string | number, keyId: string, options?: Omit<ResourceVariableSchema, 'key'>) {\n    const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.put<ResourceVariableSchema>()(this, `${rId}/variables/${kId}`, options);\n  }\n\n  show(resourceId: string | number, keyId: string, options?: PaginatedRequestOptions) {\n    const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.get<ResourceVariableSchema>()(this, `${rId}/variables/${kId}`, options);\n  }\n\n  remove(resourceId: string | number, keyId: string, options?: PaginatedRequestOptions) {\n    const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `${rId}/variables/${kId}`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAccessRequests, AccessRequestSchema, AccessLevel } from '../templates';\nimport { Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface GroupAccessRequests<C extends boolean = false> extends ResourceAccessRequests<C> {\n  all(groupId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>[]>;\n\n  request(groupId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  approve(\n    groupId: string | number,\n    userId: number,\n    options?: { accessLevel?: AccessLevel } & Sudo,\n  ): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  deny(groupId: string | number, userId: number): Promise<void>;\n}\n\nexport class GroupAccessRequests<C extends boolean = false> extends ResourceAccessRequests<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceBadges, BadgeSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface GroupBadgeSchema extends BadgeSchema {\n  kind: 'group';\n}\n\nexport interface GroupBadges<C extends boolean = false> extends ResourceBadges<C> {\n  add(\n    groupId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>>;\n\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>[]>;\n\n  edit(\n    groupId: string | number,\n    badgeId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>>;\n\n  preview(\n    groupId: string | number,\n    linkUrl: string,\n    imageUrl: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, Omit<GroupBadgeSchema, 'id' | 'name' | 'kind'>>>;\n\n  remove(groupId: string | number, badgeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    groupId: string | number,\n    badgeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>>;\n}\n\nexport class GroupBadges<C extends boolean = false> extends ResourceBadges<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceCustomAttributes, CustomAttributeSchema } from '../templates';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface GroupCustomAttributes<C extends boolean = false>\n  extends ResourceCustomAttributes<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>[]>;\n\n  set(\n    groupId: string | number,\n    customAttributeId: number,\n    value: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n\n  remove(groupId: string | number, customAttributeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    groupId: string | number,\n    customAttributeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n}\n\nexport class GroupCustomAttributes<C extends boolean = false> extends ResourceCustomAttributes<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { GroupSchema } from './Groups';\nimport { ResourceIssueBoards, IssueBoardSchema, IssueBoardListSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface GroupIssueBoardSchema extends IssueBoardSchema {\n  group: Pick<GroupSchema, 'id' | 'name' | 'web_url'>;\n}\n\nexport interface GroupIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueBoardSchema>[]>;\n\n  create(\n    groupId: string | number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, GroupIssueBoardSchema>>;\n\n  createList(\n    groupId: string | number,\n    boardId: number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  edit(\n    groupId: string | number,\n    boardId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupIssueBoardSchema>>;\n\n  editList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    position: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  lists(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>[]>;\n\n  remove(groupId: string | number, boardId: number, options?: Sudo): Promise<void>;\n\n  removeList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, GroupIssueBoardSchema>>;\n\n  showList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n}\n\nexport class GroupIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceMembers, MembersSchema, IncludeInherited, AccessLevel } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface GroupMembers<C extends boolean = false> extends ResourceMembers<C> {\n  add(\n    groupId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MembersSchema>>;\n\n  all(\n    groupId: string | number,\n    options?: IncludeInherited & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MembersSchema>[]>;\n\n  edit(\n    groupId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MembersSchema>>;\n\n  show(\n    groupId: string | number,\n    userId: number,\n    options?: IncludeInherited & Sudo,\n  ): Promise<CamelizedRecord<C, MembersSchema>>;\n\n  remove(groupId: string | number, userId: number, options?: Sudo): Promise<void>;\n}\n\nexport class GroupMembers<C extends boolean = false> extends ResourceMembers<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceMilestones, MilestoneSchema } from '../templates';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\nimport { IssueSchema } from './Issues';\nimport { MergeRequestSchema } from './MergeRequests';\n\nexport interface GroupMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>[]>;\n\n  create(\n    groupId: string | number,\n    title: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  edit(\n    groupId: string | number,\n    milestoneId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  issues(\n    groupId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueSchema>[]>;\n\n  mergeRequests(\n    groupId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MergeRequestSchema>[]>;\n\n  show(\n    groupId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n}\n\nexport class GroupMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { PaginatedRequestOptions, ShowExpanded, RequestHelper } from '../infrastructure';\nimport { RunnerSchema } from './Runners';\n\nexport class GroupRunners<C extends boolean = false> extends BaseService<C> {\n  all(groupId: string | number, options?: PaginatedRequestOptions & ShowExpanded) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.get<RunnerSchema[]>()(this, `groups/${gId}/runners`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceVariables, ResourceVariableSchema } from '../templates';\nimport { PaginatedRequestOptions, BaseRequestOptions, CamelizedRecord } from '../infrastructure';\n\nexport interface GroupVariables<C extends boolean = false> extends ResourceVariables<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>[]>;\n\n  create(\n    groupId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>>;\n\n  edit(\n    groupId: string | number,\n    key: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>>;\n\n  show(\n    groupId: string | number,\n    key: string,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>>;\n\n  remove(groupId: string | number, key: string, options?: PaginatedRequestOptions): Promise<void>;\n}\n\nexport class GroupVariables<C extends boolean = false> extends ResourceVariables<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\nimport { ResourceLabels, LabelSchema } from '../templates';\n\nexport interface GroupLabels<C extends boolean = false> extends ResourceLabels<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>[]>;\n\n  create(\n    groupId: string | number,\n    labelName: string,\n    color: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  edit(\n    groupId: string | number,\n    labelId: number | string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  remove(groupId: string | number, labelId: number | string, options?: Sudo): Promise<void>;\n\n  subscribe(\n    groupId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  unsubscribe(\n    groupId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n}\n\nexport class GroupLabels<C extends boolean = false> extends ResourceLabels<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDeployTokens, DeployTokenScope, DeployTokenSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface GroupDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  add(\n    groupId: string | number,\n    tokenName: string,\n    tokenScopes: DeployTokenScope[],\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>>;\n\n  all(\n    options?: { groupId?: string | number } & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>[]>;\n\n  remove(groupId: string | number, tokenId: number, options?: Sudo): Promise<void>;\n}\n\nexport class GroupDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface EpicSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  group_id: number;\n  parent_id: number;\n  title: string;\n  description: string;\n  state: string;\n  confidential: string;\n  web_url: string;\n  reference: string;\n  references: {\n    short: string;\n    relative: string;\n    full: string;\n  };\n  author: Omit<UserSchema, 'created_at'>;\n  start_date?: string;\n  start_date_is_fixed: boolean;\n  start_date_fixed?: string;\n  start_date_from_inherited_source?: string;\n  due_date: string;\n  due_date_is_fixed: boolean;\n  due_date_fixed?: string;\n  due_date_from_inherited_source: string;\n  created_at: string;\n  updated_at: string;\n  closed_at: string;\n  labels?: string[];\n  upvotes: number;\n  downvotes: number;\n  _links: {\n    self: string;\n    epic_issues: string;\n    group: string;\n  };\n}\n\nexport class Epics<C extends boolean = false> extends BaseService<C> {\n  all(groupId: string | number, options?: PaginatedRequestOptions) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.get<EpicSchema[]>()(this, `groups/${gId}/epics`, options);\n  }\n\n  create(groupId: string | number, title: string, options?: BaseRequestOptions) {\n    const gId = encodeURIComponent(groupId);\n\n    return RequestHelper.post<EpicSchema>()(this, `groups/${gId}/epics`, { title, ...options });\n  }\n\n  edit(groupId: string | number, epicId: number, options?: BaseRequestOptions) {\n    const [gId, eId] = [groupId, epicId].map(encodeURIComponent);\n\n    return RequestHelper.put<EpicSchema>()(this, `groups/${gId}/epics/${eId}`, options);\n  }\n\n  remove(groupId: string | number, epicId: number, options?: Sudo) {\n    const [gId, eId] = [groupId, epicId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `groups/${gId}/epics/${eId}`, options);\n  }\n\n  show(groupId: string | number, epicId: number, options?: Sudo) {\n    const [gId, eId] = [groupId, epicId].map(encodeURIComponent);\n\n    return RequestHelper.get<EpicSchema>()(this, `groups/${gId}/epics/${eId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { IssueSchema } from './Issues';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface EpicIssueSchema\n  extends Omit<IssueSchema, 'references' | 'task_completion_status'> {\n  epic_issue_id: number;\n}\n\nexport class EpicIssues<C extends boolean = false> extends BaseService<C> {\n  all(groupId: string | number, epicIId: number, options?: PaginatedRequestOptions) {\n    const [gId, eId] = [groupId, epicIId].map(encodeURIComponent);\n\n    return RequestHelper.get<EpicIssueSchema[]>()(\n      this,\n      `groups/${gId}/epics/${eId}/issues`,\n      options,\n    );\n  }\n\n  assign(groupId: string | number, epicIId: number, epicIssueId: number, options?: Sudo) {\n    const [gId, eId, iId] = [groupId, epicIId, epicIssueId].map(encodeURIComponent);\n\n    return RequestHelper.post<EpicIssueSchema>()(\n      this,\n      `groups/${gId}/epics/${eId}/issues/${iId}`,\n      options,\n    );\n  }\n\n  edit(\n    groupId: string | number,\n    epicIId: number,\n    epicIssueId: number,\n    options?: BaseRequestOptions,\n  ) {\n    const [gId, eId, iId] = [groupId, epicIId, epicIssueId].map(encodeURIComponent);\n\n    return RequestHelper.put<EpicIssueSchema>()(\n      this,\n      `groups/${gId}/epics/${eId}/issues/${iId}`,\n      options,\n    );\n  }\n\n  remove(groupId: string | number, epicIId: number, epicIssueId: number, options?: Sudo) {\n    const [gId, eId, iId] = [groupId, epicIId, epicIssueId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes, NoteSchema } from '../templates';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface EpicNoteSchema extends NoteSchema {\n  file_name: string;\n  expires_at: string;\n}\n\nexport interface EpicNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    groupId: string | number,\n    epicId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>[]>;\n\n  create(\n    groupId: string | number,\n    epicId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>>;\n\n  edit(\n    groupId: string | number,\n    epicId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>>;\n\n  remove(groupId: string | number, epicId: number, noteId: number, options?: Sudo): Promise<void>;\n\n  show(\n    groupId: string | number,\n    epicId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>>;\n}\n\nexport class EpicNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', 'epics', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions, DiscussionSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface EpicDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    groupId: string | number,\n    epicId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    groupId: string | number,\n    epicId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class EpicDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', 'epics', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { ProjectExtendedSchema } from './Projects';\nimport { EventOptions, EventSchema } from './Events';\n\nexport interface UserSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  username: string;\n  state: string;\n  avatar_url: string;\n  web_url: string;\n  created_at?: string;\n}\n\nexport interface UserExtendedSchema extends UserSchema {\n  bio?: string;\n  location?: string;\n  public_email: string;\n  skype: string;\n  linkedin: string;\n  twitter: string;\n  website_url: string;\n  organization?: string;\n  last_sign_in_at: string;\n  confirmed_at: string;\n  last_activity_on: string;\n  email: string;\n  theme_id: number;\n  color_scheme_id: number;\n  projects_limit: number;\n  current_sign_in_at?: string;\n  identities?: string[];\n  can_create_group: boolean;\n  can_create_project: boolean;\n  two_factor_enabled: boolean;\n  external: boolean;\n  private_profile?: string;\n}\n\nexport interface UserActivitySchema extends Record<string, unknown> {\n  username: string;\n  last_activity_on: string;\n  last_activity_at: string;\n}\n\nexport class Users<C extends boolean = false> extends BaseService<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<UserSchema[]>()(this, 'users', options);\n  }\n\n  activities(options?: Sudo) {\n    return RequestHelper.get<UserActivitySchema[]>()(this, 'users/activities', options);\n  }\n\n  projects(userId: number, options?: Sudo) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.get<ProjectExtendedSchema[]>()(this, `users/${uId}/projects`, options);\n  }\n\n  block(userId: number, options?: Sudo) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.post()(this, `users/${uId}/block`, options);\n  }\n\n  create(options?: BaseRequestOptions) {\n    return RequestHelper.post<UserSchema>()(this, 'users', options);\n  }\n\n  current(options?: Sudo) {\n    return RequestHelper.get<UserSchema>()(this, 'user', options);\n  }\n\n  edit(userId: number, options?: BaseRequestOptions) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.put<UserSchema>()(this, `users/${uId}`, options);\n  }\n\n  events(userId: number, options?: BaseRequestOptions & EventOptions) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.get<EventSchema[]>()(this, `users/${uId}/events`, options);\n  }\n\n  search(emailOrUsername: string, options?: Sudo) {\n    return RequestHelper.get<UserSchema>()(this, 'users', {\n      search: emailOrUsername,\n      ...options,\n    });\n  }\n\n  show(userId: number, options?: BaseRequestOptions) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.get<UserSchema>()(this, `users/${uId}`, options);\n  }\n\n  remove(userId: number, options?: Sudo) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.del()(this, `users/${uId}`, options);\n  }\n\n  unblock(userId: number, options?: Sudo) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.post()(this, `users/${uId}/unblock`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceCustomAttributes, CustomAttributeSchema } from '../templates';\nimport { PaginatedRequestOptions, CamelizedRecord, Sudo } from '../infrastructure';\n\nexport interface UserCustomAttributes<C extends boolean = false>\n  extends ResourceCustomAttributes<C> {\n  all(\n    userId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>[]>;\n\n  set(\n    userId: string | number,\n    customAttributeId: number,\n    value: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n\n  remove(userId: string | number, customAttributeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    userId: string | number,\n    customAttributeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n}\n\nexport class UserCustomAttributes<C extends boolean = false> extends ResourceCustomAttributes<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('users', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, PaginatedRequestOptions, RequestHelper } from '../infrastructure';\n\nexport interface UserEmailSchema extends Record<string, unknown> {\n  id: number;\n  email: string;\n  confirmed_at: string;\n}\n\nconst url = (userId?: number) =>\n  userId ? `users/${encodeURIComponent(userId)}/emails` : 'user/emails';\n\nexport class UserEmails<C extends boolean = false> extends BaseService<C> {\n  all({ userId, ...options }: { userId?: number } & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<UserEmailSchema[]>()(this, url(userId), options);\n  }\n\n  add(email: string, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    return RequestHelper.post<UserEmailSchema>()(this, url(userId), {\n      email,\n      ...options,\n    });\n  }\n\n  show(emailId: number, options?: BaseRequestOptions) {\n    const eId = encodeURIComponent(emailId);\n\n    return RequestHelper.get<UserEmailSchema>()(this, `user/emails/${eId}`, options);\n  }\n\n  remove(emailId: number, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    const eId = encodeURIComponent(emailId);\n\n    return RequestHelper.del()(this, `${url(userId)}/${eId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\ntype ImpersonationTokenScope = 'api' | 'read_user';\ntype ImpersonationTokenState = 'all' | 'active' | 'inactive';\n\nexport interface UserImpersonationTokenSchema extends Record<string, unknown> {\n  active: boolean;\n  user_id: number;\n  scopes?: string[];\n  revoked: boolean;\n  name: string;\n  id: number;\n  created_at: string;\n  impersonation: boolean;\n  expires_at: string;\n}\n\nexport class UserImpersonationTokens<C extends boolean = false> extends BaseService<C> {\n  all(userId: number, options?: { state?: ImpersonationTokenState } & PaginatedRequestOptions) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.get<UserImpersonationTokenSchema[]>()(\n      this,\n      `users/${uId}/impersonation_tokens`,\n      options,\n    );\n  }\n\n  // TODO: change required params\n  add(\n    userId: number,\n    name: string,\n    scopes: ImpersonationTokenScope,\n    expiresAt: string,\n    options?: Sudo,\n  ) {\n    const uId = encodeURIComponent(userId);\n\n    return RequestHelper.post<UserImpersonationTokenSchema>()(\n      this,\n      `users/${uId}/impersonation_tokens`,\n      {\n        name,\n        expiresAt,\n        scopes,\n        ...options,\n      },\n    );\n  }\n\n  show(userId: number, tokenId: number, options?: Sudo) {\n    const [uId, tId] = [userId, tokenId].map(encodeURIComponent);\n\n    return RequestHelper.get<UserImpersonationTokenSchema>()(\n      this,\n      `users/${uId}/impersonation_tokens/${tId}`,\n      options,\n    );\n  }\n\n  revoke(userId: number, tokenId: number, options?: Sudo) {\n    const [uId, tId] = [userId, tokenId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `users/${uId}/impersonation_tokens/${tId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, PaginatedRequestOptions, RequestHelper } from '../infrastructure';\n\nexport interface UserSSHKeySchema extends Record<string, unknown> {\n  id: number;\n  key: string;\n  title: string;\n  created_at: string;\n}\n\nconst url = (userId?: number) =>\n  userId ? `users/${encodeURIComponent(userId)}/keys` : 'user/keys';\n\nexport class UserSSHKeys<C extends boolean = false> extends BaseService<C> {\n  all({ userId, ...options }: { userId?: number } & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<UserSSHKeySchema[]>()(this, url(userId), options);\n  }\n\n  create(\n    title: string,\n    key: string,\n    { userId, ...options }: { userId?: number } & BaseRequestOptions = {},\n  ) {\n    return RequestHelper.post<UserSSHKeySchema>()(this, url(userId), {\n      title,\n      key,\n      ...options,\n    });\n  }\n\n  show(keyId: number, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.get<UserSSHKeySchema>()(this, `${url(userId)}/${kId}`, options);\n  }\n\n  remove(keyId: number, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.del()(this, `${url(userId)}/${kId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, PaginatedRequestOptions, RequestHelper } from '../infrastructure';\n\nexport interface UserGPGKeySchema extends Record<string, unknown> {\n  id: number;\n  key: string;\n  created_at: string;\n}\n\nconst url = (userId?: number) =>\n  userId ? `users/${encodeURIComponent(userId)}/gpg_keys` : 'user/gpg_keys';\n\nexport class UserGPGKeys<C extends boolean = false> extends BaseService<C> {\n  all({ userId, ...options }: { userId?: number } & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<UserGPGKeySchema[]>()(this, url(userId), options);\n  }\n\n  add(key: string, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    return RequestHelper.post<UserGPGKeySchema>()(this, url(userId), {\n      key,\n      ...options,\n    });\n  }\n\n  show(keyId: number, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.get<UserGPGKeySchema>()(this, `${url(userId)}/${kId}`, options);\n  }\n\n  remove(keyId: number, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.del()(this, `${url(userId)}/${kId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { CommitSchema } from './Commits';\nimport { PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface BranchSchema extends Record<string, unknown> {\n  name: string;\n  merged: boolean;\n  protected: boolean;\n  default: boolean;\n  developers_can_push: boolean;\n  developers_can_merge: boolean;\n  can_push: boolean;\n  web_url: string;\n  commit: Omit<CommitSchema, 'web_url' | 'created_at'>;\n}\n\nexport class Branches<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<BranchSchema[]>()(\n      this,\n      `projects/${pId}/repository/branches`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, branchName: string, ref: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n    const branchKey = this.url.includes('v3') ? 'branchName' : 'branch';\n\n    return RequestHelper.post<BranchSchema>()(this, `projects/${pId}/repository/branches`, {\n      [branchKey]: branchName,\n      ref,\n      ...options,\n    });\n  }\n\n  remove(projectId: string | number, branchName: string, options?: Sudo) {\n    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/repository/branches/${bName}`, options);\n  }\n\n  show(projectId: string | number, branchName: string, options?: Sudo) {\n    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);\n\n    return RequestHelper.get<BranchSchema>()(\n      this,\n      `projects/${pId}/repository/branches/${bName}`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { MergeRequestSchema } from './MergeRequests';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface CommitAction {\n  /** The action to perform */\n  action: 'create' | 'delete' | 'move' | 'update';\n  /** Full path to the file. Ex. lib/class.rb */\n  filePath: string;\n  /** Original full path to the file being moved.Ex.lib / class1.rb */\n  previousPath?: string;\n  /** File content, required for all except delete. Optional for move */\n  content?: string;\n  /** text or base64. text is default. */\n  encoding?: string;\n  /** Last known file commit id. Will be only considered in update, move and delete actions. */\n  lastCommitId?: string;\n}\n\n// Response structures\nexport interface CommitSchema extends Record<string, unknown> {\n  id: string;\n  short_id: string;\n  created_at: Date;\n  parent_ids?: string[];\n  title: string;\n  message: string;\n  author_name: string;\n  author_email: string;\n  authored_date?: Date;\n  committer_name?: string;\n  committer_email?: string;\n  committed_date?: Date;\n  web_url: string;\n}\n\nexport interface CommitExtendedSchema extends CommitSchema {\n  last_pipeline: {\n    id: number;\n    ref: string;\n    sha: string;\n    status: string;\n  };\n  stats: {\n    additions: number;\n    deletions: number;\n    total: number;\n  };\n  status: string;\n}\n\nexport interface GPGSignatureSchema extends Record<string, unknown> {\n  signature_type: 'PGP';\n  verification_status: 'verified' | 'unverified';\n  gpg_key_id: number;\n  gpg_key_primary_keyid: string;\n  gpg_key_user_name: string;\n  gpg_key_user_email: string;\n  gpg_key_subkey_id?: number;\n  commit_source: string;\n}\n\nexport interface X509SignatureSchema extends Record<string, unknown> {\n  signature_type: 'X509';\n  verification_status: 'verified' | 'unverified';\n  x509_certificate: {\n    id: number;\n    subject: string;\n    subject_key_identifier: string;\n    email: string;\n    serial_number: string;\n    certificate_status: string;\n    x509_issuer: {\n      id: number;\n      subject: string;\n      subject_key_identifier: string;\n      crl_url: string;\n    };\n  };\n  commit_source: string;\n}\n\nexport interface MissingSignatureSchema extends Record<string, unknown> {\n  message: string;\n}\n\nexport type CommitSignatureSchema =\n  | GPGSignatureSchema\n  | X509SignatureSchema\n  | MissingSignatureSchema;\n\nexport interface CommentSchema extends Record<string, unknown> {\n  note: string;\n  line_type: 'new' | 'old';\n  path: string;\n  line: number;\n  author: Omit<UserSchema, 'created_at'>;\n}\n\nexport interface CommitDiffSchema extends Record<string, unknown> {\n  diff: string;\n  new_path: string;\n  old_path: string;\n  a_mode?: string;\n  b_mode: string;\n  new_file: boolean;\n  renamed_file: boolean;\n  deleted_file: boolean;\n}\n\nexport interface CommitStatusSchema extends Record<string, unknown> {\n  status: string;\n  created_at: string;\n  started_at?: string;\n  name: string;\n  allow_failure: boolean;\n  author: Omit<UserSchema, 'created_at'>;\n  description?: string;\n  sha: string;\n  target_url: string;\n  finished_at?: string;\n  id: number;\n  ref: string;\n}\n\nexport interface CommitReferenceSchema extends Record<string, unknown> {\n  type: 'branch' | 'tag' | 'all';\n  name: string;\n}\n\nexport class Commits<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommitSchema[]>()(this, `projects/${pId}/repository/commits`, options);\n  }\n\n  cherryPick(projectId: string | number, sha: string, branch: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<CommitSchema>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/cherry_pick`,\n      {\n        branch,\n        ...options,\n      },\n    );\n  }\n\n  comments(projectId: string | number, sha: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommentSchema[]>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/comments`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    branch: string,\n    message: string,\n    actions: CommitAction[] = [],\n    options?: BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<CommitExtendedSchema>()(this, `projects/${pId}/repository/commits`, {\n      branch,\n      commitMessage: message,\n      actions,\n      ...options,\n    });\n  }\n\n  createComment(\n    projectId: string | number,\n    sha: string,\n    note: string,\n    options?: BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<CommentSchema>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/comments`,\n      {\n        note,\n        ...options,\n      },\n    );\n  }\n\n  diff(projectId: string | number, sha: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommitDiffSchema>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/diff`,\n      options,\n    );\n  }\n\n  editStatus(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<CommitStatusSchema>()(\n      this,\n      `projects/${pId}/statuses/${sha}`,\n      options,\n    );\n  }\n\n  references(projectId: string | number, sha: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommitReferenceSchema[]>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/refs`,\n      options,\n    );\n  }\n\n  revert(projectId: string | number, sha: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<CommitSchema>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/revert`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommitExtendedSchema>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}`,\n      options,\n    );\n  }\n\n  statuses(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommitStatusSchema[]>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/statuses`,\n      options,\n    );\n  }\n\n  mergeRequests(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/merge_requests`,\n      options,\n    );\n  }\n\n  signature(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommitSignatureSchema>()(\n      this,\n      `projects/${pId}/repository/commits/${sha}/signature`,\n      options,\n    );\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions, DiscussionSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface CommitDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    commitId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    commitId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class CommitDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'repository/commits', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\nexport interface TagSchema extends Record<string, unknown> {\n  name: string;\n  path: string;\n  location: string;\n  revision: string;\n  short_revision: string;\n  digest: string;\n  created_at: string;\n  total_size: number;\n}\n\nexport interface RepositorySchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  path: string;\n  project_id: number;\n  location: string;\n  created_at: string;\n  cleanup_policy_started_at: string;\n  tags_count?: number;\n  tags?: Pick<TagSchema, 'name' | 'path' | 'location'>[];\n}\n\nexport class ContainerRegistry<C extends boolean = false> extends BaseService<C> {\n  projectRepositories(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<Omit<RepositorySchema, 'tags' | 'tags_count'>[]>()(\n      this,\n      `projects/${pId}/registry/repositories`,\n      options,\n    );\n  }\n\n  groupRepositories(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<Omit<RepositorySchema, 'tags' | 'tags_count'>[]>()(\n      this,\n      `groups/${pId}/registry/repositories`,\n      options,\n    );\n  }\n\n  showRepository(projectId: string | number, repositoryId: number, options?: Sudo) {\n    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);\n\n    return RequestHelper.get<RepositorySchema>()(\n      this,\n      `projects/${pId}/registry/repositories/${rId}`,\n      options,\n    );\n  }\n\n  tags(projectId: string | number, repositoryId: number, options?: PaginatedRequestOptions) {\n    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);\n\n    return RequestHelper.get<Pick<TagSchema, 'name' | 'path' | 'location'>[]>()(\n      this,\n      `projects/${pId}/registry/repositories/${rId}/tags`,\n      options,\n    );\n  }\n\n  removeRepository(projectId: string | number, repositoryId: number, options?: Sudo) {\n    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/registry/repositories/${rId}`, options);\n  }\n\n  removeTag(projectId: string | number, repositoryId: number, tagName: string, options?: Sudo) {\n    const [pId, rId, tId] = [projectId, repositoryId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.del()(\n      this,\n      `projects/${pId}/registry/repositories/${rId}/tags/${tId}`,\n      options,\n    );\n  }\n\n  removeTags(\n    projectId: string | number,\n    repositoryId: number,\n    nameRegexDelete: string,\n    options?: Sudo & { nameRegexKeep: string; keepN: string; olderThan: string },\n  ) {\n    const [pId, rId] = [projectId, repositoryId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/registry/repositories/${rId}/tags`, {\n      nameRegexDelete,\n      ...options,\n    });\n  }\n\n  showTag(projectId: string | number, repositoryId: number, tagName: string, options?: Sudo) {\n    const [pId, rId, tId] = [projectId, repositoryId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.get<TagSchema>()(\n      this,\n      `projects/${pId}/registry/repositories/${rId}/tags/${tId}`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\nimport { CommitSchema } from './Commits';\nimport { PipelineSchema } from './Pipelines';\nimport { UserSchema } from './Users';\nimport { RunnerSchema } from './Runners';\nimport { EnvironmentSchema } from './Environments';\nimport { MergeRequestSchema } from './MergeRequests';\n\nexport type DeploymentStatus = 'created' | 'running' | 'success' | 'failed' | 'canceled';\n\nexport interface DeployableSchema {\n  id: number;\n  ref: string;\n  name: string;\n  runner?: RunnerSchema;\n  stage?: string;\n  started_at?: Date;\n  status?: DeploymentStatus;\n  tag: boolean;\n  commit?: CommitSchema;\n  coverage?: string;\n  created_at?: Date;\n  finished_at?: Date;\n  user?: UserSchema;\n  pipeline?: PipelineSchema;\n}\n\nexport type DeploymentSchema = {\n  id: number;\n  iid: number;\n  ref: string;\n  sha: string;\n  user: UserSchema;\n  created_at: string;\n  updated_at: string;\n  status: DeploymentStatus;\n  deployable: DeployableSchema;\n  environment: EnvironmentSchema;\n};\n\nexport class Deployments<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<DeploymentSchema[]>()(this, `projects/${pId}/deployments`, options);\n  }\n\n  create(\n    projectId: string | number,\n    environment: string,\n    sha: string,\n    ref: string,\n    tag: string,\n    status: DeploymentStatus,\n    options?: Sudo,\n  ) {\n    const [pId] = [projectId].map(encodeURIComponent);\n\n    return RequestHelper.post<DeploymentSchema>()(this, `projects/${pId}/deployments`, {\n      environment,\n      sha,\n      ref,\n      tag,\n      status,\n      ...options,\n    });\n  }\n\n  edit(projectId: string | number, deploymentId: number, status: DeploymentStatus, options?: Sudo) {\n    const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);\n\n    return RequestHelper.put<DeploymentSchema>()(this, `projects/${pId}/deployments/${dId}`, {\n      status,\n      ...options,\n    });\n  }\n\n  show(projectId: string | number, deploymentId: number, options?: Sudo) {\n    const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);\n\n    return RequestHelper.get<DeploymentSchema>()(\n      this,\n      `projects/${pId}/deployments/${dId}`,\n      options,\n    );\n  }\n\n  mergeRequests(projectId: string | number, deploymentId: number, options?: Sudo) {\n    const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);\n\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      `projects/${pId}/deployments/${dId}/merge_requests`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  RequestHelper,\n  Sudo,\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n} from '../infrastructure';\n\nexport interface DeployKey extends Record<string, unknown> {\n  id: number;\n  title: string;\n  key: string;\n  can_push?: boolean;\n  created_at: string;\n}\n\nexport class DeployKeys<C extends boolean = false> extends BaseService<C> {\n  add(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<DeployKey>()(this, `projects/${pId}/deploy_keys`, options);\n  }\n\n  all({ projectId, ...options }: { projectId?: string | number } & PaginatedRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = `projects/${encodeURIComponent(projectId)}/deploy_keys`;\n    } else {\n      url = 'deploy_keys';\n    }\n\n    return RequestHelper.get<Omit<DeployKey, 'can_push'>[]>()(this, url, options);\n  }\n\n  edit(projectId: string | number, keyId: number, options?: BaseRequestOptions) {\n    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.put<DeployKey>()(this, `projects/${pId}/deploy_keys/${kId}`, options);\n  }\n\n  enable(projectId: string | number, keyId: number, options?: Sudo) {\n    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.post<Omit<DeployKey, 'can_push'>>()(\n      this,\n      `projects/${pId}/deploy_keys/${kId}/enable`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, keyId: number, options?: Sudo) {\n    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/deploy_keys/${kId}`, options);\n  }\n\n  show(projectId: string | number, keyId: number, options?: Sudo) {\n    const [pId, kId] = [projectId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.get<DeployKey>()(this, `projects/${pId}/deploy_keys/${kId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { DeploymentSchema, DeployableSchema } from './Deployments';\nimport { ProjectSchema } from './Projects';\n\nexport interface EnvironmentSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  slug?: string;\n  external_url?: string;\n  project?: ProjectSchema;\n  state?: string;\n  last_deployment?: DeploymentSchema;\n  deployable?: DeployableSchema;\n}\n\nexport class Environments<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>[]>()(\n      this,\n      `projects/${pId}/environments`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, environmentId: number, options?: Sudo) {\n    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);\n    return RequestHelper.get<EnvironmentSchema>()(\n      this,\n      `projects/${pId}/environments/${eId}`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>>()(\n      this,\n      `projects/${pId}/environments`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, environmentId: number, options?: BaseRequestOptions) {\n    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);\n\n    return RequestHelper.put<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>>()(\n      this,\n      `projects/${pId}/environments/${eId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, environmentId: number, options?: Sudo) {\n    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/environments/${eId}`, options);\n  }\n\n  stop(projectId: string | number, environmentId: number, options?: Sudo) {\n    const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);\n\n    return RequestHelper.post<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>>()(\n      this,\n      `projects/${pId}/environments/${eId}/stop`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, RequestHelper, Camelize } from '../infrastructure';\n\nexport interface FreezePeriodSchema extends Record<string, unknown> {\n  id: number;\n  freeze_start: string;\n  freeze_end: string;\n  cron_timezone: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class FreezePeriods<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<FreezePeriodSchema[]>()(\n      this,\n      `projects/${pId}/freeze_periods`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, freezePeriodId: number, options?: BaseRequestOptions) {\n    const [pId, fId] = [projectId, freezePeriodId].map(encodeURIComponent);\n\n    return RequestHelper.get<FreezePeriodSchema>()(\n      this,\n      `projects/${pId}/freeze_periods/${fId}`,\n      options,\n    );\n  }\n\n  create(\n    projectId: number | string,\n    freezeStart: string,\n    freezeEnd: string,\n    options?: Camelize<Pick<FreezePeriodSchema, 'cron_timezone'>> & BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<FreezePeriodSchema>()(this, `projects/${pId}/freeze_periods`, {\n      freezeStart,\n      freezeEnd,\n      ...options,\n    });\n  }\n\n  edit(\n    projectId: number | string,\n    freezePeriodId: number,\n    options?: Camelize<Omit<FreezePeriodSchema, 'id' | 'created_at' | 'updated_at'>> &\n      BaseRequestOptions,\n  ) {\n    const [pId, fId] = [projectId, freezePeriodId].map(encodeURIComponent);\n\n    return RequestHelper.put<FreezePeriodSchema>()(\n      this,\n      `projects/${pId}/freeze_periods/${fId}`,\n      options,\n    );\n  }\n\n  delete(projectId: number | string, freezePeriodId: number, options?: BaseRequestOptions) {\n    const [pId, fId] = [projectId, freezePeriodId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/freeze_periods/${fId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { MergeRequestSchema } from './MergeRequests';\nimport { MilestoneSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\ntype ProjectOrGroup = { projectId?: string | number; groupId?: string | number };\n\nexport interface TimeStatsSchema extends Record<string, unknown> {\n  human_time_estimate?: string;\n  human_total_time_spent?: string;\n  time_estimate?: number;\n  total_time_spent?: number;\n}\n\nexport interface IssueSchema extends Record<string, unknown> {\n  state: string;\n  description: string;\n  weight?: number;\n  health_status?: string;\n  author: Omit<UserSchema, 'created_at'>;\n  milestone: MilestoneSchema;\n  project_id: number;\n  assignees?: Omit<UserSchema, 'created_at'>[];\n  updated_at: string;\n  closed_at?: string;\n  closed_by?: string;\n  id: number;\n  title: string;\n  created_at: string;\n  moved_to_id?: string;\n  iid: number;\n  labels?: string[];\n  upvotes: number;\n  downvotes: number;\n  merge_requests_count: number;\n  user_notes_count: number;\n  due_date: string;\n  web_url: string;\n  references: {\n    short: string;\n    relative: string;\n    full: string;\n  };\n  time_stats: TimeStatsSchema;\n  has_tasks: boolean;\n  task_status: string;\n  confidential: boolean;\n  discussion_locked: boolean;\n  _links: {\n    self: string;\n    notes: string;\n    award_emoji: string;\n    project: string;\n  };\n  task_completion_status: {\n    count: number;\n    completed_count: number;\n  };\n  subscribed: boolean;\n  epic?: {\n    id: number;\n    iid: number;\n    title: string;\n    url: string;\n    group_id: number;\n  };\n}\n\nexport class Issues<C extends boolean = false> extends BaseService<C> {\n  addSpentTime(projectId: string | number, issueIid: number, duration: string, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/add_spent_time`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  addTimeEstimate(projectId: string | number, issueIid: number, duration: string, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/time_estimate`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  all({ projectId, groupId, ...options }: ProjectOrGroup & PaginatedRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = `projects/${encodeURIComponent(projectId)}/issues`;\n    } else if (groupId) {\n      url = `groups/${encodeURIComponent(groupId)}/issues`;\n    } else {\n      url = 'issues';\n    }\n\n    return RequestHelper.get<Omit<IssueSchema, 'epic'>[]>()(this, url, options);\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<IssueSchema>()(this, `projects/${pId}/issues`, options);\n  }\n\n  closedBy(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      `projects/${pId}/issues/${iId}/closed_by`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.put<IssueSchema>()(this, `projects/${pId}/issues/${iId}`, options);\n  }\n\n  // TODO move\n  link(\n    projectId: string | number,\n    issueIId: number,\n    targetProjectId: string | number,\n    targetIssueIId: number,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, iIId] = [projectId, issueIId].map(encodeURIComponent);\n    const [targetPId, targetIId] = [targetProjectId, targetIssueIId].map(encodeURIComponent);\n\n    return RequestHelper.post()(this, `projects/${pId}/issues/${iIId}/links`, {\n      targetProjectId: targetPId,\n      targetIssueIid: targetIId,\n      ...options,\n    });\n  }\n\n  // TODO move\n  links(projectId: string | number, issueIid: number) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.get()(this, `projects/${pId}/issues/${iId}/links`);\n  }\n\n  participants(projectId: string | number, issueIid: number, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.get<Omit<UserSchema, 'created_at'>>()(\n      this,\n      `projects/${pId}/issues/${iId}/participants`,\n      options,\n    );\n  }\n\n  relatedMergeRequests(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.get<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/related_merge_requests`,\n      options,\n    );\n  }\n\n  // TODO move\n  removeLink(\n    projectId: string | number,\n    issueIid: number,\n    issueLinkId: string | number,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, iId, iLinkId] = [projectId, issueIid, issueLinkId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/issues/${iId}/links/${iLinkId}`, {\n      ...options,\n    });\n  }\n\n  remove(projectId: string | number, issueIid: number, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/issues/${iId}`, options);\n  }\n\n  resetSpentTime(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/reset_spent_time`,\n      options,\n    );\n  }\n\n  resetTimeEstimate(projectId: string | number, issueIid: number, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/reset_time_estimate`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, issueIid: number, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.get<IssueSchema>()(this, `projects/${pId}/issues/${iId}`, options);\n  }\n\n  subscribe(projectId: string | number, issueIid: number, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.post<IssueSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/subscribe`,\n      options,\n    );\n  }\n\n  timeStats(projectId: string | number, issueIid: number, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.get<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/time_stats`,\n      options,\n    );\n  }\n\n  unsubscribe(projectId: string | number, issueIid: number, options?: Sudo) {\n    const [pId, iId] = [projectId, issueIid].map(encodeURIComponent);\n\n    return RequestHelper.post<IssueSchema>()(\n      this,\n      `projects/${pId}/issues/${iId}/unsubscribe`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, BaseRequestOptions } from '../infrastructure';\n\ntype ProjectOrGroup = { projectId?: string | number; groupId?: string | number };\n\nexport interface StatisticsSchema extends Record<string, unknown> {\n  statistics: {\n    counts: {\n      all: number;\n      closed: number;\n      opened: number;\n    };\n  };\n}\n\nexport class IssuesStatistics<C extends boolean = false> extends BaseService<C> {\n  all({ projectId, groupId, ...options }: ProjectOrGroup & BaseRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = `projects/${encodeURIComponent(projectId)}/issues_statistics`;\n    } else if (groupId) {\n      url = `groups/${encodeURIComponent(groupId)}/issues_statistics`;\n    } else {\n      url = 'issues_statistics';\n    }\n\n    return RequestHelper.get<StatisticsSchema>()(this, url, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes, NoteSchema } from '../templates';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface IssueNoteSchema extends NoteSchema {\n  attachment?: string;\n  system: boolean;\n  noteable_id: number;\n  noteable_type: string;\n  noteable_iid: number;\n  resolvable: boolean;\n}\n\nexport interface IssueNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    projectId: string | number,\n    issueIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>[]>;\n\n  create(\n    projectId: string | number,\n    issueIId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>>;\n\n  edit(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>>;\n\n  remove(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>>;\n}\n\nexport class IssueNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'issues', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNoteAwardEmojis, AwardEmojiSchema } from '../templates';\nimport { PaginatedRequestOptions, CamelizedRecord, Sudo } from '../infrastructure';\n\nexport interface IssueNoteAwardEmojis<C extends boolean = false>\n  extends ResourceNoteAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class IssueNoteAwardEmojis<C extends boolean = false> extends ResourceNoteAwardEmojis<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('issues', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions, DiscussionSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface IssueDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    issueIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    issueIId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class IssueDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'issues', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAwardEmojis, AwardEmojiSchema } from '../templates';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface IssueAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    issueIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    issueIId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    issueIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class IssueAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('issues', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { CommitSchema } from './Commits';\nimport { RunnerSchema } from './Runners';\nimport { UserSchema } from './Users';\nimport { PipelineSchema } from './Pipelines';\n\nexport type JobScope =\n  | 'created'\n  | 'pending'\n  | 'running'\n  | 'failed'\n  | 'success'\n  | 'canceled'\n  | 'skipped'\n  | 'manual';\n\nexport interface ArtifactSchema extends Record<string, unknown> {\n  file_type: string;\n  size: number;\n  filename: string;\n  file_format?: string;\n}\n\nexport interface JobSchema extends Record<string, unknown> {\n  id: number;\n  status: string;\n  stage: string;\n  name: string;\n  ref: string;\n  tag: boolean;\n  coverage?: string;\n  allow_failure: boolean;\n  created_at: Date;\n  started_at?: Date;\n  finished_at?: Date;\n  duration?: number;\n  user: UserSchema;\n  commit: CommitSchema;\n  pipeline: PipelineSchema;\n  web_url: string;\n  artifacts: ArtifactSchema[];\n  runner: RunnerSchema;\n  artifacts_expire_at?: Date;\n  tag_list?: string[];\n}\n\nexport interface BridgeSchema extends Record<string, unknown> {\n  commit: Pick<\n    CommitSchema,\n    'id' | 'short_id' | 'author_name' | 'author_email' | 'message' | 'title' | 'created_at'\n  >;\n  coverage?: string;\n  allow_failure: boolean;\n  created_at: string;\n  started_at: string;\n  finished_at: string;\n  duration: number;\n  queued_duration: number;\n  id: number;\n  name: string;\n  pipeline: Exclude<PipelineSchema & { project_id: number }, 'user'>;\n  ref: string;\n  stage: string;\n  status: string;\n  tag: boolean;\n  web_url: string;\n  user: UserSchema;\n  downstream_pipeline: Exclude<PipelineSchema, 'user'>;\n}\n\nexport class Jobs<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<JobSchema[]>()(this, `projects/${pId}/jobs`, options);\n  }\n\n  cancel(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.post<JobSchema>()(this, `projects/${pId}/jobs/${jId}/cancel`, options);\n  }\n\n  // TODO move\n  downloadSingleArtifactFile(\n    projectId: string | number,\n    jobId: number,\n    artifactPath: string,\n    { stream = false, ...options }: { stream?: boolean } & BaseRequestOptions = {},\n  ) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    if (stream) {\n      return RequestHelper.stream(\n        this,\n        `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`,\n        options,\n      );\n    }\n    return RequestHelper.get()(\n      this,\n      `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`,\n      options,\n    );\n  }\n\n  // TODO move\n  downloadSingleArtifactFileFromRef(\n    projectId: string | number,\n    ref: string,\n    artifactPath: string,\n    jobName: string,\n    { stream = false, ...options }: { stream?: boolean } & BaseRequestOptions = {},\n  ) {\n    const [pId, rId, name] = [projectId, ref, jobName].map(encodeURIComponent);\n\n    if (stream) {\n      return RequestHelper.stream(\n        this,\n        `projects/${pId}/jobs/artifacts/${rId}/raw/${artifactPath}?job=${name}`,\n        options,\n      );\n    }\n    return RequestHelper.get()(\n      this,\n      `projects/${pId}/jobs/artifacts/${rId}/raw/${artifactPath}?job=${name}`,\n      options,\n    );\n  }\n\n  // TODO move\n  downloadLatestArtifactFile(\n    projectId: string | number,\n    ref: string,\n    jobName: string,\n    { stream = false, ...options }: { stream?: boolean } & BaseRequestOptions = {},\n  ) {\n    const [pId, rId, name] = [projectId, ref, jobName].map(encodeURIComponent);\n\n    if (stream) {\n      return RequestHelper.stream(\n        this,\n        `projects/${pId}/jobs/artifacts/${rId}/download?job=${name}`,\n        options,\n      );\n    }\n    return RequestHelper.get()(\n      this,\n      `projects/${pId}/jobs/artifacts/${rId}/download?job=${name}`,\n      options,\n    );\n  }\n\n  downloadTraceFile(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.get()(this, `projects/${pId}/jobs/${jId}/trace`, options);\n  }\n\n  erase(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.post<JobSchema>()(this, `projects/${pId}/jobs/${jId}/erase`, options);\n  }\n\n  // TODO move\n  eraseArtifacts(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/jobs/${jId}/artifacts`, options);\n  }\n\n  // TODO move\n  keepArtifacts(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.post()(this, `projects/${pId}/jobs/${jId}/artifacts/keep`, options);\n  }\n\n  play(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.post<JobSchema>()(this, `projects/${pId}/jobs/${jId}/play`, options);\n  }\n\n  retry(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.post<JobSchema>()(this, `projects/${pId}/jobs/${jId}/retry`, options);\n  }\n\n  show(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.get<JobSchema>()(this, `projects/${pId}/jobs/${jId}`, options);\n  }\n\n  showPipelineJobs(\n    projectId: string | number,\n    pipelineId: number,\n    options?: { scope?: JobScope } & Sudo,\n  ) {\n    const [pId, ppId] = [projectId, pipelineId].map(encodeURIComponent);\n\n    return RequestHelper.get<JobSchema>()(this, `projects/${pId}/pipelines/${ppId}/jobs`, options);\n  }\n\n  showPipelineBridges(\n    projectId: string | number,\n    pipelineId: number,\n    options?: { scope?: JobScope } & Sudo,\n  ) {\n    const [pId, ppId] = [projectId, pipelineId].map(encodeURIComponent);\n\n    return RequestHelper.get<BridgeSchema>()(\n      this,\n      `projects/${pId}/pipelines/${ppId}/bridges`,\n      options,\n    );\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\nimport { ResourceLabels, LabelSchema } from '../templates';\n\nexport interface Labels<C extends boolean = false> extends ResourceLabels<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>[]>;\n\n  create(\n    projectId: string | number,\n    labelName: string,\n    color: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  edit(\n    projectId: string | number,\n    labelId: number | string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  remove(projectId: string | number, labelId: number | string, options?: Sudo): Promise<void>;\n\n  subscribe(\n    projectId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  unsubscribe(\n    projectId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n}\n\nexport class Labels<C extends boolean = false> extends ResourceLabels<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { IssueSchema } from './Issues';\nimport { CommitSchema, CommitDiffSchema } from './Commits';\nimport { MilestoneSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface AcceptMergeRequestOptions {\n  mergeCommitMessage?: string;\n  squashCommitMessage?: string;\n  squash?: boolean;\n  shouldRemoveSourceBranch?: boolean;\n  mergeWhenPipelineSucceeds?: boolean;\n  sha?: string;\n}\n\nexport interface ShowMergeRequestOptions {\n  renderHtml?: boolean;\n  includeDivergedCommitsCount?: true;\n  includeRebaseInProgress?: boolean;\n}\n\nexport interface CreateMergeRequestOptions {\n  assigneeId?: number;\n  description?: string;\n  targetProjectId?: number;\n  labels?: string | Array<string>;\n  milestoneId?: number;\n  removeSourceBranch?: boolean;\n  allowCollaboration?: boolean;\n  allowMaintainerToPush?: boolean;\n  squash?: boolean;\n}\n\nexport interface UpdateMergeRequestOptions {\n  targetBranch?: number;\n  title?: string;\n  assigneeId?: number;\n  milestoneId?: number;\n  labels?: string | Array<string>;\n  description?: string;\n  stateEvent?: string;\n  removeSourceBranch?: boolean;\n  squash?: boolean;\n  discussionLocked?: boolean;\n  allowCollaboration?: boolean;\n  allowMaintainerToPush?: boolean;\n}\n\nexport interface AllMergeRequestsOptions {\n  state?: 'opened' | 'closed' | 'locked' | 'merged';\n  orderBy?: 'created_at' | 'updated_at';\n  sort?: 'asc' | 'desc';\n  milestone?: 'None' | string;\n  view?: string;\n  labels?: string | Array<string>;\n  withLabelsDetails?: boolean;\n  createdAfter?: string;\n  createdBefore?: string;\n  updatedBefore?: string;\n  updatedAfter?: string;\n  scope?: 'created_by_me' | 'assigned_to_me' | 'all';\n  authorId?: number;\n  asigneeId?: number;\n  approverIds?: Array<number>;\n  approvedByIds?: Array<number>;\n  myReactionEmoji?: string;\n  sourceBranch?: string;\n  targetBranch?: string;\n  in?: string;\n  wip?: string;\n}\n\n// Response Schemas\nexport interface ReferenceSchema {\n  short: string;\n  relative: string;\n  full: string;\n}\n\nexport interface TaskCompletionStatusSchema {\n  count: number;\n  completed_count: number;\n}\n\nexport interface PipelineSchema extends Record<string, unknown> {\n  id: number;\n  sha: string;\n  ref: string;\n  status: string;\n}\n\nexport interface TimeStatsSchema extends Record<string, unknown> {\n  time_estimate: number;\n  total_time_spent: number;\n  human_time_estimate: string;\n  human_total_time_spent: string;\n}\n\nexport interface RebaseSchema extends Record<string, unknown> {\n  rebase_in_progress?: boolean;\n  merge_error?: string;\n}\n\nexport interface DiffSchema extends Record<string, unknown> {\n  id: number;\n  head_commit_sha: string;\n  base_commit_sha: string;\n  start_commit_sha: string;\n  created_at: string;\n  merge_request_id: number;\n  state: string;\n  real_size: string;\n  commits?: CommitSchema[];\n  diffs?: CommitDiffSchema[];\n}\n\nexport interface MergeRequestSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  project_id: number;\n  title: string;\n  description: string;\n  state: string;\n  merged_by: Omit<UserSchema, 'created_at'>;\n  merged_at: string;\n  closed_by?: string;\n  closed_at?: string;\n  created_at: string;\n  updated_at: string;\n  target_branch: string;\n  source_branch: string;\n  upvotes: number;\n  downvotes: number;\n  author: Omit<UserSchema, 'created_at'>;\n  assignee: Omit<UserSchema, 'created_at'>;\n  assignees?: Omit<UserSchema, 'created_at'>[];\n  reviewers?: Omit<UserSchema, 'created_at'>[];\n  source_project_id: number;\n  target_project_id: number;\n  labels?: string[];\n  work_in_progress: boolean;\n  milestone: MilestoneSchema;\n  merge_when_pipeline_succeeds: boolean;\n  merge_status: string;\n  sha: string;\n  merge_commit_sha?: string;\n  squash_commit_sha?: string;\n  user_notes_count: number;\n  discussion_locked?: string;\n  should_remove_source_branch: boolean;\n  force_remove_source_branch: boolean;\n  web_url: string;\n  references: ReferenceSchema;\n  time_stats: TimeStatsSchema;\n  squash: boolean;\n  task_completion_status: TaskCompletionStatusSchema;\n  has_conflicts: boolean;\n  blocking_discussions_resolved: boolean;\n  changes?: CommitDiffSchema[];\n}\n\nexport class MergeRequests<C extends boolean = false> extends BaseService<C> {\n  accept(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: AcceptMergeRequestOptions & BaseRequestOptions,\n  ) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.put<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/merge`,\n      options,\n    );\n  }\n\n  addSpentTime(\n    projectId: string | number,\n    mergerequestIid: number,\n    duration: string,\n    options?: Sudo,\n  ) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/add_spent_time`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  addTimeEstimate(\n    projectId: string | number,\n    mergerequestIid: number,\n    duration: string,\n    options?: Sudo,\n  ) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/time_estimate`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  all({\n    projectId,\n    groupId,\n    ...options\n  }: { projectId?: string | number; groupId?: string | number } & AllMergeRequestsOptions &\n    PaginatedRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = `projects/${encodeURIComponent(projectId)}/merge_requests`;\n    } else if (groupId) {\n      url = `groups/${encodeURIComponent(groupId)}/merge_requests`;\n    } else {\n      url = 'merge_requests';\n    }\n\n    return RequestHelper.get<MergeRequestSchema[]>()(this, url, options);\n  }\n\n  cancelOnPipelineSucess(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.put<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/cancel_merge_when_pipeline_succeeds`,\n      options,\n    );\n  }\n\n  changes(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/changes`,\n      options,\n    );\n  }\n\n  closesIssues(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<IssueSchema[]>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/closes_issues`,\n      options,\n    );\n  }\n\n  commits(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<CommitSchema[]>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/commits`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    sourceBranch: string,\n    targetBranch: string,\n    title: string,\n    options?: CreateMergeRequestOptions & BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<MergeRequestSchema>()(this, `projects/${pId}/merge_requests`, {\n      sourceBranch,\n      targetBranch,\n      title,\n      ...options,\n    });\n  }\n\n  edit(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: UpdateMergeRequestOptions & BaseRequestOptions,\n  ) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.put<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}`,\n      options,\n    );\n  }\n\n  participants(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<Omit<UserSchema, 'created_at'>[]>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/participants`,\n      options,\n    );\n  }\n\n  pipelines(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<PipelineSchema[]>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/pipelines`,\n      options,\n    );\n  }\n\n  rebase(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.put<RebaseSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/rebase`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/merge_requests/${mIid}`, options);\n  }\n\n  resetSpentTime(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/reset_spent_time`,\n      options,\n    );\n  }\n\n  resetTimeEstimate(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/reset_time_estimate`,\n      options,\n    );\n  }\n\n  show(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: ShowMergeRequestOptions & BaseRequestOptions,\n  ) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}`,\n      options,\n    );\n  }\n\n  subscribe(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/subscribe`,\n      options,\n    );\n  }\n\n  timeStats(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<TimeStatsSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/time_stats`,\n      options,\n    );\n  }\n\n  version(projectId: string | number, mergerequestIid: number, versionId: number, options?: Sudo) {\n    const [pId, mIid, vId] = [projectId, mergerequestIid, versionId].map(encodeURIComponent);\n\n    return RequestHelper.get<DiffSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/versions/${vId}`,\n      options,\n    );\n  }\n\n  versions(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get<DiffSchema[]>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/versions`,\n      options,\n    );\n  }\n\n  unsubscribe(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post<MergeRequestSchema>()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/unsubscribe`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\n// TODO: This one is has changed quite a bit, requires a deeper look\n// https://docs.gitlab.com/ee/api/merge_request_approvals.html#project-level-mr-approvals\n\nexport interface MergeRequestApprovalSchema extends Record<string, unknown> {\n  approvals_before_merge: number;\n  reset_approvals_on_push: boolean;\n  disable_overriding_approvers_per_merge_request: boolean;\n  merge_requests_author_approval: boolean;\n  merge_requests_disable_committers_approval: boolean;\n  require_password_to_approve: boolean;\n}\n\nexport type ApprovalRulesRequestOptions = {\n  userIds?: number[];\n  groupIds?: number[];\n  protectedBranchIds?: number[];\n};\n\nexport class MergeRequestApprovals<C extends boolean = false> extends BaseService<C> {\n  addApprovalRule(\n    projectId: string | number,\n    name: string,\n    approvalsRequired: number,\n    {\n      mergerequestIid,\n      ...options\n    }: { mergerequestIid?: number } & ApprovalRulesRequestOptions & BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    let url: string;\n\n    if (mergerequestIid) {\n      const mIid = encodeURIComponent(mergerequestIid);\n      url = `projects/${pId}/merge_requests/${mIid}/approval_rules`;\n    } else {\n      url = `projects/${pId}/approval_rules`;\n    }\n\n    return RequestHelper.post()(this, url, { name, approvalsRequired, ...options });\n  }\n\n  approvalRules(\n    projectId: string | number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    let url: string;\n\n    if (mergerequestIid) {\n      const mIid = encodeURIComponent(mergerequestIid);\n      url = `projects/${pId}/merge_requests/${mIid}/approval_rules`;\n    } else {\n      url = `projects/${pId}/approval_rules`;\n    }\n    return RequestHelper.get()(this, url, options);\n  }\n\n  approvals(\n    projectId: string | number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    let url: string;\n\n    if (mergerequestIid) {\n      const mIid = encodeURIComponent(mergerequestIid);\n      url = `projects/${pId}/merge_requests/${mIid}/approvals`;\n    } else {\n      url = `projects/${pId}/approvals`;\n    }\n\n    return RequestHelper.get()(this, url, options);\n  }\n\n  approvalState(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: { sha?: string } & BaseRequestOptions,\n  ) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.get()(\n      this,\n      `projects/${pId}/merge_requests/${mIid}/approval_state`,\n      options,\n    );\n  }\n\n  approve(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: { sha?: string } & BaseRequestOptions,\n  ) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/approve`, options);\n  }\n\n  approvers(\n    projectId: string | number,\n    approverIds: number[],\n    approverGroupIds: (string | number)[],\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    let url: string;\n\n    if (mergerequestIid) {\n      const mIid = encodeURIComponent(mergerequestIid);\n      url = `projects/${pId}/merge_requests/${mIid}/approvers`;\n    } else {\n      url = `projects/${pId}/approvers`;\n    }\n\n    return RequestHelper.put()(this, url, { approverIds, approverGroupIds, ...options });\n  }\n\n  editApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    name: string,\n    approvalsRequired: number,\n    {\n      mergerequestIid,\n      ...options\n    }: { mergerequestIid?: number } & ApprovalRulesRequestOptions & BaseRequestOptions = {},\n  ) {\n    const [pId, aId] = [projectId, approvalRuleId].map(encodeURIComponent);\n\n    let url: string;\n\n    if (mergerequestIid) {\n      const mIid = encodeURIComponent(mergerequestIid);\n      url = `projects/${pId}/merge_requests/${mIid}/approval_rules/${aId}`;\n    } else {\n      url = `projects/${pId}/approval_rules/${aId}`;\n    }\n\n    return RequestHelper.put()(this, url, { name, approvalsRequired, ...options });\n  }\n\n  editApprovals(\n    projectId: string | number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    let url: string;\n\n    if (mergerequestIid) {\n      const mIid = encodeURIComponent(mergerequestIid);\n      url = `projects/${pId}/merge_requests/${mIid}/approvals`;\n    } else {\n      url = `projects/${pId}/approvals`;\n    }\n\n    return RequestHelper.post()(this, url, options);\n  }\n\n  removeApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ) {\n    const [pId, aId] = [projectId, approvalRuleId].map(encodeURIComponent);\n\n    let url: string;\n\n    if (mergerequestIid) {\n      const mIid = encodeURIComponent(mergerequestIid);\n      url = `projects/${pId}/merge_requests/${mIid}/approval_rules/${aId}`;\n    } else {\n      url = `projects/${pId}/approval_rules/${aId}`;\n    }\n\n    return RequestHelper.del()(this, url, options);\n  }\n\n  unapprove(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    const [pId, mIid] = [projectId, mergerequestIid].map(encodeURIComponent);\n\n    return RequestHelper.post()(this, `projects/${pId}/merge_requests/${mIid}/unapprove`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAwardEmojis, AwardEmojiSchema } from '../templates';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface MergeRequestAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    mergerequestIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    mergerequestIId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    mergerequestIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    mergerequestIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class MergeRequestAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('merge_requests', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions, DiscussionSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface MergeRequestDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    mergerequestId: string | number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    issueId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    mergerequestId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    mergerequestId: string | number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & ({ body: string } | { resolved: boolean }),\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    issueId: string | number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    mergerequestId: string | number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class MergeRequestDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'merge_requests', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes, NoteSchema } from '../templates';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface MergeRequestNoteSchema extends NoteSchema {\n  attachment?: string;\n  system: boolean;\n  noteable_id: number;\n  noteable_type: string;\n  noteable_iid: number;\n  resolvable: boolean;\n}\n\nexport interface MergeRequestNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    projectId: string | number,\n    mergerequestId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>[]>;\n\n  create(\n    projectId: string | number,\n    mergerequestId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>>;\n\n  edit(\n    projectId: string | number,\n    mergerequestId: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>>;\n\n  remove(\n    projectId: string | number,\n    mergerequestId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    mergerequestIdepicId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>>;\n}\n\nexport class MergeRequestNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'merge_requests', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { PipelineSchema } from './Pipelines';\nimport { PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\n// TODO: Add group support\n\nexport interface PackageSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  version: string;\n  package_type: string;\n  created_at: string;\n}\n\nexport interface PackageFileSchema extends Record<string, unknown> {\n  id: number;\n  package_id: number;\n  created_at: string;\n  file_name: string;\n  size: number;\n  file_md5: string;\n  file_sha1: string;\n  pipelines?: PipelineSchema[];\n}\n\nexport class Packages<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<PackageSchema[]>()(this, `projects/${pId}/packages`, options);\n  }\n\n  remove(projectId: string | number, packageId: number, options?: Sudo) {\n    const [pId, pkId] = [projectId, packageId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/packages/${pkId}`, options);\n  }\n\n  show(projectId: string | number, packageId: number, options?: Sudo) {\n    const [pId, pkId] = [projectId, packageId].map(encodeURIComponent);\n\n    return RequestHelper.get<PackageSchema>()(this, `projects/${pId}/packages/${pkId}`, options);\n  }\n\n  showFiles(projectId: string | number, packageId: number, options?: Sudo) {\n    const [pId, pkId] = [projectId, packageId].map(encodeURIComponent);\n\n    return RequestHelper.get<PackageFileSchema[]>()(\n      this,\n      `projects/${pId}/packages/${pkId}/package_files`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport type PipelineStatus =\n  | 'created'\n  | 'waiting_for_resource'\n  | 'preparing'\n  | 'pending'\n  | 'running'\n  | 'failed'\n  | 'success'\n  | 'canceled'\n  | 'skipped'\n  | 'manual'\n  | 'scheduled';\n\nexport interface PipelineSchema extends Record<string, unknown> {\n  id: number;\n  status: PipelineStatus;\n  ref: string;\n  sha: string;\n  web_url: string;\n  created_at: string;\n  updated_at: string;\n  user: Pick<UserSchema, 'name' | 'avatar_url'>;\n}\n\nexport interface PipelineExtendedSchema extends PipelineSchema {\n  project_id: number;\n  before_sha: string;\n  tag: boolean;\n  yaml_errors?: string;\n  user: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  started_at?: string;\n  finished_at: string;\n  committed_at?: string;\n  duration?: string;\n  coverage?: string;\n}\n\nexport interface PipelineVariableSchema extends Record<string, unknown> {\n  key: string;\n  variable_type?: string;\n  value: string;\n}\n\n// TODO: Add missing function\n\nexport class Pipelines<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<PipelineSchema[]>()(this, `projects/${pId}/pipelines`, options);\n  }\n\n  create(projectId: string | number, ref: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<PipelineSchema>()(this, `projects/${pId}/pipeline`, {\n      ref,\n      ...options,\n    });\n  }\n\n  delete(projectId: string | number, pipelineId: number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.del()(this, `projects/${pId}/pipelines/${pipelineId}`, options);\n  }\n\n  show(projectId: string | number, pipelineId: number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<PipelineSchema>()(\n      this,\n      `projects/${pId}/pipelines/${pipelineId}`,\n      options,\n    );\n  }\n\n  retry(projectId: string | number, pipelineId: number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<PipelineExtendedSchema>()(\n      this,\n      `projects/${pId}/pipelines/${pipelineId}/retry`,\n      options,\n    );\n  }\n\n  cancel(projectId: string | number, pipelineId: number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<PipelineExtendedSchema>()(\n      this,\n      `projects/${pId}/pipelines/${pipelineId}/cancel`,\n      options,\n    );\n  }\n\n  allVariables(projectId: string | number, pipelineId: number, options?: PaginatedRequestOptions) {\n    const [pId, pipeId] = [projectId, pipelineId].map(encodeURIComponent);\n\n    return RequestHelper.get<PipelineVariableSchema[]>()(\n      this,\n      `projects/${pId}/pipelines/${pipeId}/variables`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { PipelineSchema, PipelineVariableSchema } from './Pipelines';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface PipelineScheduleSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  ref: string;\n  cron: string;\n  cron_timezone: string;\n  next_run_at: string;\n  active: boolean;\n  created_at: string;\n  updated_at: string;\n  owner: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n}\n\nexport interface PipelineScheduleExtendedSchema extends PipelineScheduleSchema {\n  last_pipeline: Pick<PipelineSchema, 'id' | 'sha' | 'ref' | 'status'>;\n}\n\nexport class PipelineSchedules<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<PipelineScheduleSchema[]>()(\n      this,\n      `projects/${pId}/pipeline_schedules`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    description: string,\n    ref: string,\n    cron: string,\n    options?: BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<PipelineScheduleSchema & { variables?: PipelineVariableSchema[] }>()(\n      this,\n      `projects/${pId}/pipeline_schedules`,\n      {\n        description,\n        ref,\n        cron,\n        ...options,\n      },\n    );\n  }\n\n  edit(projectId: string | number, scheduleId: number, options?: BaseRequestOptions) {\n    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);\n\n    return RequestHelper.put<PipelineScheduleExtendedSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${sId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, scheduleId: number, options?: Sudo) {\n    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);\n\n    return RequestHelper.del<PipelineScheduleExtendedSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${sId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, scheduleId: number, options?: Sudo) {\n    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);\n\n    return RequestHelper.get<PipelineScheduleExtendedSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${sId}`,\n      options,\n    );\n  }\n\n  takeOwnership(projectId: string | number, scheduleId: number, options?: Sudo) {\n    const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);\n\n    return RequestHelper.post<PipelineScheduleExtendedSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${sId}/take_ownership`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { PipelineVariableSchema } from './Pipelines';\nimport { BaseRequestOptions, PaginatedRequestOptions, RequestHelper } from '../infrastructure';\n\nexport class PipelineScheduleVariables<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, pipelineScheduleId: number, options?: PaginatedRequestOptions) {\n    const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);\n\n    return RequestHelper.get<PipelineVariableSchema[]>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${psId}/variables`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, pipelineScheduleId: number, options?: BaseRequestOptions) {\n    const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);\n\n    return RequestHelper.post<PipelineVariableSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${psId}/variables`,\n      options,\n    );\n  }\n\n  edit(\n    projectId: string | number,\n    pipelineScheduleId: number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.put<PipelineVariableSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`,\n      options,\n    );\n  }\n\n  show(\n    projectId: string | number,\n    pipelineScheduleId: number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.get<PipelineVariableSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`,\n      options,\n    );\n  }\n\n  remove(\n    projectId: string | number,\n    pipelineScheduleId: number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);\n\n    return RequestHelper.del<PipelineVariableSchema>()(\n      this,\n      `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo, BaseRequestOptions } from '../infrastructure';\n\nexport interface ExportStatusSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  name: string;\n  name_with_namespace: string;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  export_status: string;\n  _links: {\n    api_url: string;\n    web_url: string;\n  };\n}\n\nexport interface FailedRelationSchema {\n  id: number;\n  created_at: string;\n  exception_class: string;\n  exception_message: string;\n  source: string;\n  relation_name: string;\n}\n\nexport interface ImportStatusSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  name: string;\n  name_with_namespace: string;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  import_status: string;\n  correlation_id: string;\n  failed_relations?: FailedRelationSchema[];\n}\n\nexport interface UploadMetadata {\n  filename?: string;\n  contentType?: string;\n}\n\nexport const defaultMetadata = {\n  filename: `${Date.now().toString()}.tar.gz`,\n  contentType: 'application/octet-stream',\n};\n\nexport class ProjectImportExport<C extends boolean = false> extends BaseService<C> {\n  download(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get()(this, `projects/${pId}/export/download`, options);\n  }\n\n  exportStatus(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ExportStatusSchema>()(this, `projects/${pId}/export`, options);\n  }\n\n  import(\n    content: string,\n    path: string,\n    { metadata, ...options }: { metadata?: UploadMetadata } & BaseRequestOptions = {},\n  ) {\n    return RequestHelper.post<ImportStatusSchema>()(this, 'projects/import', {\n      isForm: true,\n      ...options,\n      file: [content, { ...defaultMetadata, ...metadata }],\n      path,\n    });\n  }\n\n  importStatus(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ImportStatusSchema>()(this, `projects/${pId}/import`, options);\n  }\n\n  schedule(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<{ message: string }>()(this, `projects/${pId}/export`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { LicenseTemplateSchema } from './LicenseTemplates';\nimport { UploadMetadata, defaultMetadata } from './ProjectImportExport';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { AccessLevel } from '../templates';\n\n// TODO add missing functions\nexport interface ProjectSchema extends Record<string, unknown> {\n  id: number;\n  description?: string;\n  default_branch: string;\n  ssh_url_to_repo: string;\n  http_url_to_repo: string;\n  web_url: string;\n  readme_url: string;\n  tag_list?: string[];\n  name: string;\n  name_with_namespace: string;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  last_activity_at: string;\n  forks_count: number;\n  avatar_url: string;\n  star_count: number;\n}\n\nexport interface NamespaceInfoSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  path: string;\n  kind: string;\n  full_path: string;\n  avatar_url: string;\n  web_url: string;\n}\n\nexport interface AccessSchema {\n  access_level: AccessLevel;\n  notification_level: number;\n}\n\nexport interface SharedWithGroupSchema {\n  group_id: number;\n  group_name: string;\n  group_full_path: string;\n  group_access_level: number;\n}\n\nexport interface ProjectExtendedSchema extends ProjectSchema {\n  visibility: string;\n  owner: Pick<UserSchema, 'id' | 'name' | 'created_at'>;\n  issues_enabled: boolean;\n  open_issues_count: number;\n  merge_requests_enabled: boolean;\n  jobs_enabled: boolean;\n  wiki_enabled: boolean;\n  snippets_enabled: boolean;\n  can_create_merge_request_in: boolean;\n  resolve_outdated_diff_discussions: boolean;\n  container_registry_enabled: boolean;\n  container_expiration_policy: {\n    cadence: string;\n    enabled: boolean;\n    keep_n?: number;\n    older_than?: string;\n    name_regex_delete?: string;\n    name_regex_keep?: string;\n    next_run_at: string;\n  };\n  creator_id: number;\n  namespace: NamespaceInfoSchema;\n  import_status: string;\n  import_error?: string;\n  permissions: {\n    project_access: AccessSchema;\n    group_access: AccessSchema;\n  };\n  archived: boolean;\n  license_url: string;\n  license: Pick<LicenseTemplateSchema, 'key' | 'name' | 'nickname' | 'html_url' | 'source_url'>;\n  shared_runners_enabled: boolean;\n  runners_token: string;\n  ci_default_git_depth: number;\n  ci_forward_deployment_enabled: boolean;\n  public_jobs: boolean;\n  shared_with_groups?: SharedWithGroupSchema[];\n  repository_storage: string;\n  only_allow_merge_if_pipeline_succeeds: boolean;\n  allow_merge_on_skipped_pipeline: boolean;\n  restrict_user_defined_variables: boolean;\n  only_allow_merge_if_all_discussions_are_resolved: boolean;\n  remove_source_branch_after_merge: boolean;\n  printing_merge_requests_link_enabled: boolean;\n  request_access_enabled: boolean;\n  merge_method: string;\n  auto_devops_enabled: boolean;\n  auto_devops_deploy_strategy: string;\n  approvals_before_merge: number;\n  mirror: boolean;\n  mirror_user_id: number;\n  mirror_trigger_builds: boolean;\n  only_mirror_protected_branches: boolean;\n  mirror_overwrites_diverged_branches: boolean;\n  external_authorization_classification_label?: string;\n  packages_enabled: boolean;\n  service_desk_enabled: boolean;\n  service_desk_address?: string;\n  autoclose_referenced_issues: boolean;\n  suggestion_commit_message?: string;\n  marked_for_deletion_at: string;\n  marked_for_deletion_on: string;\n  compliance_frameworks?: string[];\n  statistics: {\n    commit_count: number;\n    storage_size: number;\n    repository_size: number;\n    wiki_size: number;\n    lfs_objects_size: number;\n    job_artifacts_size: number;\n    packages_size: number;\n    snippets_size: number;\n  };\n  container_registry_image_prefix: string;\n  _links: {\n    self: string;\n    issues: string;\n    merge_requests: string;\n    repo_branches: string;\n    labels: string;\n    events: string;\n    members: string;\n  };\n}\n\nexport interface ProjectFileUploadSchema extends Record<string, unknown> {\n  alt: string;\n  url: string;\n  full_path: string;\n  markdown: string;\n}\n\nexport class Projects<C extends boolean = false> extends BaseService<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ProjectSchema[]>()(this, 'projects', options);\n  }\n\n  archive(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, `projects/${pId}/archive`, options);\n  }\n\n  create({\n    userId,\n    ...options\n  }: ({ name: string } | { path: string }) & { userId?: number } & BaseRequestOptions) {\n    const url = userId ? `projects/user/${encodeURIComponent(userId)}` : 'projects';\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, url, options);\n  }\n\n  edit(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.put<ProjectExtendedSchema>()(this, `projects/${pId}`, options);\n  }\n\n  fork(\n    projectId: string | number,\n    { forkedFromId, ...options }: { forkedFromId?: number } & BaseRequestOptions = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n    let url = `projects/${pId}/fork`;\n\n    if (forkedFromId) url += `/${encodeURIComponent(forkedFromId)}`;\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, url, options);\n  }\n\n  forks(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ProjectExtendedSchema[]>()(this, `projects/${pId}/forks`, options);\n  }\n\n  languages(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<{ [name: string]: number }>()(\n      this,\n      `projects/${pId}/languages`,\n      options,\n    );\n  }\n\n  mirrorPull(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post()(this, `projects/${pId}/mirror/pull`, options);\n  }\n\n  remove(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.del()(this, `projects/${pId}`, options);\n  }\n\n  removeFork(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.del()(this, `projects/${pId}/fork`, options);\n  }\n\n  search(projectName: string, options?: BaseRequestOptions) {\n    return RequestHelper.get<ProjectSchema[]>()(this, 'projects', {\n      search: projectName,\n      ...options,\n    });\n  }\n\n  share(\n    projectId: string | number,\n    groupId: string | number,\n    groupAccess: number,\n    options?: BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post()(this, `projects/${pId}/share`, {\n      groupId,\n      groupAccess,\n      ...options,\n    });\n  }\n\n  show(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ProjectExtendedSchema>()(this, `projects/${pId}`, options);\n  }\n\n  star(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, `projects/${pId}/star`, options);\n  }\n\n  transfer(projectId: string | number, namespaceId: string | number) {\n    const pId = encodeURIComponent(projectId);\n    return RequestHelper.put<ProjectExtendedSchema>()(this, `projects/${pId}/transfer`, {\n      namespace: namespaceId,\n    });\n  }\n\n  unarchive(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, `projects/${pId}/unarchive`, options);\n  }\n\n  unshare(projectId: string | number, groupId: string | number, options?: Sudo) {\n    const [pId, gId] = [projectId, groupId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/share/${gId}`, options);\n  }\n\n  unstar(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, `projects/${pId}/unstar`, options);\n  }\n\n  upload(\n    projectId: string | number,\n    content: string,\n    { metadata, ...options }: { metadata?: UploadMetadata } & BaseRequestOptions = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProjectFileUploadSchema>()(this, `projects/${pId}/uploads`, {\n      isForm: true,\n      file: [content, { ...defaultMetadata, ...metadata }],\n      ...options,\n    });\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAccessRequests, AccessRequestSchema, AccessLevel } from '../templates';\nimport { Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface GroupAccessRequests<C extends boolean = false> extends ResourceAccessRequests<C> {\n  all(projectId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>[]>;\n\n  request(projectId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  approve(\n    projectId: string | number,\n    userId: number,\n    options?: { accessLevel?: AccessLevel } & Sudo,\n  ): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  deny(projectId: string | number, userId: number): Promise<void>;\n}\n\nexport class ProjectAccessRequests<C extends boolean = false> extends ResourceAccessRequests<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceBadges, BadgeSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectBadgeSchema extends BadgeSchema {\n  kind: 'project';\n}\n\nexport interface ProjectBadges<C extends boolean = false> extends ResourceBadges<C> {\n  add(\n    productId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>>;\n\n  all(\n    productId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>[]>;\n\n  edit(\n    productId: string | number,\n    badgeId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>>;\n\n  preview(\n    productId: string | number,\n    linkUrl: string,\n    imageUrl: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, Omit<ProjectBadgeSchema, 'id' | 'name' | 'kind'>>>;\n\n  remove(productId: string | number, badgeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    productId: string | number,\n    badgeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>>;\n}\n\nexport class ProjectBadges<C extends boolean = false> extends ResourceBadges<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceCustomAttributes, CustomAttributeSchema } from '../templates';\nimport { PaginatedRequestOptions, CamelizedRecord, Sudo } from '../infrastructure';\n\nexport interface ProjectCustomAttributes<C extends boolean = false>\n  extends ResourceCustomAttributes<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>[]>;\n\n  set(\n    projectId: string | number,\n    customAttributeId: number,\n    value: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n\n  remove(projectId: string | number, customAttributeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    projectId: string | number,\n    customAttributeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n}\n\nexport class ProjectCustomAttributes<C extends boolean> extends ResourceCustomAttributes<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ProjectSchema } from './Projects';\nimport { ResourceIssueBoards, IssueBoardSchema, IssueBoardListSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectIssueBoardSchema extends IssueBoardSchema {\n  project: Pick<\n    ProjectSchema,\n    | 'id'\n    | 'name'\n    | 'name_with_namespace'\n    | 'path'\n    | 'path_with_namespace'\n    | 'http_url_to_repo'\n    | 'web_url'\n  >;\n}\n\nexport interface ProjectIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>[]>;\n\n  create(\n    groupId: string | number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>>;\n\n  createList(\n    groupId: string | number,\n    boardId: number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  edit(\n    groupId: string | number,\n    boardId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>>;\n\n  editList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    position: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  lists(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>[]>;\n\n  remove(groupId: string | number, boardId: number, options?: Sudo): Promise<void>;\n\n  removeList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>>;\n\n  showList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n}\n\nexport class ProjectIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProjectHookSchema extends Record<string, unknown> {\n  id: number;\n  url: string;\n  project_id: number;\n  push_events: boolean;\n  push_events_branch_filter: string;\n  issues_events: boolean;\n  confidential_issues_events: boolean;\n  merge_requests_events: boolean;\n  tag_push_events: boolean;\n  note_events: boolean;\n  confidential_note_events: boolean;\n  job_events: boolean;\n  pipeline_events: boolean;\n  wiki_page_events: boolean;\n  deployment_events: boolean;\n  releases_events: boolean;\n  enable_ssl_verification: boolean;\n  created_at: string;\n}\n\nexport class ProjectHooks<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ProjectHookSchema[]>()(this, `projects/${pId}/hooks`, options);\n  }\n\n  show(projectId: string | number, hookId: number, options?: Sudo) {\n    const [pId, hId] = [projectId, hookId].map(encodeURIComponent);\n\n    return RequestHelper.get<ProjectHookSchema>()(this, `projects/${pId}/hooks/${hId}`, options);\n  }\n\n  add(projectId: string | number, url: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProjectHookSchema>()(this, `projects/${pId}/hooks`, {\n      url,\n      ...options,\n    });\n  }\n\n  edit(projectId: string | number, hookId: number, url: string, options?: BaseRequestOptions) {\n    const [pId, hId] = [projectId, hookId].map(encodeURIComponent);\n\n    return RequestHelper.put<ProjectHookSchema>()(this, `projects/${pId}/hooks/${hId}`, {\n      url,\n      ...options,\n    });\n  }\n\n  remove(projectId: string | number, hookId: number, options?: Sudo) {\n    const [pId, hId] = [projectId, hookId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/hooks/${hId}`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceMembers, MembersSchema, IncludeInherited, AccessLevel } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface GroupMembers<C extends boolean = false> extends ResourceMembers<C> {\n  add(\n    projectId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MembersSchema>>;\n\n  all(\n    projectId: string | number,\n    options?: IncludeInherited & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MembersSchema>[]>;\n\n  edit(\n    projectId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MembersSchema>>;\n\n  show(\n    projectId: string | number,\n    userId: number,\n    options?: IncludeInherited & Sudo,\n  ): Promise<CamelizedRecord<C, MembersSchema>>;\n\n  remove(projectId: string | number, userId: number, options?: Sudo): Promise<void>;\n}\n\nexport class ProjectMembers<C extends boolean = false> extends ResourceMembers<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { IssueSchema } from './Issues';\nimport { MergeRequestSchema } from './MergeRequests';\nimport { ResourceMilestones, MilestoneSchema } from '../templates';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>[]>;\n\n  create(\n    projectId: string | number,\n    title: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  edit(\n    projectId: string | number,\n    milestoneId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  issues(\n    projectId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueSchema>[]>;\n\n  mergeRequests(\n    projectId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MergeRequestSchema>[]>;\n\n  show(\n    projectId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n}\n\nexport class ProjectMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { SnippetVisibility } from './Snippets';\nimport { UserSchema } from './Users';\n\nexport interface ProjectSnippetSchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  file_name: string;\n  description: string;\n  author: Pick<UserSchema, 'id' | 'username' | 'name' | 'state' | 'created_at'>;\n  updated_at: string;\n  created_at: string;\n  project_id: number;\n  web_url: string;\n  raw_url: string;\n}\n\nexport class ProjectSnippets<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ProjectSnippetSchema[]>()(this, `projects/${pId}/snippets`, options);\n  }\n\n  content(projectId: string | number, snippetId: number, options?: Sudo) {\n    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);\n\n    return RequestHelper.get()(this, `projects/${pId}/snippets/${sId}/raw`, options);\n  }\n\n  create(\n    projectId: string | number,\n    title: string,\n    fileName: string,\n    code: string,\n    visibility: SnippetVisibility,\n    options?: BaseRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProjectSnippetSchema>()(this, `projects/${pId}/snippets`, {\n      title,\n      fileName,\n      code,\n      visibility,\n      ...options,\n    });\n  }\n\n  edit(projectId: string | number, snippetId: number, options?: BaseRequestOptions) {\n    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);\n\n    return RequestHelper.put<ProjectSnippetSchema>()(\n      this,\n      `projects/${pId}/snippets/${sId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, snippetId: number, options?: Sudo) {\n    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/snippets/${sId}`, options);\n  }\n\n  show(projectId: string | number, snippetId: number, options?: Sudo) {\n    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);\n\n    return RequestHelper.get<ProjectSnippetSchema>()(\n      this,\n      `projects/${pId}/snippets/${sId}`,\n      options,\n    );\n  }\n\n  userAgentDetails(projectId: string | number, snippetId: number, options?: Sudo) {\n    const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);\n\n    return RequestHelper.get<{\n      user_agent: string;\n      ip_address: string;\n      akismet_submitted: boolean;\n    }>()(this, `projects/${pId}/snippets/${sId}/user_agent_detail`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes, NoteSchema } from '../templates';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface SnippetNoteSchema extends NoteSchema {\n  file_name: string;\n  expires_at: string;\n}\n\nexport interface ProjectSnippetNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    projectId: string | number,\n    snippetId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>[]>;\n\n  create(\n    projectId: string | number,\n    snippetId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>>;\n\n  edit(\n    projectId: string | number,\n    snippetId: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>>;\n\n  remove(projectId: string | number, snippetId: string | number, noteId: number, options?: Sudo);\n\n  show(\n    projectId: string | number,\n    snippetId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>>;\n}\n\nexport class ProjectSnippetNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'snippets', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions, DiscussionSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectSnippetDiscussions<C extends boolean = false>\n  extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    issueId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    snippetId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class ProjectSnippetDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'snippets', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAwardEmojis, AwardEmojiSchema } from '../templates';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface ProjectSnippetAwardEmojis<C extends boolean = false>\n  extends ResourceAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    snippetIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    snippetIId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    snippetIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    snippetIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class ProjectSnippetAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('snippets', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProtectedBranchAccessLevelSchema {\n  access_level: 0 | 30 | 40 | 60;\n  access_level_description: string;\n  user_id?: number;\n  group_id?: number;\n}\n\nexport interface ProtectedBranchSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  push_access_levels?: ProtectedBranchAccessLevelSchema[];\n  merge_access_levels?: ProtectedBranchAccessLevelSchema[];\n  allow_force_push: boolean;\n  code_owner_approval_required: boolean;\n}\n\nexport class ProtectedBranches<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options: { search?: string } & PaginatedRequestOptions = {}) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ProtectedBranchSchema[]>()(\n      this,\n      `projects/${pId}/protected_branches`,\n      options,\n    );\n  }\n\n  protect(projectId: string | number, branchName: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProtectedBranchSchema>()(this, `projects/${pId}/protected_branches`, {\n      name: branchName,\n      ...options,\n    });\n  }\n\n  show(projectId: string | number, branchName: string, options?: Sudo) {\n    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);\n\n    return RequestHelper.get<ProtectedBranchSchema>()(\n      this,\n      `projects/${pId}/protected_branches/${bName}`,\n      options,\n    );\n  }\n\n  unprotect(projectId: string | number, branchName: string, options?: Sudo) {\n    const [pId, bName] = [projectId, branchName].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/protected_branches/${bName}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProtectedTagAccessLevelSchema {\n  access_level: 0 | 30 | 40 | 60;\n  access_level_description: string;\n}\n\nexport interface ProtectedTagSchema extends Record<string, unknown> {\n  name: string;\n  create_access_levels?: ProtectedTagAccessLevelSchema[];\n}\n\nexport class ProtectedTags<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ProtectedTagSchema[]>()(\n      this,\n      `projects/${pId}/protected_tags`,\n      options,\n    );\n  }\n\n  protect(projectId: string | number, tagName: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ProtectedTagSchema>()(this, `projects/${pId}/protected_tags`, {\n      name: tagName,\n      ...options,\n    });\n  }\n\n  show(projectId: string | number, tagName: string, options?: Sudo) {\n    const [pId, tName] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.get<ProtectedTagSchema>()(\n      this,\n      `projects/${pId}/protected_tags/${tName}`,\n      options,\n    );\n  }\n\n  unprotect(projectId: string | number, tagName: string, options?: Sudo) {\n    const [pId, tName] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/protected_tags/${tName}`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceVariables, ResourceVariableSchema } from '../templates';\nimport { BaseRequestOptions, PaginatedRequestOptions, CamelizedRecord } from '../infrastructure';\n\nexport interface ProjectVariables<C extends boolean = false> extends ResourceVariables<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>[]>;\n\n  create(\n    projectId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>>;\n\n  edit(\n    projectId: string | number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>>;\n\n  show(\n    projectId: string | number,\n    keyId: string,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ResourceVariableSchema>>;\n\n  remove(\n    projectId: string | number,\n    keyId: string,\n    options?: PaginatedRequestOptions,\n  ): Promise<void>;\n}\n\nexport class ProjectVariables<C extends boolean = false> extends ResourceVariables<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDeployTokens, DeployTokenScope, DeployTokenSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProjectDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  add(\n    projectId: string | number,\n    tokenName: string,\n    tokenScopes: DeployTokenScope[],\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>>;\n\n  all(\n    options?: { projectId?: string | number } & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>[]>;\n\n  remove(projectId: string | number, tokenId: number, options?: Sudo): Promise<void>;\n}\n\nexport class ProjectDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, BaseRequestOptions, Sudo } from '../infrastructure';\n\nexport interface PushRulesSchema extends Record<string, unknown> {\n  id: number;\n  project_id: number;\n  commit_message_regex: string;\n  commit_message_negative_regex: string;\n  branch_name_regex: string;\n  deny_delete_tag: boolean;\n  created_at: string;\n  member_check: boolean;\n  prevent_secrets: boolean;\n  author_email_regex: string;\n  file_name_regex: string;\n  max_file_size: number;\n  commit_committer_check?: boolean;\n  reject_unsigned_commits?: boolean;\n}\n\nexport class PushRules<C extends boolean = false> extends BaseService<C> {\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<PushRulesSchema>()(this, `projects/${pId}/push_rule`, options);\n  }\n\n  edit(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.put<PushRulesSchema>()(this, `projects/${pId}/push_rule`, options);\n  }\n\n  remove(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.del<PushRulesSchema>()(this, `projects/${pId}/push_rule`, options);\n  }\n\n  show(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<PushRulesSchema>()(this, `projects/${pId}/push_rule`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { CommitSchema } from './Commits';\nimport { MilestoneSchema } from '../templates';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface EvidenceSchema {\n  sha: string;\n  filepath: string;\n  collected_at: string;\n}\n\nexport interface SourceSchema {\n  format: string;\n  url: string;\n}\n\nexport interface LinkSchema {\n  id: number;\n  name: string;\n  url: string;\n  external: boolean;\n  link_type: string;\n}\n\nexport interface ReleaseSchema extends Record<string, unknown> {\n  tag_name: string;\n  description: string;\n  name: string;\n  description_html: string;\n  created_at: string;\n  released_at: string;\n  user: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  commit: CommitSchema;\n  milestones?: MilestoneSchema[];\n  commit_path: string;\n  tag_path: string;\n  assets: {\n    count: number;\n    sources?: SourceSchema[];\n    links?: LinkSchema[];\n    evidence_file_path: string;\n  };\n  evidences?: EvidenceSchema[];\n}\n\n// TODO: Add missing functions\nexport class Releases<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ReleaseSchema[]>()(this, `projects/${pId}/releases`, options);\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<ReleaseSchema>()(this, `projects/${pId}/releases`, options);\n  }\n\n  edit(projectId: string | number, tagName: string, options?: BaseRequestOptions) {\n    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.put<ReleaseSchema>()(this, `projects/${pId}/releases/${tId}`, options);\n  }\n\n  remove(projectId: string | number, tagName: string, options?: Sudo) {\n    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/releases/${tId}`, options);\n  }\n\n  show(projectId: string | number, tagName: string, options?: Sudo) {\n    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.get<ReleaseSchema>()(this, `projects/${pId}/releases/${tId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\nexport interface ReleaseLinkSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  url: string;\n  external: boolean;\n  link_type: string;\n}\n\nexport class ReleaseLinks<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, tagName: string, options?: PaginatedRequestOptions) {\n    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.get<ReleaseLinkSchema[]>()(\n      this,\n      `projects/${pId}/releases/${tId}/assets/links`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    tagName: string,\n    name: string,\n    url: string,\n    options?: Sudo & { filePath?: string; linkType?: string },\n  ) {\n    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.post<ReleaseLinkSchema>()(\n      this,\n      `projects/${pId}/releases/${tId}/assets/links`,\n      {\n        name,\n        url,\n        ...options,\n      },\n    );\n  }\n\n  edit(\n    projectId: string | number,\n    tagName: string,\n    linkId: number,\n    options?: Sudo & { name?: string; url?: string; filePath?: string; linkType?: string },\n  ) {\n    const [pId, tId, lId] = [projectId, tagName, linkId].map(encodeURIComponent);\n\n    return RequestHelper.put<ReleaseLinkSchema>()(\n      this,\n      `projects/${pId}/releases/${tId}/assets/links/${lId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, tagName: string, linkId: number, options?: Sudo) {\n    const [pId, tId, lId] = [projectId, tagName, linkId].map(encodeURIComponent);\n\n    return RequestHelper.del()(\n      this,\n      `projects/${pId}/releases/${tId}/assets/links/${lId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, tagName: string, linkId: number, options?: Sudo) {\n    const [pId, tId, lId] = [projectId, tagName, linkId].map(encodeURIComponent);\n\n    return RequestHelper.get<ReleaseLinkSchema>()(\n      this,\n      `projects/${pId}/releases/${tId}/assets/links/${lId}`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { CommitSchema, CommitDiffSchema } from './Commits';\nimport { RequestHelper, Sudo, BaseRequestOptions } from '../infrastructure';\n\ntype ArchiveType = 'tar.gz' | 'tar.bz2' | 'tbz' | 'tbz2' | 'tb2' | 'bz2' | 'tar' | 'zip';\n\nexport interface RepositoryCompareSchema extends Record<string, unknown> {\n  commit: Pick<\n    CommitSchema,\n    'id' | 'short_id' | 'title' | 'author_name' | 'author_email' | 'created_at'\n  >;\n  commits?: Pick<\n    CommitSchema,\n    'id' | 'short_id' | 'title' | 'author_name' | 'author_email' | 'created_at'\n  >[];\n  diffs?: CommitDiffSchema[];\n  compare_timeout: boolean;\n  compare_same_ref: boolean;\n}\n\nexport interface RepositoryContributorSchema extends Record<string, unknown> {\n  name: string;\n  email: string;\n  commits: number;\n  additions: number;\n  deletions: number;\n}\n\nexport interface RepositoryTreeSchema extends Record<string, unknown> {\n  id: string;\n  name: string;\n  type: string;\n  path: string;\n  mode: string;\n}\n\nexport class Repositories<C extends boolean = false> extends BaseService<C> {\n  compare(projectId: string | number, from: string, to: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<RepositoryCompareSchema>()(\n      this,\n      `projects/${pId}/repository/compare`,\n      {\n        from,\n        to,\n        ...options,\n      },\n    );\n  }\n\n  contributors(projectId: string | number, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<RepositoryContributorSchema[]>()(\n      this,\n      `projects/${pId}/repository/contributors`,\n      options,\n    );\n  }\n\n  mergeBase(projectId: string | number, refs: string[], options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<CommitSchema>()(this, `projects/${pId}/repository/merge_base`, {\n      refs,\n      ...options,\n    });\n  }\n\n  showArchive(\n    projectId: string | number,\n    { fileType = 'tar.gz', ...options }: { fileType?: ArchiveType } & Sudo = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get()(\n      this,\n      `projects/${pId}/repository/archive.${fileType}`,\n      options as Record<string, unknown>,\n    ) as unknown as Promise<void>;\n  }\n\n  showBlob(projectId: string | number, sha: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get()(\n      this,\n      `projects/${pId}/repository/blobs/${sha}`,\n      options,\n    ) as unknown as Promise<Blob>;\n  }\n\n  showBlobRaw(projectId: string | number, sha: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get()(\n      this,\n      `projects/${pId}/repository/blobs/${sha}/raw`,\n      options,\n    ) as unknown as Promise<Blob>;\n  }\n\n  tree(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<RepositoryTreeSchema[]>()(\n      this,\n      `projects/${pId}/repository/tree`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { CommitSchema } from './Commits';\nimport { RequestHelper, BaseRequestOptions, Sudo } from '../infrastructure';\n\nexport interface RepositoryFileExtendedSchema extends Record<string, unknown> {\n  file_name: string;\n  file_path: string;\n  size: number;\n  encoding: string;\n  content: string;\n  content_sha256: string;\n  ref: string;\n  blob_id: string;\n  commit_id: string;\n  last_commit_id: string;\n}\n\nexport interface RepositoryFileBlameSchema extends Record<string, unknown> {\n  commit: CommitSchema;\n  lines?: string[];\n}\n\nexport interface RepositoryFileSchema extends Record<string, unknown> {\n  file_path: string;\n  branch: string;\n}\n\nexport class RepositoryFiles<C extends boolean = false> extends BaseService<C> {\n  create(\n    projectId: string | number,\n    filePath: string,\n    branch: string,\n    content: string,\n    commitMessage: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, path] = [projectId, filePath].map(encodeURIComponent);\n\n    return RequestHelper.post<RepositoryFileSchema>()(\n      this,\n      `projects/${pId}/repository/files/${path}`,\n      {\n        branch,\n        content,\n        commitMessage,\n        ...options,\n      },\n    );\n  }\n\n  edit(\n    projectId: string | number,\n    filePath: string,\n    branch: string,\n    content: string,\n    commitMessage: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, path] = [projectId, filePath].map(encodeURIComponent);\n\n    return RequestHelper.put<RepositoryFileSchema>()(\n      this,\n      `projects/${pId}/repository/files/${path}`,\n      {\n        branch,\n        content,\n        commitMessage,\n        ...options,\n      },\n    );\n  }\n\n  remove(\n    projectId: string | number,\n    filePath: string,\n    branch: string,\n    commitMessage: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, path] = [projectId, filePath].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/repository/files/${path}`, {\n      branch,\n      commitMessage,\n      ...options,\n    });\n  }\n\n  show(projectId: string | number, filePath: string, ref: string, options?: Sudo) {\n    const [pId, path] = [projectId, filePath].map(encodeURIComponent);\n\n    return RequestHelper.get<RepositoryFileExtendedSchema>()(\n      this,\n      `projects/${pId}/repository/files/${path}`,\n      {\n        ref,\n        ...options,\n      },\n    );\n  }\n\n  showBlame(projectId: string | number, filePath: string, options?: Sudo) {\n    const [pId, path] = [projectId, filePath].map(encodeURIComponent);\n\n    return RequestHelper.get<RepositoryFileBlameSchema[]>()(\n      this,\n      `projects/${pId}/repository/files/${path}/blame`,\n      options,\n    );\n  }\n\n  showRaw(projectId: string | number, filePath: string, ref: string, options?: Sudo) {\n    const [pId, path] = [projectId, filePath].map(encodeURIComponent);\n\n    return RequestHelper.get()(this, `projects/${pId}/repository/files/${path}/raw`, {\n      ref,\n      ...options,\n    }) as unknown as Promise<Blob>;\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { ProjectSchema } from './Projects';\nimport { JobSchema } from './Jobs';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface RunnerSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  ip_address: string;\n  active: boolean;\n  is_shared: boolean;\n  name: string;\n  online: boolean;\n  status: 'running' | 'success' | 'failed' | 'canceled';\n}\n\nexport interface RunnerExtendedSchema extends RunnerSchema {\n  architecture?: string;\n  description: string;\n  contacted_at: string;\n  platform?: string;\n  projects?: Pick<\n    ProjectSchema,\n    'id' | 'name' | 'name_with_namespace' | 'path' | 'path_with_namespace'\n  >;\n  revision?: string;\n  tag_list?: string[];\n  version?: string;\n  access_level: string;\n  maximum_timeout?: number;\n}\n\nexport class Runners<C extends boolean = false> extends BaseService<C> {\n  all({ projectId, ...options }: { projectId?: string | number } & PaginatedRequestOptions = {}) {\n    const url = projectId ? `projects/${encodeURIComponent(projectId)}/runners` : 'runners/all';\n\n    return RequestHelper.get<RunnerSchema[]>()(this, url, options);\n  }\n\n  allOwned(options?: BaseRequestOptions) {\n    return RequestHelper.get<RunnerSchema[]>()(this, 'runners', options);\n  }\n\n  edit(runnerId: number, options?: BaseRequestOptions) {\n    const rId = encodeURIComponent(runnerId);\n\n    return RequestHelper.put<RunnerExtendedSchema>()(this, `runners/${rId}`, options);\n  }\n\n  enable(projectId: string | number, runnerId: number, options?: Sudo) {\n    const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);\n\n    return RequestHelper.post<RunnerSchema>()(this, `projects/${pId}/runners`, {\n      runnerId: rId,\n      ...options,\n    });\n  }\n\n  disable(projectId: string | number, runnerId: number, options?: Sudo) {\n    const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/runners/${rId}`, options);\n  }\n\n  jobs(runnerId: number, options?: Sudo) {\n    const rId = encodeURIComponent(runnerId);\n\n    return RequestHelper.get<JobSchema[]>()(this, `runners/${rId}/jobs`, options);\n  }\n\n  remove(runnerId: number, options?: Sudo) {\n    const rId = encodeURIComponent(runnerId);\n\n    return RequestHelper.del()(this, `runners/${rId}`, options);\n  }\n\n  show(runnerId: number, options?: Sudo) {\n    const rId = encodeURIComponent(runnerId);\n\n    return RequestHelper.get<RunnerExtendedSchema>()(this, `runners/${rId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  RequestHelper,\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n} from '../infrastructure';\n\nexport type SupportedService =\n  | 'asana'\n  | 'assembla'\n  | 'bamboo'\n  | 'bugzilla'\n  | 'buildkite'\n  | 'campfire'\n  | 'custom-issue-tracker'\n  | 'drone-ci'\n  | 'emails-on-push'\n  | 'external-wiki'\n  | 'flowdock'\n  | 'hangouts_chat'\n  | 'hipchat'\n  | 'irker'\n  | 'jira'\n  | 'kubernetes'\n  | 'slack-slash-commands'\n  | 'slack'\n  | 'packagist'\n  | 'pipelines-email'\n  | 'pivotaltracker'\n  | 'prometheus'\n  | 'pushover'\n  | 'redmine'\n  | 'microsoft-teams'\n  | 'mattermost'\n  | 'mattermost-slash-commands'\n  | 'teamcity'\n  | 'jenkins'\n  | 'jenkins-deprecated'\n  | 'mock-ci'\n  | 'youtrack';\n\nexport interface ServiceSchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  slug: string;\n  created_at: string;\n  updated_at: string;\n  active: boolean;\n  commit_events: boolean;\n  push_events: boolean;\n  issues_events: boolean;\n  confidential_issues_events: boolean;\n  merge_requests_events: boolean;\n  tag_push_events: boolean;\n  note_events: boolean;\n  confidential_note_events: boolean;\n  pipeline_events: boolean;\n  wiki_page_events: boolean;\n  job_events: boolean;\n  comment_on_event_enabled: boolean;\n}\n\nexport class Services<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ServiceSchema[]>()(this, `projects/${pId}/services`, options);\n  }\n\n  edit(projectId: string | number, serviceName: SupportedService, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.put<ServiceSchema>()(\n      this,\n      `projects/${pId}/services/${serviceName}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, serviceName: SupportedService, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.del()(this, `projects/${pId}/services/${serviceName}`, options);\n  }\n\n  show(projectId: string | number, serviceName: SupportedService, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<ServiceSchema>()(\n      this,\n      `projects/${pId}/services/${serviceName}`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { CommitSchema } from './Commits';\nimport { ReleaseSchema } from './Releases';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface TagSchema extends Record<string, unknown> {\n  commit: CommitSchema;\n  release: Pick<ReleaseSchema, 'tag_name' | 'description'>;\n  name: string;\n  target: string;\n  message?: string;\n  protected: boolean;\n}\n\nexport class Tags<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<TagSchema[]>()(this, `projects/${pId}/repository/tags`, options);\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<TagSchema>()(this, `projects/${pId}/repository/tags`, options);\n  }\n\n  remove(projectId: string | number, tagName: string, options?: Sudo) {\n    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/repository/tags/${tId}`, options);\n  }\n\n  show(projectId: string | number, tagName: string, options?: Sudo) {\n    const [pId, tId] = [projectId, tagName].map(encodeURIComponent);\n\n    return RequestHelper.get<TagSchema>()(this, `projects/${pId}/repository/tags/${tId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { ProjectSchema } from './Projects';\nimport { MilestoneSchema } from '../templates';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\nexport interface TodoSchema extends Record<string, unknown> {\n  id: number;\n  project: Pick<\n    ProjectSchema,\n    'id' | 'name' | 'name_with_namespace' | 'path' | 'path_with_namespace'\n  >;\n  author: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  action_name: string;\n  target_type: string;\n  target: {\n    id: number;\n    iid: number;\n    project_id: number;\n    title: string;\n    description: string;\n    state: string;\n    created_at: string;\n    updated_at: string;\n    target_branch: string;\n    source_branch: string;\n    upvotes: number;\n    downvotes: number;\n    author: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n    assignee: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n    source_project_id: number;\n    target_project_id: number;\n    labels?: string[];\n    work_in_progress: boolean;\n    milestone: Omit<MilestoneSchema, 'start_date' | 'expired' | 'web_url'>;\n    merge_when_pipeline_succeeds: boolean;\n    merge_status: string;\n    user_notes_count: number;\n  };\n  target_url: string;\n  body: string;\n  state: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class Todos<C extends boolean = false> extends BaseService<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<TodoSchema[]>()(this, 'todos', options);\n  }\n\n  create(\n    projectId: string | number,\n    resourceId: number,\n    resourceName: 'mergerequest' | 'issue',\n    options?: Sudo,\n  ) {\n    const resourceAPI = resourceName === 'issue' ? 'issues' : 'merge_requests';\n\n    return RequestHelper.post<TodoSchema>()(\n      this,\n      `projects/${projectId}/${resourceAPI}/${resourceId}/todo`,\n      options,\n    );\n  }\n\n  done({ todoId, ...options }: { todoId?: number } & Sudo = {}) {\n    const url = ['todos'];\n\n    if (todoId) url.push(todoId.toString());\n\n    url.push('mark_as_done');\n\n    // Fixme: Rewrite this to make better use of proper typing\n    if (todoId) {\n      return RequestHelper.post<TodoSchema>()(\n        this,\n        url.join('/'),\n        options as Record<string, unknown>,\n      );\n    }\n    return RequestHelper.post<void>()(this, url.join('/'), options as Record<string, unknown>);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface PipelineTriggerSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  created_at: string;\n  last_used?: string;\n  token: string;\n  updated_at: string;\n  owner: Pick<UserSchema, 'id' | 'name' | 'created_at'>;\n}\n\n// TODO: Rename PipelineTriggers\nexport class Triggers<C extends boolean = false> extends BaseService<C> {\n  add(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<PipelineTriggerSchema>()(this, `projects/${pId}/triggers`, options);\n  }\n\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<PipelineTriggerSchema[]>()(this, `projects/${pId}/triggers`, options);\n  }\n\n  edit(projectId: string | number, triggerId: number, options?: BaseRequestOptions) {\n    const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);\n\n    return RequestHelper.put<PipelineTriggerSchema>()(\n      this,\n      `projects/${pId}/triggers/${tId}`,\n      options,\n    );\n  }\n\n  pipeline(\n    projectId: string | number,\n    ref: string,\n    token: string,\n    { variables }: { variables?: Record<string, string> } = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n    const hapiVariables = {};\n\n    if (variables) {\n      Object.entries(variables).forEach(([k, v]) => {\n        hapiVariables[`variables[${k}]`] = v;\n      });\n    }\n\n    return RequestHelper.post()(this, `projects/${pId}/trigger/pipeline`, {\n      isForm: true,\n      ref,\n      token,\n      ...hapiVariables,\n    });\n  }\n\n  remove(projectId: string | number, triggerId: number, options?: Sudo) {\n    const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/triggers/${tId}`, options);\n  }\n\n  show(projectId: string | number, triggerId: number, options?: Sudo) {\n    const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);\n\n    return RequestHelper.get<PipelineTriggerSchema>()(\n      this,\n      `projects/${pId}/triggers/${tId}`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { PaginatedRequestOptions, RequestHelper } from '../infrastructure';\n\nexport interface IdentifierSchema {\n  external_type: string;\n  external_id: string;\n  name: string;\n  url: string;\n}\n\nexport interface LinkSchema {\n  url: string;\n}\n\nexport interface ItemSchema {\n  type: string;\n  href: string;\n}\n\nexport interface VulnerabilityFindingSchema extends Record<string, unknown> {\n  id: number;\n  report_type: string;\n  name: string;\n  severity: string;\n  confidence: string;\n  scanner: {\n    external_id: string;\n    name: string;\n  };\n  identifiers?: IdentifierSchema[];\n  project_fingerprint: string;\n  uuid: string;\n  create_vulnerability_feedback_issue_path: string;\n  create_vulnerability_feedback_merge_request_path: string;\n  create_vulnerability_feedback_dismissal_path: string;\n  project: {\n    id: number;\n    name: string;\n    full_path: string;\n    full_name: string;\n  };\n  dismissal_feedback?: string;\n  issue_feedback?: string;\n  merge_request_feedback?: string;\n  description: string;\n  links?: LinkSchema[];\n  location: {\n    file: string;\n    dependency: {\n      package: {\n        name: string;\n      };\n      version: string;\n    };\n  };\n  details: {\n    [custom_field: string]: {\n      name: string;\n      type: string;\n      items?: ItemSchema[];\n    };\n  };\n  solution: string;\n  blob_path: string;\n}\n\nexport class VulnerabilityFindings<C extends boolean = false> extends BaseService<C> {\n  all(\n    projectId: string | number,\n    options?: {\n      reportType?: string[];\n      scope?: string;\n      severity?: string[];\n      confidence?: string[];\n      pipelineId?: string | number;\n    } & PaginatedRequestOptions,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<VulnerabilityFindingSchema[]>()(\n      this,\n      `projects/${pId}/vulnerability_findings`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo, BaseRequestOptions } from '../infrastructure';\n\nexport interface SettingsSchema extends Record<string, unknown> {\n  default_projects_limit: number;\n  signup_enabled: boolean;\n  id: number;\n  default_branch_protection: number;\n  restricted_visibility_levels?: string[];\n  password_authentication_enabled_for_web: boolean;\n  after_sign_out_path?: string;\n  max_attachment_size: number;\n  max_import_size: number;\n  user_oauth_applications: boolean;\n  updated_at: string;\n  session_expire_delay: number;\n  home_page_url?: string;\n  default_snippet_visibility: string;\n  outbound_local_requests_whitelist?: string[];\n  domain_allowlist?: string[];\n  domain_denylist_enabled: boolean;\n  domain_denylist?: string[];\n  created_at: string;\n  default_ci_config_path?: string;\n  default_project_visibility: string;\n  default_group_visibility: string;\n  gravatar_enabled: boolean;\n  sign_in_text?: string;\n  container_expiration_policies_enable_historic_entries: boolean;\n  container_registry_token_expire_delay: number;\n  repository_storages_weighted: {\n    [name: string]: number;\n  };\n  plantuml_enabled: boolean;\n  plantuml_url?: string;\n  kroki_enabled: boolean;\n  kroki_url?: string;\n  terminal_max_session_time: number;\n  polling_interval_multiplier: number;\n  rsa_key_restriction: number;\n  dsa_key_restriction: number;\n  ecdsa_key_restriction: number;\n  ed25519_key_restriction: number;\n  first_day_of_week: number;\n  enforce_terms: boolean;\n  terms: string;\n  performance_bar_allowed_group_id: number;\n  user_show_add_ssh_key_message: boolean;\n  local_markdown_version: number;\n  allow_local_requests_from_hooks_and_services: boolean;\n  allow_local_requests_from_web_hooks_and_services: boolean;\n  allow_local_requests_from_system_hooks: boolean;\n  asset_proxy_enabled: boolean;\n  asset_proxy_url: string;\n  asset_proxy_whitelist?: string[];\n  asset_proxy_allowlist?: string[];\n  npm_package_requests_forwarding: boolean;\n  snippet_size_limit: number;\n  issues_create_limit: number;\n  raw_blob_request_limit: number;\n  wiki_page_max_content_bytes: number;\n  require_admin_approval_after_user_signup: boolean;\n  personal_access_token_prefix: string;\n  rate_limiting_response_text?: string;\n  keep_latest_artifact: boolean;\n}\n\nexport class ApplicationSettings<C extends boolean = false> extends BaseService<C> {\n  all(options?: Sudo) {\n    return RequestHelper.get<SettingsSchema>()(this, 'application/settings', options);\n  }\n\n  edit(options?: BaseRequestOptions) {\n    return RequestHelper.put<SettingsSchema>()(this, 'application/settings', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n  Camelize,\n} from '../infrastructure';\n\nexport interface BroadcastMessageSchema extends Record<string, unknown> {\n  message: string;\n  starts_at: string;\n  ends_at: string;\n  color: string;\n  font: string;\n  id: number;\n  active: boolean;\n  target_path: string;\n  broadcast_type: string;\n  dismissable: boolean;\n}\n\nexport class BroadcastMessages<C extends boolean = false> extends BaseService<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<BroadcastMessageSchema[]>()(this, 'broadcast_messages', options);\n  }\n\n  create(options?: Camelize<Omit<BroadcastMessageSchema, 'id'>> & Sudo) {\n    return RequestHelper.post<BroadcastMessageSchema>()(this, 'broadcast_messages', options);\n  }\n\n  edit(broadcastMessageId: number, options?: Camelize<Omit<BroadcastMessageSchema, 'id'>> & Sudo) {\n    const bId = encodeURIComponent(broadcastMessageId);\n\n    return RequestHelper.put<BroadcastMessageSchema>()(this, `broadcast_messages/${bId}`, options);\n  }\n\n  remove(broadcastMessageId: number, options?: Sudo) {\n    const bId = encodeURIComponent(broadcastMessageId);\n\n    return RequestHelper.del()(this, `broadcast_messages/${bId}`, options);\n  }\n\n  show(broadcastMessageId: number, options?: BaseRequestOptions) {\n    const bId = encodeURIComponent(broadcastMessageId);\n\n    return RequestHelper.get<BroadcastMessageSchema>()(this, `broadcast_messages/${bId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { RequestHelper, PaginatedRequestOptions } from '../infrastructure';\n\nexport interface EventOptions {\n  action?:\n    | 'created'\n    | 'updated'\n    | 'closed'\n    | 'reopened'\n    | 'pushed'\n    | 'commented'\n    | 'merged'\n    | 'joined'\n    | 'left'\n    | 'destroyed'\n    | 'expired';\n  targetType?: 'issue' | 'milestone' | 'merge_request' | 'note' | 'project' | 'snippet' | 'user';\n  before?: string;\n  after?: string;\n  scope?: string;\n  sort?: 'asc' | 'desc';\n}\n\nexport interface EventSchema extends Record<string, unknown> {\n  id: number;\n  title?: string;\n  project_id: number;\n  action_name: string;\n  target_id: number;\n  target_type: string;\n  author_id: number;\n  target_title: string;\n  created_at: string;\n  author: Omit<UserSchema, 'created_at'>;\n  author_username: string;\n}\n\nexport class Events<C extends boolean = false> extends BaseService<C> {\n  all({\n    projectId,\n    ...options\n  }: { projectId?: string | number } & PaginatedRequestOptions & EventOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      const pId = encodeURIComponent(projectId);\n\n      url = `projects/${pId}/events`;\n    } else {\n      url = 'events';\n    }\n\n    return RequestHelper.get<EventSchema[]>()(this, url, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ScopeSchema {\n  id: number;\n  environment_scope: string;\n}\nexport interface StrategySchema {\n  id: number;\n  name: string;\n  parameters: {\n    user_ids: string;\n  };\n  scopes?: ScopeSchema[];\n}\n\nexport interface FeatureFlagSchema extends Record<string, unknown> {\n  name: string;\n  description: string;\n  active: boolean;\n  version: string;\n  created_at: string;\n  updated_at: string;\n  scopes?: string[];\n  strategies?: StrategySchema[];\n}\n\nexport class FeatureFlags<C extends boolean = false> extends BaseService<C> {\n  all(\n    projectId: string | number,\n    options: { scopes?: 'enabled' | 'disabled' } & PaginatedRequestOptions = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<FeatureFlagSchema[]>()(\n      this,\n      `projects/${pId}/features_flags`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    flagName: string,\n    version: string,\n    options?: BaseRequestOptions,\n  ) {\n    const [pId, fName, ver] = [projectId, flagName, version].map(encodeURIComponent);\n\n    return RequestHelper.post<FeatureFlagSchema>()(this, `projects/${pId}/features_flags`, {\n      version: ver,\n      name: fName,\n      ...options,\n    });\n  }\n\n  edit(projectId: string | number, flagName: string, options?: BaseRequestOptions) {\n    const [pId, fName] = [projectId, flagName].map(encodeURIComponent);\n\n    return RequestHelper.put<FeatureFlagSchema>()(\n      this,\n      `projects/${pId}/features_flags/${fName}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, flagName: string, options?: Sudo) {\n    const [pId, fName] = [projectId, flagName].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/features_flags/${fName}`, options);\n  }\n\n  show(projectId: string | number, flagName: string, options?: Sudo) {\n    const [pId, fName] = [projectId, flagName].map(encodeURIComponent);\n\n    return RequestHelper.get<FeatureFlagSchema>()(\n      this,\n      `projects/${pId}/features_flags/${fName}`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface GeoNodeSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  url: string;\n  internal_url: string;\n  primary: boolean;\n  enabled: boolean;\n  current: boolean;\n  files_max_capacity: number;\n  repos_max_capacity: number;\n  verification_max_capacity: number;\n  selective_sync_type: string;\n  selective_sync_shards?: string[];\n  selective_sync_namespace_ids?: number[];\n  minimum_reverification_interval: number;\n  container_repositories_max_capacity: number;\n  sync_object_storage: boolean;\n  clone_protocol: string;\n  web_edit_url: string;\n  web_geo_projects_url: string;\n  _links: {\n    self: string;\n    status: string;\n    repair: string;\n  };\n}\n\nexport interface GeoNodeFailureSchema extends Record<string, unknown> {\n  project_id: number;\n  last_repository_synced_at: string;\n  last_repository_successful_sync_at: string;\n  last_wiki_synced_at: string;\n  last_wiki_successful_sync_at: string;\n  repository_retry_count?: number;\n  wiki_retry_count: number;\n  last_repository_sync_failure?: string;\n  last_wiki_sync_failure: string;\n  last_repository_verification_failure: string;\n  last_wiki_verification_failure: string;\n  repository_verification_checksum_sha: string;\n  wiki_verification_checksum_sha: string;\n  repository_checksum_mismatch: boolean;\n  wiki_checksum_mismatch: boolean;\n}\n\nexport interface GeoNodeStatusSchema extends Record<string, unknown> {\n  geo_node_id: number;\n  healthy: boolean;\n  health: string;\n  health_status: string;\n  missing_oauth_application: boolean;\n  attachments_count: number;\n  attachments_synced_count?: number;\n  attachments_failed_count?: number;\n  attachments_synced_missing_on_primary_count: number;\n  attachments_synced_in_percentage: string;\n  db_replication_lag_seconds?: number;\n  lfs_objects_count: number;\n  lfs_objects_synced_count?: number;\n  lfs_objects_failed_count?: number;\n  lfs_objects_synced_missing_on_primary_count: number;\n  lfs_objects_synced_in_percentage: string;\n  job_artifacts_count: number;\n  job_artifacts_synced_count?: number;\n  job_artifacts_failed_count?: number;\n  job_artifacts_synced_missing_on_primary_count: number;\n  job_artifacts_synced_in_percentage: string;\n  container_repositories_count: number;\n  container_repositories_synced_count?: number;\n  container_repositories_failed_count?: number;\n  container_repositories_synced_in_percentage: string;\n  design_repositories_count: number;\n  design_repositories_synced_count?: number;\n  design_repositories_failed_count?: number;\n  design_repositories_synced_in_percentage: string;\n  projects_count: number;\n  repositories_count: number;\n  repositories_failed_count?: number;\n  repositories_synced_count?: number;\n  repositories_synced_in_percentage: string;\n  wikis_count: number;\n  wikis_failed_count?: number;\n  wikis_synced_count?: number;\n  wikis_synced_in_percentage: string;\n  replication_slots_count: number;\n  replication_slots_used_count: number;\n  replication_slots_used_in_percentage: string;\n  replication_slots_max_retained_wal_bytes: number;\n  repositories_checked_count: number;\n  repositories_checked_failed_count: number;\n  repositories_checked_in_percentage: string;\n  repositories_checksummed_count: number;\n  repositories_checksum_failed_count: number;\n  repositories_checksummed_in_percentage: string;\n  wikis_checksummed_count: number;\n  wikis_checksum_failed_count: number;\n  wikis_checksummed_in_percentage: string;\n  repositories_verified_count: number;\n  repositories_verification_failed_count: number;\n  repositories_verified_in_percentage: string;\n  repositories_checksum_mismatch_count: number;\n  wikis_verified_count: number;\n  wikis_verification_failed_count: number;\n  wikis_verified_in_percentage: string;\n  wikis_checksum_mismatch_count: number;\n  repositories_retrying_verification_count: number;\n  wikis_retrying_verification_count: number;\n  last_event_id: number;\n  last_event_timestamp: number;\n  cursor_last_event_id?: number;\n  cursor_last_event_timestamp: number;\n  last_successful_status_check_timestamp: number;\n  version: string;\n  revision: string;\n  package_files_count: number;\n  package_files_checksummed_count: number;\n  package_files_checksum_failed_count: number;\n  package_files_registry_count: number;\n  package_files_synced_count: number;\n  package_files_failed_count: number;\n  snippet_repositories_count: number;\n  snippet_repositories_checksummed_count: number;\n  snippet_repositories_checksum_failed_count: number;\n  snippet_repositories_registry_count: number;\n  snippet_repositories_synced_count: number;\n  snippet_repositories_failed_count: number;\n  group_wiki_repositories_checksummed_count: number;\n  group_wiki_repositories_checksum_failed_count: number;\n  group_wiki_repositories_registry_count: number;\n  group_wiki_repositories_synced_count: number;\n  group_wiki_repositories_failed_count: number;\n}\n\nexport class GeoNodes<C extends boolean = false> extends BaseService<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<GeoNodeSchema[]>()(this, 'geo_nodes', options);\n  }\n\n  create(geonodeId: number, options?: BaseRequestOptions) {\n    const gId = encodeURIComponent(geonodeId);\n\n    return RequestHelper.post<GeoNodeSchema>()(this, `geo_nodes/${gId}`, options);\n  }\n\n  edit(geonodeId: number, options?: BaseRequestOptions) {\n    const gId = encodeURIComponent(geonodeId);\n\n    return RequestHelper.put<GeoNodeSchema>()(this, `geo_nodes/${gId}`, options);\n  }\n\n  failures(options?: BaseRequestOptions) {\n    return RequestHelper.get<GeoNodeFailureSchema[]>()(this, 'geo_nodes/current/failures', options);\n  }\n\n  repair(geonodeId: number, options?: Sudo) {\n    const gId = encodeURIComponent(geonodeId);\n\n    return RequestHelper.post<GeoNodeSchema>()(this, `geo_nodes/${gId}/repair`, options);\n  }\n\n  remove(geonodeId: number, options?: Sudo) {\n    const gId = encodeURIComponent(geonodeId);\n\n    return RequestHelper.del<GeoNodeSchema>()(this, `geo_nodes/${gId}`, options);\n  }\n\n  show(geonodeId: number, options?: Sudo) {\n    const gId = encodeURIComponent(geonodeId);\n\n    return RequestHelper.get<GeoNodeSchema>()(this, `geo_nodes/${gId}`, options);\n  }\n\n  status(geonodeId: number, options?: Sudo) {\n    const gId = encodeURIComponent(geonodeId);\n\n    return RequestHelper.get<GeoNodeStatusSchema>()(this, `geo_nodes/${gId}/status`, options);\n  }\n\n  statuses(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<GeoNodeStatusSchema[]>()(this, 'geo_nodes/statuses', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceTemplates } from '../templates';\n\nexport class GitignoreTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('gitignores', options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceTemplates } from '../templates';\n\nexport class GitLabCIYMLTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('gitlab_ci_ymls', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserExtendedSchema } from './Users';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport interface KeySchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  key: string;\n  created_at: string;\n  expires_at: string;\n  user: UserExtendedSchema;\n}\n\nexport class Keys<C extends boolean = false> extends BaseService<C> {\n  show(keyId: string, options?: Sudo) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.get<KeySchema>()(this, `keys/${kId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport interface LicenseSchema extends Record<string, unknown> {\n  id: number;\n  plan: string;\n  created_at: string;\n  starts_at: string;\n  expires_at: string;\n  historical_max: number;\n  maximum_user_count: number;\n  expired: boolean;\n  overage: number;\n  user_limit: number;\n  active_users: number;\n  licensee: {\n    Name: string;\n  };\n  add_ons: {\n    GitLab_FileLocks: number;\n    GitLab_Auditor_User: number;\n  };\n}\n\nexport class License<C extends boolean = false> extends BaseService<C> {\n  add(license: string, options?: Sudo) {\n    return RequestHelper.post<LicenseSchema>()(this, 'license', { license, ...options });\n  }\n\n  all(options?: Sudo) {\n    return RequestHelper.get<LicenseSchema[]>()(this, 'licenses', options);\n  }\n\n  show(options?: Sudo) {\n    return RequestHelper.get<LicenseSchema>()(this, 'license', options);\n  }\n\n  remove(licenceId: number, options?: Sudo) {\n    const lId = encodeURIComponent(licenceId);\n\n    return RequestHelper.del<LicenseSchema>()(this, `license/${lId}`, options);\n  }\n}\n","import { BaseServiceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceTemplates } from '../templates';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface LicenseTemplateSchema extends Record<string, unknown> {\n  key: string;\n  name: string;\n  nickname?: string;\n  featured: boolean;\n  html_url: string;\n  source_url: string;\n  description: string;\n  conditions?: string[];\n  permissions?: string[];\n  limitations?: string[];\n  content: string;\n}\n\nexport interface LicenseTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  all(options?: PaginatedRequestOptions): Promise<CamelizedRecord<C, LicenseTemplateSchema>[]>;\n  show(key: string | number, options?: Sudo): Promise<CamelizedRecord<C, LicenseTemplateSchema>>;\n}\n\nexport class LicenseTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  constructor(options: BaseServiceOptions<C>) {\n    /* istanbul ignore next */\n    super('Licenses', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport interface LintSchema extends Record<string, unknown> {\n  status: string;\n  errors?: string[];\n  warnings?: string[];\n}\n\nexport class Lint<C extends boolean = false> extends BaseService<C> {\n  lint(content: string, options?: Sudo) {\n    return RequestHelper.post<LintSchema>()(this, 'ci/lint', { content, ...options });\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\nexport interface NamespaceSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  path: string;\n  kind: string;\n  full_path: string;\n  parent_id?: number;\n  avatar_url: string;\n  web_url: string;\n  billable_members_count: number;\n  plan: string;\n  trial_ends_on?: string;\n  trial: boolean;\n}\n\n// TODO: Add missing functions\nexport class Namespaces<C extends boolean = false> extends BaseService<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<NamespaceSchema[]>()(this, 'namespaces', options);\n  }\n\n  show(namespaceId: string | number, options?: { search?: string } & Sudo) {\n    const nId = encodeURIComponent(namespaceId);\n\n    return RequestHelper.get<NamespaceSchema>()(this, `namespaces/${nId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, PaginatedRequestOptions, RequestHelper } from '../infrastructure';\n\n// TODO: Add missing functions\n\nexport type NotificationSettingLevel =\n  | 'disabled'\n  | 'participating'\n  | 'watch'\n  | 'global'\n  | 'mention'\n  | 'custom';\n\nexport interface NotificationSettingSchema extends Record<string, unknown> {\n  level: NotificationSettingLevel;\n  notification_email: string;\n}\n\ntype ProjectOrGroup = { projectId?: string | number } | { groupId?: string | number };\n\nfunction url({ projectId, groupId }) {\n  let uri = '';\n\n  if (projectId) {\n    uri += `projects/${encodeURIComponent(projectId)}/`;\n  } else if (groupId) {\n    uri += `groups/${encodeURIComponent(groupId)}/`;\n  }\n\n  return `${uri}notification_settings`;\n}\n\nexport class NotificationSettings<C extends boolean = false> extends BaseService<C> {\n  all({ projectId, groupId, ...options }: ProjectOrGroup & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<NotificationSettingSchema[]>()(\n      this,\n      url({ groupId, projectId }),\n      options,\n    );\n  }\n\n  edit({\n    projectId,\n    groupId,\n    ...options\n  }: { level?: NotificationSettingLevel } & ProjectOrGroup & BaseRequestOptions = {}) {\n    return RequestHelper.put<NotificationSettingSchema>()(\n      this,\n      url({ groupId, projectId }),\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport interface MarkdownSchema extends Record<string, unknown> {\n  html: string;\n}\n\nexport class Markdown<C extends boolean = false> extends BaseService<C> {\n  render(text: string, options?: { gfm?: string; project?: string | number } & Sudo) {\n    return RequestHelper.post<MarkdownSchema>()(this, 'markdown', { text, ...options });\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface PagesDomainSchema extends Record<string, unknown> {\n  domain: string;\n  url: string;\n  project_id: number;\n  auto_ssl_enabled: boolean;\n  certificate: {\n    expired: boolean;\n    expiration: string;\n  };\n}\n\n// TODO: Add missing functions\n\nexport class PagesDomains<C extends boolean = false> extends BaseService<C> {\n  all({ projectId, ...options }: { projectId?: string | number } & PaginatedRequestOptions = {}) {\n    const url = projectId ? `projects/${encodeURIComponent(projectId)}/` : '';\n\n    return RequestHelper.get<PagesDomainSchema[]>()(this, `${url}pages/domains`, options);\n  }\n\n  create(projectId: string | number, domain: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<PagesDomainSchema>()(this, `projects/${pId}/pages/domains`, {\n      domain,\n      ...options,\n    });\n  }\n\n  edit(projectId: string | number, domain: string, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.put<PagesDomainSchema>()(\n      this,\n      `projects/${pId}/pages/domains/${domain}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, domain: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<PagesDomainSchema>()(\n      this,\n      `projects/${pId}/pages/domains/${domain}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, domain: string, options?: Sudo) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.del()(this, `projects/${pId}/pages/domains/${domain}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, BaseRequestOptions } from '../infrastructure';\n\nexport interface SearchResultSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  name: string;\n  name_with_namespace: string;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  default_branch: string;\n  tag_list?: string[];\n  ssh_url_to_repo: string;\n  http_url_to_repo: string;\n  web_url: string;\n  avatar_url?: string;\n  star_count: number;\n  forks_count: number;\n  last_activity_at: string;\n}\n\nexport class Search<C extends boolean = false> extends BaseService<C> {\n  all(\n    scope: string,\n    search: string,\n    {\n      projectId,\n      groupId,\n      ...options\n    }: { projectId?: string | number; groupId?: string | number } & BaseRequestOptions = {},\n  ) {\n    let url = '';\n\n    if (projectId) {\n      url += `projects/${encodeURIComponent(projectId)}/`;\n    } else if (groupId) {\n      url += `groups/${encodeURIComponent(groupId)}/`;\n    }\n\n    return RequestHelper.get<SearchResultSchema[]>()(this, `${url}search`, {\n      scope,\n      search,\n      ...options,\n    });\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper } from '../infrastructure';\n\nexport interface ProcessMetricSchema {\n  hostname: string;\n  pid: number;\n  tag: string;\n  started_at: string;\n  queues?: string[];\n  labels?: string[];\n  concurrency: number;\n  busy: number;\n}\n\nexport interface SidekickProcessMetricsSchema extends Record<string, unknown> {\n  processes?: ProcessMetricSchema[];\n}\n\nexport interface SidekickQueueMetricsSchema extends Record<string, unknown> {\n  queues: {\n    default: {\n      backlog: number;\n      latency: number;\n    };\n  };\n}\n\nexport interface SidekickJobStatsSchema extends Record<string, unknown> {\n  jobs: {\n    processed: number;\n    failed: number;\n    enqueued: number;\n    dead: number;\n  };\n}\n\nexport interface SidekickCompoundMetricsSchema\n  extends SidekickJobStatsSchema,\n    SidekickQueueMetricsSchema,\n    SidekickProcessMetricsSchema {}\n\nexport class SidekiqMetrics<C extends boolean = false> extends BaseService<C> {\n  queueMetrics() {\n    return RequestHelper.get<SidekickQueueMetricsSchema>()(this, 'sidekiq/queue_metrics');\n  }\n\n  processMetrics() {\n    return RequestHelper.get<SidekickProcessMetricsSchema>()(this, 'sidekiq/process_metrics');\n  }\n\n  jobStats() {\n    return RequestHelper.get<SidekickJobStatsSchema>()(this, 'sidekiq/job_stats');\n  }\n\n  compoundMetrics() {\n    return RequestHelper.get<SidekickCompoundMetricsSchema>()(this, 'sidekiq/compound_metrics');\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport type SnippetVisibility = 'private' | 'public' | 'internal';\n\nexport interface SnippetSchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  file_name: string;\n  description?: string;\n  visibility: string;\n  author: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  updated_at: string;\n  created_at: string;\n  project_id?: string | number;\n  web_url: string;\n  raw_url: string;\n}\n\nexport interface FileSchema {\n  path: string;\n  raw_url: string;\n}\n\nexport interface SnippetExtendedSchema extends SnippetSchema {\n  expires_at?: string;\n  ssh_url_to_repo: string;\n  http_url_to_repo: string;\n  files?: FileSchema[];\n}\n\nexport interface UserAgentDetailSchema extends Record<string, unknown> {\n  user_agent: string;\n  ip_address: string;\n  akismet_submitted: boolean;\n}\n\nexport class Snippets<C extends boolean = false> extends BaseService<C> {\n  all({ public: p, ...options }: { public?: boolean } & PaginatedRequestOptions = {}) {\n    const url = p ? 'snippets/public' : 'snippets';\n\n    return RequestHelper.get<SnippetSchema[]>()(this, url, options);\n  }\n\n  content(snippetId: number, options?: Sudo) {\n    const sId = encodeURIComponent(snippetId);\n\n    return RequestHelper.get()(this, `snippets/${sId}/raw`, options);\n  }\n\n  create(\n    title: string,\n    fileName: string,\n    content: string,\n    visibility: SnippetVisibility,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<SnippetExtendedSchema>()(this, 'snippets', {\n      title,\n      fileName,\n      content,\n      visibility,\n      ...options,\n    });\n  }\n\n  edit(snippetId: number, options?: BaseRequestOptions) {\n    const sId = encodeURIComponent(snippetId);\n\n    return RequestHelper.put<SnippetExtendedSchema>()(this, `snippets/${sId}`, options);\n  }\n\n  remove(snippetId: number, options?: Sudo) {\n    const sId = encodeURIComponent(snippetId);\n\n    return RequestHelper.del()(this, `snippets/${sId}`, options);\n  }\n\n  show(snippetId: number, options?: Sudo) {\n    const sId = encodeURIComponent(snippetId);\n\n    return RequestHelper.get<SnippetSchema>()(this, `snippets/${sId}`, options);\n  }\n\n  userAgentDetails(snippetId: number, options?: Sudo) {\n    const sId = encodeURIComponent(snippetId);\n\n    return RequestHelper.get<UserAgentDetailSchema>()(\n      this,\n      `snippets/${sId}/user_agent_detail`,\n      options,\n    );\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface SystemHookSchema extends Record<string, unknown> {\n  id: number;\n  url: string;\n  created_at: string;\n  push_events: boolean;\n  tag_push_events: boolean;\n  merge_requests_events: boolean;\n  repository_update_events: boolean;\n  enable_ssl_verification: boolean;\n}\n\nexport class SystemHooks<C extends boolean = false> extends BaseService<C> {\n  add(url: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<SystemHookSchema>()(this, 'hooks', { url, ...options });\n  }\n\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<SystemHookSchema[]>()(this, 'hooks', options);\n  }\n\n  edit(hookId: number, url: string, options?: BaseRequestOptions) {\n    const hId = encodeURIComponent(hookId);\n\n    return RequestHelper.put<SystemHookSchema>()(this, `hooks/${hId}`, { url, ...options });\n  }\n\n  remove(hookId: number, options?: Sudo) {\n    const hId = encodeURIComponent(hookId);\n\n    return RequestHelper.del()(this, `hooks/${hId}`, options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\ninterface VersionSchema extends Record<string, unknown> {\n  version: string;\n  revision: string;\n}\n\nexport class Version<C extends boolean = false> extends BaseService<C> {\n  show(options?: Sudo) {\n    return RequestHelper.get<VersionSchema>()(this, 'version', options);\n  }\n}\n","import { BaseService } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface WikiSchema extends Record<string, unknown> {\n  content: string;\n  format: string;\n  slug: string;\n  title: string;\n}\n\nexport class Wikis<C extends boolean = false> extends BaseService<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<WikiSchema[]>()(this, `projects/${pId}/wikis`, options);\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.post<WikiSchema>()(this, `projects/${pId}/wikis`, options);\n  }\n\n  edit(projectId: string | number, slug: string, options?: BaseRequestOptions) {\n    const [pId, s] = [projectId, slug].map(encodeURIComponent);\n\n    return RequestHelper.put<WikiSchema>()(this, `projects/${pId}/wikis/${s}`, options);\n  }\n\n  show(projectId: string | number, slug: string, options?: Sudo) {\n    const [pId, s] = [projectId, slug].map(encodeURIComponent);\n\n    return RequestHelper.get<WikiSchema>()(this, `projects/${pId}/wikis/${s}`, options);\n  }\n\n  remove(projectId: string | number, slug: string, options?: Sudo) {\n    const [pId, s] = [projectId, slug].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/wikis/${s}`, options);\n  }\n}\n","import { bundler } from './infrastructure';\nimport * as APIServices from './services';\n\n/* -------------- Export Map ------------- */\nexport function getAPIMap(): Record<string, unknown> {\n  const map = '__apiMap__';\n\n  if (!map.includes('{')) {\n    throw new Error('This function is only available in the distributed code');\n  }\n\n  return JSON.parse(map);\n}\n\n/* -------------- Single Services ------------- */\nexport * from './services';\n\n/* ------------------ Bundles ----------------- */\n\n// Groups\nexport const GroupsBundle = bundler({\n  Groups: APIServices.Groups,\n  GroupAccessRequests: APIServices.GroupAccessRequests,\n  GroupBadges: APIServices.GroupBadges,\n  GroupCustomAttributes: APIServices.GroupCustomAttributes,\n  GroupIssueBoards: APIServices.GroupIssueBoards,\n  GroupMembers: APIServices.GroupMembers,\n  GroupMilestones: APIServices.GroupMilestones,\n  GroupRunners: APIServices.GroupRunners,\n  GroupVariables: APIServices.GroupVariables,\n  GroupLabels: APIServices.GroupLabels,\n  GroupDeployTokens: APIServices.GroupDeployTokens,\n  Epics: APIServices.Epics,\n  EpicIssues: APIServices.EpicIssues,\n  EpicNotes: APIServices.EpicNotes,\n  EpicDiscussions: APIServices.EpicDiscussions,\n});\n\n// Users\nexport const UsersBundle = bundler({\n  Users: APIServices.Users,\n  UserCustomAttributes: APIServices.UserCustomAttributes,\n  UserEmails: APIServices.UserEmails,\n  UserImpersonationTokens: APIServices.UserImpersonationTokens,\n  UserSSHKeys: APIServices.UserSSHKeys,\n  UserGPGKeys: APIServices.UserGPGKeys,\n});\n\n// Projects\nexport const ProjectsBundle = bundler({\n  Branches: APIServices.Branches,\n  Commits: APIServices.Commits,\n  CommitDiscussions: APIServices.CommitDiscussions,\n  ContainerRegistry: APIServices.ContainerRegistry,\n  DeployKeys: APIServices.DeployKeys,\n  Deployments: APIServices.Deployments,\n  Environments: APIServices.Environments,\n  FreezePeriods: APIServices.FreezePeriods,\n  Issues: APIServices.Issues,\n  IssuesStatistics: APIServices.IssuesStatistics,\n  IssueAwardEmojis: APIServices.IssueAwardEmojis,\n  IssueNotes: APIServices.IssueNotes,\n  IssueNoteAwardEmojis: APIServices.IssueNoteAwardEmojis,\n  IssueDiscussions: APIServices.IssueDiscussions,\n  Jobs: APIServices.Jobs,\n  Labels: APIServices.Labels,\n  MergeRequests: APIServices.MergeRequests,\n  MergeRequestApprovals: APIServices.MergeRequestApprovals,\n  MergeRequestAwardEmojis: APIServices.MergeRequestAwardEmojis,\n  MergeRequestDiscussions: APIServices.MergeRequestDiscussions,\n  MergeRequestNotes: APIServices.MergeRequestNotes,\n  Packages: APIServices.Packages,\n  Pipelines: APIServices.Pipelines,\n  PipelineSchedules: APIServices.PipelineSchedules,\n  PipelineScheduleVariables: APIServices.PipelineScheduleVariables,\n  Projects: APIServices.Projects,\n  ProjectAccessRequests: APIServices.ProjectAccessRequests,\n  ProjectBadges: APIServices.ProjectBadges,\n  ProjectCustomAttributes: APIServices.ProjectCustomAttributes,\n  ProjectImportExport: APIServices.ProjectImportExport,\n  ProjectIssueBoards: APIServices.ProjectIssueBoards,\n  ProjectHooks: APIServices.ProjectHooks,\n  ProjectMembers: APIServices.ProjectMembers,\n  ProjectMilestones: APIServices.ProjectMilestones,\n  ProjectSnippets: APIServices.ProjectSnippets,\n  ProjectSnippetNotes: APIServices.ProjectSnippetNotes,\n  ProjectSnippetDiscussions: APIServices.ProjectSnippetDiscussions,\n  ProjectSnippetAwardEmojis: APIServices.ProjectSnippetAwardEmojis,\n  ProtectedBranches: APIServices.ProtectedBranches,\n  ProtectedTags: APIServices.ProtectedTags,\n  ProjectVariables: APIServices.ProjectVariables,\n  ProjectDeployTokens: APIServices.ProjectDeployTokens,\n  PushRules: APIServices.PushRules,\n  Releases: APIServices.Releases,\n  ReleaseLinks: APIServices.ReleaseLinks,\n  Repositories: APIServices.Repositories,\n  RepositoryFiles: APIServices.RepositoryFiles,\n  Runners: APIServices.Runners,\n  Services: APIServices.Services,\n  Tags: APIServices.Tags,\n  Todos: APIServices.Todos,\n  Triggers: APIServices.Triggers,\n  VulnerabilityFindings: APIServices.VulnerabilityFindings,\n});\n\n// All initialized\nexport const Gitlab = bundler(APIServices);\n\n/* ---------------- Bundles Types-------------- */\nexport type UsersBundle = InstanceType<typeof UsersBundle>;\nexport type GroupsBundle = InstanceType<typeof GroupsBundle>;\nexport type ProjectsBundle = InstanceType<typeof ProjectsBundle>;\nexport type Gitlab = InstanceType<typeof Gitlab>;\n"],"names":["parseLink","__objSpread","url","APIServices.Groups","APIServices.GroupAccessRequests","APIServices.GroupBadges","APIServices.GroupCustomAttributes","APIServices.GroupIssueBoards","APIServices.GroupMembers","APIServices.GroupMilestones","APIServices.GroupRunners","APIServices.GroupVariables","APIServices.GroupLabels","APIServices.GroupDeployTokens","APIServices.Epics","APIServices.EpicIssues","APIServices.EpicNotes","APIServices.EpicDiscussions","APIServices.Users","APIServices.UserCustomAttributes","APIServices.UserEmails","APIServices.UserImpersonationTokens","APIServices.UserSSHKeys","APIServices.UserGPGKeys","APIServices.Branches","APIServices.Commits","APIServices.CommitDiscussions","APIServices.ContainerRegistry","APIServices.DeployKeys","APIServices.Deployments","APIServices.Environments","APIServices.FreezePeriods","APIServices.Issues","APIServices.IssuesStatistics","APIServices.IssueAwardEmojis","APIServices.IssueNotes","APIServices.IssueNoteAwardEmojis","APIServices.IssueDiscussions","APIServices.Jobs","APIServices.Labels","APIServices.MergeRequests","APIServices.MergeRequestApprovals","APIServices.MergeRequestAwardEmojis","APIServices.MergeRequestDiscussions","APIServices.MergeRequestNotes","APIServices.Packages","APIServices.Pipelines","APIServices.PipelineSchedules","APIServices.PipelineScheduleVariables","APIServices.Projects","APIServices.ProjectAccessRequests","APIServices.ProjectBadges","APIServices.ProjectCustomAttributes","APIServices.ProjectImportExport","APIServices.ProjectIssueBoards","APIServices.ProjectHooks","APIServices.ProjectMembers","APIServices.ProjectMilestones","APIServices.ProjectSnippets","APIServices.ProjectSnippetNotes","APIServices.ProjectSnippetDiscussions","APIServices.ProjectSnippetAwardEmojis","APIServices.ProtectedBranches","APIServices.ProtectedTags","APIServices.ProjectVariables","APIServices.ProjectDeployTokens","APIServices.PushRules","APIServices.Releases","APIServices.ReleaseLinks","APIServices.Repositories","APIServices.RepositoryFiles","APIServices.Runners","APIServices.Services","APIServices.Tags","APIServices.Todos","APIServices.Triggers","APIServices.VulnerabilityFindings"],"mappings":"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"}