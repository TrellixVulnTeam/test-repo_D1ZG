import { decamelizeKeys } from 'xcase';
import { stringify } from 'query-string';

var __defProp$1 = Object.defineProperty;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
function formatQuery(params = {}) {
  const decamelized = decamelizeKeys(params);
  if (decamelized.not)
    decamelized.not = JSON.stringify(decamelized.not);
  return stringify(decamelized, {arrayFormat: "bracket"});
}
function defaultOptionsHandler(serviceOptions, {body, query, sudo, method = "get"} = {}) {
  const {headers, requestTimeout, url} = serviceOptions;
  let bod;
  if (sudo)
    headers.sudo = sudo;
  if (typeof body === "object" && body.constructor.name !== "FormData") {
    bod = JSON.stringify(decamelizeKeys(body));
    headers["content-type"] = "application/json";
  } else {
    bod = body;
  }
  return {
    headers,
    timeout: requestTimeout,
    method,
    searchParams: formatQuery(query),
    prefixUrl: url,
    body: bod
  };
}
function createRequesterFn(optionsHandler, requestHandler) {
  const methods = ["get", "post", "put", "delete", "stream"];
  return (serviceOptions) => {
    const requester = {};
    methods.forEach((m) => {
      requester[m] = (endpoint, options) => {
        const requestOptions = optionsHandler(serviceOptions, __objSpread$1(__objSpread$1({}, options), {method: m}));
        return requestHandler(endpoint, requestOptions);
      };
    });
    return requester;
  };
}
function extendClass(Base, customConfig) {
  return class extends Base {
    constructor(...options) {
      const [config, ...opts] = options;
      super(__objSpread$1(__objSpread$1({}, customConfig), config), ...opts);
    }
  };
}
function modifyServices(services, customConfig = {}) {
  const updated = {};
  Object.entries(services).forEach(([k, s]) => {
    updated[k] = extendClass(s, customConfig);
  });
  return updated;
}
async function wait(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
class BaseService {
  constructor({
    token,
    jobToken,
    oauthToken,
    sudo,
    profileToken,
    requesterFn,
    camelize,
    profileMode = "execution",
    host = "https://gitlab.com",
    prefixUrl = "",
    version = 4,
    rejectUnauthorized = true,
    requestTimeout = 3e5
  } = {}) {
    if (!requesterFn)
      throw new ReferenceError("requesterFn must be passed");
    this.url = [host, "api", `v${version}`, prefixUrl].join("/");
    this.headers = {
      "user-agent": "gitbeaker"
    };
    this.rejectUnauthorized = rejectUnauthorized;
    this.camelize = camelize;
    this.requestTimeout = requestTimeout;
    if (oauthToken)
      this.headers.authorization = `Bearer ${oauthToken}`;
    else if (jobToken)
      this.headers["job-token"] = jobToken;
    else if (token)
      this.headers["private-token"] = token;
    if (profileToken) {
      this.headers["X-Profile-Token"] = profileToken;
      this.headers["X-Profile-Mode"] = profileMode;
    }
    if (sudo)
      this.headers.Sudo = `${sudo}`;
    this.requester = requesterFn(__objSpread({}, this));
  }
}

export { BaseService, createRequesterFn, defaultOptionsHandler, formatQuery, modifyServices, wait };
//# sourceMappingURL=index.es.js.map
