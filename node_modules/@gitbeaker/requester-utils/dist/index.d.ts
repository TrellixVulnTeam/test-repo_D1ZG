import FormData from 'form-data';

interface Constructable<T = any> {
    new (...args: any[]): T;
}
interface RequesterType {
    get(endpoint: string, options?: Record<string, unknown>): Promise<any>;
    post(endpoint: string, options?: Record<string, unknown>): Promise<any>;
    put(endpoint: string, options?: Record<string, unknown>): Promise<any>;
    delete(endpoint: string, options?: Record<string, unknown>): Promise<any>;
    stream?(endpoint: string, options?: Record<string, unknown>): NodeJS.ReadableStream;
}
declare type DefaultServiceOptions = {
    headers: {
        [header: string]: string;
    };
    requestTimeout: number;
    url: string;
    rejectUnauthorized: boolean;
};
declare type DefaultRequestOptions = {
    body?: FormData | Record<string, unknown>;
    query?: Record<string, unknown>;
    sudo?: string;
    method?: string;
};
declare type DefaultRequestReturn = {
    headers: Record<string, string> | Headers;
    timeout?: number;
    method: string;
    searchParams?: string;
    prefixUrl?: string;
    body?: string | FormData;
};
declare function formatQuery(params?: Record<string, unknown>): string;
declare function defaultOptionsHandler(serviceOptions: DefaultServiceOptions, { body, query, sudo, method }?: DefaultRequestOptions): DefaultRequestReturn;
declare function createRequesterFn(optionsHandler: Function, requestHandler: Function): (serviceOptions: DefaultServiceOptions) => RequesterType;
declare function modifyServices<T>(services: T, customConfig?: Record<string, unknown>): T;
declare function wait(ms: number): Promise<void>;

interface BaseServiceOptions<C> {
    oauthToken?: string;
    token?: string;
    jobToken?: string;
    host?: string;
    prefixUrl?: string;
    version?: 3 | 4;
    rejectUnauthorized?: boolean;
    camelize?: C;
    requesterFn?: (serviceOptions: DefaultServiceOptions) => RequesterType;
    requestTimeout?: number;
    profileToken?: string;
    sudo?: string | number;
    profileMode?: 'execution' | 'memory';
}
declare class BaseService<C extends boolean = false> {
    readonly url: string;
    readonly requester: RequesterType;
    readonly requestTimeout: number;
    readonly headers: {
        [header: string]: string;
    };
    readonly camelize: C | undefined;
    readonly rejectUnauthorized: boolean;
    constructor({ token, jobToken, oauthToken, sudo, profileToken, requesterFn, camelize, profileMode, host, prefixUrl, version, rejectUnauthorized, requestTimeout, }?: BaseServiceOptions<C>);
}

export { BaseService, BaseServiceOptions, Constructable, DefaultRequestOptions, DefaultRequestReturn, DefaultServiceOptions, RequesterType, createRequesterFn, defaultOptionsHandler, formatQuery, modifyServices, wait };
