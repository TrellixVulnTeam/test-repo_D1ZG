{"version":3,"file":"index.es.js","sources":["../src/RequesterUtils.ts","../src/BaseService.ts"],"sourcesContent":["import { decamelizeKeys } from 'xcase';\nimport FormData from 'form-data';\nimport { stringify } from 'query-string';\n\n// Types\nexport interface Constructable<T = any> {\n  new (...args: any[]): T;\n}\n\nexport interface RequesterType {\n  get(endpoint: string, options?: Record<string, unknown>): Promise<any>;\n  post(endpoint: string, options?: Record<string, unknown>): Promise<any>;\n  put(endpoint: string, options?: Record<string, unknown>): Promise<any>;\n  delete(endpoint: string, options?: Record<string, unknown>): Promise<any>;\n  stream?(endpoint: string, options?: Record<string, unknown>): NodeJS.ReadableStream;\n}\n\nexport type DefaultServiceOptions = {\n  headers: { [header: string]: string };\n  requestTimeout: number;\n  url: string;\n  rejectUnauthorized: boolean;\n};\n\nexport type DefaultRequestOptions = {\n  body?: FormData | Record<string, unknown>;\n  query?: Record<string, unknown>;\n  sudo?: string;\n  method?: string;\n};\n\nexport type DefaultRequestReturn = {\n  headers: Record<string, string> | Headers;\n  timeout?: number;\n  method: string;\n  searchParams?: string;\n  prefixUrl?: string;\n  body?: string | FormData;\n};\n\n// Utility methods\nexport function formatQuery(params: Record<string, unknown> = {}) {\n  const decamelized = decamelizeKeys(params);\n\n  if (decamelized.not) decamelized.not = JSON.stringify(decamelized.not);\n\n  return stringify(decamelized, { arrayFormat: 'bracket' });\n}\n\nexport function defaultOptionsHandler(\n  serviceOptions: DefaultServiceOptions,\n  { body, query, sudo, method = 'get' }: DefaultRequestOptions = {},\n): DefaultRequestReturn {\n  const { headers, requestTimeout, url } = serviceOptions;\n  let bod: FormData | string;\n\n  if (sudo) headers.sudo = sudo;\n\n  // FIXME: Not the best comparison, but...it will have to do for now.\n  if (typeof body === 'object' && body.constructor.name !== 'FormData') {\n    bod = JSON.stringify(decamelizeKeys(body));\n    headers['content-type'] = 'application/json';\n  } else {\n    bod = body as FormData;\n  }\n\n  return {\n    headers,\n    timeout: requestTimeout,\n    method,\n    searchParams: formatQuery(query),\n    prefixUrl: url,\n    body: bod,\n  };\n}\n\nexport function createRequesterFn(\n  optionsHandler: Function,\n  requestHandler: Function,\n): (serviceOptions: DefaultServiceOptions) => RequesterType {\n  const methods = ['get', 'post', 'put', 'delete', 'stream'];\n\n  return (serviceOptions) => {\n    const requester: RequesterType = {} as RequesterType;\n\n    methods.forEach((m) => {\n      requester[m] = (endpoint: string, options: Record<string, unknown>) => {\n        const requestOptions = optionsHandler(serviceOptions, { ...options, method: m });\n\n        return requestHandler(endpoint, requestOptions);\n      };\n    });\n\n    return requester;\n  };\n}\n\nfunction extendClass<T extends Constructable>(Base: T, customConfig: Record<string, unknown>): T {\n  return class extends Base {\n    constructor(...options: any[]) {\n      const [config, ...opts] = options;\n\n      super({ ...customConfig, ...config }, ...opts);\n    }\n  };\n}\n\nexport function modifyServices<T>(services: T, customConfig: Record<string, unknown> = {}) {\n  const updated = {};\n\n  Object.entries(services).forEach(([k, s]) => {\n    updated[k] = extendClass(s, customConfig);\n  });\n\n  return updated as T;\n}\n\nexport async function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import { RequesterType, DefaultServiceOptions } from './RequesterUtils';\n\nexport interface BaseServiceOptions<C> {\n  oauthToken?: string;\n  token?: string;\n  jobToken?: string;\n  host?: string;\n  prefixUrl?: string;\n  version?: 3 | 4;\n  rejectUnauthorized?: boolean;\n  camelize?: C;\n  requesterFn?: (serviceOptions: DefaultServiceOptions) => RequesterType;\n  requestTimeout?: number;\n  profileToken?: string;\n  sudo?: string | number;\n  profileMode?: 'execution' | 'memory';\n}\n\nexport class BaseService<C extends boolean = false> {\n  public readonly url: string;\n\n  public readonly requester: RequesterType;\n\n  public readonly requestTimeout: number;\n\n  public readonly headers: { [header: string]: string };\n\n  public readonly camelize: C | undefined;\n\n  public readonly rejectUnauthorized: boolean;\n\n  constructor({\n    token,\n    jobToken,\n    oauthToken,\n    sudo,\n    profileToken,\n    requesterFn,\n    camelize,\n    profileMode = 'execution',\n    host = 'https://gitlab.com',\n    prefixUrl = '',\n    version = 4,\n    rejectUnauthorized = true,\n    requestTimeout = 300000,\n  }: BaseServiceOptions<C> = {}) {\n    if (!requesterFn) throw new ReferenceError('requesterFn must be passed');\n\n    this.url = [host, 'api', `v${version}`, prefixUrl].join('/');\n\n    this.headers = {\n      'user-agent': 'gitbeaker',\n    };\n    this.rejectUnauthorized = rejectUnauthorized;\n    this.camelize = camelize;\n    this.requestTimeout = requestTimeout;\n\n    // Handle auth tokens\n    if (oauthToken) this.headers.authorization = `Bearer ${oauthToken}`;\n    else if (jobToken) this.headers['job-token'] = jobToken;\n    else if (token) this.headers['private-token'] = token;\n\n    // Profiling\n    if (profileToken) {\n      this.headers['X-Profile-Token'] = profileToken;\n      this.headers['X-Profile-Mode'] = profileMode;\n    }\n\n    // Set sudo\n    if (sudo) this.headers.Sudo = `${sudo}`;\n\n    // Set requester instance using this information\n    this.requester = requesterFn({ ...this });\n  }\n}\n"],"names":["__objSpread"],"mappings":";;;;;;;;;;;;;;;;;;;qBAyC4B,SAAkC,IAAI;AAChE,QAAM,cAAc,eAAe;AAEnC,MAAI,YAAY;AAAK,gBAAY,MAAM,KAAK,UAAU,YAAY;AAElE,SAAO,UAAU,aAAa,CAAE,aAAa;AAAA;+BAI7C,gBACA,CAAE,MAAM,OAAO,MAAM,SAAS,SAAiC,IACzC;AACtB,QAAM,CAAE,SAAS,gBAAgB,OAAQ;AACzC,MAAI;AAEJ,MAAI;AAAM,YAAQ,OAAO;AAGzB,MAAI,OAAO,SAAS,YAAY,KAAK,YAAY,SAAS,YAAY;AACpE,UAAM,KAAK,UAAU,eAAe;AACpC,YAAQ,kBAAkB;AAAA,SACrB;AACL,UAAM;AAAA;AAGR,SAAO;AAAA,IACL;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,cAAc,YAAY;AAAA,IAC1B,WAAW;AAAA,IACX,MAAM;AAAA;AAAA;2BAKR,gBACA,gBAC0D;AAC1D,QAAM,UAAU,CAAC,OAAO,QAAQ,OAAO,UAAU;AAEjD,SAAO,CAAC,mBAAmB;AACzB,UAAM,YAA2B;AAEjC,YAAQ,QAAQ,CAAC,MAAM;AACrB,gBAAU,KAAK,CAAC,UAAkB,YAAqC;AACrE,cAAM,iBAAiB,eAAe,gBAAgBA,gCAAK,UAAL,CAAc,QAAQ;AAE5E,eAAO,eAAe,UAAU;AAAA;AAAA;AAIpC,WAAO;AAAA;AAAA;AAIX,qBAA8C,MAAS,cAA0C;AAC/F,SAAO,cAAc,KAAK;AAAA,IACxB,eAAe,SAAgB;AAC7B,YAAM,CAAC,WAAW,QAAQ;AAE1B,YAAMA,gCAAK,eAAiB,SAAU,GAAG;AAAA;AAAA;AAAA;wBAKb,UAAa,eAAwC,IAAI;AACzF,QAAM,UAAU;AAEhB,SAAO,QAAQ,UAAU,QAAQ,CAAC,CAAC,GAAG,OAAO;AAC3C,YAAQ,KAAK,YAAY,GAAG;AAAA;AAG9B,SAAO;AAAA;oBAGkB,IAA2B;AACpD,SAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS;AAAA;;;;;;;;;;;;;;;;;;kBCpGF;AAAA,EAalD,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAc;AAAA,IACd,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,qBAAqB;AAAA,IACrB,iBAAiB;AAAA,MACQ,IAAI;AAC7B,QAAI,CAAC;AAAa,YAAM,IAAI,eAAe;AAE3C,SAAK,MAAM,CAAC,MAAM,OAAO,IAAI,WAAW,WAAW,KAAK;AAExD,SAAK,UAAU;AAAA,MACb,cAAc;AAAA;AAEhB,SAAK,qBAAqB;AAC1B,SAAK,WAAW;AAChB,SAAK,iBAAiB;AAGtB,QAAI;AAAY,WAAK,QAAQ,gBAAgB,UAAU;AAAA,aAC9C;AAAU,WAAK,QAAQ,eAAe;AAAA,aACtC;AAAO,WAAK,QAAQ,mBAAmB;AAGhD,QAAI,cAAc;AAChB,WAAK,QAAQ,qBAAqB;AAClC,WAAK,QAAQ,oBAAoB;AAAA;AAInC,QAAI;AAAM,WAAK,QAAQ,OAAO,GAAG;AAGjC,SAAK,YAAY,YAAY,gBAAK;AAAA;AAAA;;;;"}