import * as Gitbeaker from '@gitbeaker/core';
import { createRequesterFn, defaultOptionsHandler as defaultOptionsHandler$1, wait, modifyServices } from '@gitbeaker/requester-utils';
import Got from 'got';
import { decamelizeKeys } from 'xcase';

function defaultOptionsHandler(serviceOptions, {body, query, sudo, method} = {}) {
  const options = defaultOptionsHandler$1(serviceOptions, {body, query, sudo, method});
  if (typeof body === "object" && body.constructor.name !== "FormData") {
    options.json = decamelizeKeys(body);
    delete options.body;
  }
  if (serviceOptions.url.includes("https") && serviceOptions.rejectUnauthorized != null && serviceOptions.rejectUnauthorized === false) {
    options.https = {
      rejectUnauthorized: serviceOptions.rejectUnauthorized
    };
  }
  return options;
}
function processBody({
  rawBody,
  headers
}) {
  const contentType = (headers["content-type"] || "").split(";")[0].trim();
  if (contentType === "application/json") {
    return rawBody.length === 0 ? {} : JSON.parse(rawBody.toString());
  }
  if (contentType.startsWith("text/")) {
    return rawBody.toString();
  }
  return Buffer.from(rawBody);
}
async function handler(endpoint, options) {
  const retryCodes = [429, 502];
  const maxRetries = 10;
  let response;
  for (let i = 0; i < maxRetries; i += 1) {
    const waitTime = 2 ** i * 0.1;
    try {
      if (options.method === "stream") {
        options.method = "get";
        options.isStream = true;
        return Got(endpoint, options);
      }
      response = await Got(endpoint, options);
      break;
    } catch (e) {
      if (e.response) {
        if (retryCodes.includes(e.response.statusCode)) {
          await wait(waitTime);
          continue;
        }
        if (typeof e.response.body === "string" && e.response.body.length > 0) {
          try {
            const output = JSON.parse(e.response.body);
            e.description = output.error || output.message;
          } catch (err) {
            e.description = e.response.body;
          }
        }
      }
      throw e;
    }
  }
  const {statusCode, headers} = response;
  const body = processBody(response);
  return {body, headers, status: statusCode};
}
const requesterFn = createRequesterFn(defaultOptionsHandler, handler);

var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const _a = Gitbeaker, services = __objRest(_a, ["getAPIMap"]);
const APIServices = modifyServices(services, {requesterFn});
const {
  Groups,
  GroupAccessRequests,
  GroupBadges,
  GroupCustomAttributes,
  GroupIssueBoards,
  GroupMembers,
  GroupMilestones,
  GroupRunners,
  GroupVariables,
  GroupLabels,
  Epics,
  EpicIssues,
  EpicNotes,
  EpicDiscussions,
  Users,
  UserCustomAttributes,
  UserEmails,
  UserImpersonationTokens,
  UserSSHKeys,
  UserGPGKeys,
  Branches,
  Commits,
  CommitDiscussions,
  ContainerRegistry,
  Deployments,
  DeployKeys,
  Environments,
  FreezePeriods,
  Issues,
  IssuesStatistics,
  IssueNotes,
  IssueNoteAwardEmojis,
  IssueDiscussions,
  IssueAwardEmojis,
  Jobs,
  Labels,
  MergeRequests,
  MergeRequestApprovals,
  MergeRequestAwardEmojis,
  MergeRequestDiscussions,
  MergeRequestNotes,
  Packages,
  Pipelines,
  PipelineSchedules,
  PipelineScheduleVariables,
  Projects,
  ProjectAccessRequests,
  ProjectBadges,
  ProjectCustomAttributes,
  ProjectImportExport,
  ProjectIssueBoards,
  ProjectHooks,
  ProjectMembers,
  ProjectMilestones,
  ProjectSnippets,
  ProjectSnippetNotes,
  ProjectSnippetDiscussions,
  ProjectSnippetAwardEmojis,
  ProtectedBranches,
  ProtectedTags,
  ProjectVariables,
  PushRules,
  Releases,
  ReleaseLinks,
  Repositories,
  RepositoryFiles,
  Runners,
  Services,
  Tags,
  Todos,
  Triggers,
  VulnerabilityFindings,
  ApplicationSettings,
  BroadcastMessages,
  Events,
  FeatureFlags,
  GeoNodes,
  GitignoreTemplates,
  GitLabCIYMLTemplates,
  Keys,
  License,
  LicenseTemplates,
  Lint,
  Namespaces,
  NotificationSettings,
  Markdown,
  PagesDomains,
  Search,
  SidekiqMetrics,
  Snippets,
  SystemHooks,
  Version,
  Wikis,
  GroupsBundle,
  UsersBundle,
  ProjectsBundle,
  Gitlab
} = APIServices;

export { ApplicationSettings, Branches, BroadcastMessages, CommitDiscussions, Commits, ContainerRegistry, DeployKeys, Deployments, Environments, EpicDiscussions, EpicIssues, EpicNotes, Epics, Events, FeatureFlags, FreezePeriods, GeoNodes, GitLabCIYMLTemplates, GitignoreTemplates, Gitlab, GroupAccessRequests, GroupBadges, GroupCustomAttributes, GroupIssueBoards, GroupLabels, GroupMembers, GroupMilestones, GroupRunners, GroupVariables, Groups, GroupsBundle, IssueAwardEmojis, IssueDiscussions, IssueNoteAwardEmojis, IssueNotes, Issues, IssuesStatistics, Jobs, Keys, Labels, License, LicenseTemplates, Lint, Markdown, MergeRequestApprovals, MergeRequestAwardEmojis, MergeRequestDiscussions, MergeRequestNotes, MergeRequests, Namespaces, NotificationSettings, Packages, PagesDomains, PipelineScheduleVariables, PipelineSchedules, Pipelines, ProjectAccessRequests, ProjectBadges, ProjectCustomAttributes, ProjectHooks, ProjectImportExport, ProjectIssueBoards, ProjectMembers, ProjectMilestones, ProjectSnippetAwardEmojis, ProjectSnippetDiscussions, ProjectSnippetNotes, ProjectSnippets, ProjectVariables, Projects, ProjectsBundle, ProtectedBranches, ProtectedTags, PushRules, ReleaseLinks, Releases, Repositories, RepositoryFiles, Runners, Search, Services, SidekiqMetrics, Snippets, SystemHooks, Tags, Todos, Triggers, UserCustomAttributes, UserEmails, UserGPGKeys, UserImpersonationTokens, UserSSHKeys, Users, UsersBundle, Version, VulnerabilityFindings, Wikis };
//# sourceMappingURL=index.es.js.map
