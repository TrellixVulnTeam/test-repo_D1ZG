{"version":3,"file":"index-c2dd3777.esm.js","sources":["../../src/api.ts","../../src/components/fields/EntityPicker/EntityPicker.tsx","../../src/components/fields/OwnerPicker/OwnerPicker.tsx","../../src/components/fields/RepoUrlPicker/RepoUrlPicker.tsx","../../src/components/fields/RepoUrlPicker/validation.ts","../../src/extensions/index.tsx","../../src/routes.ts","../../src/plugin.ts"],"sourcesContent":["/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityName } from '@backstage/catalog-model';\nimport { JsonObject, JsonValue } from '@backstage/config';\nimport {\n  createApiRef,\n  DiscoveryApi,\n  IdentityApi,\n  Observable,\n} from '@backstage/core';\nimport { ResponseError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { Field, FieldValidation } from '@rjsf/core';\nimport ObservableImpl from 'zen-observable';\nimport { ListActionsResponse, ScaffolderTask, Status } from './types';\n\nexport const scaffolderApiRef = createApiRef<ScaffolderApi>({\n  id: 'plugin.scaffolder.service',\n  description: 'Used to make requests towards the scaffolder backend',\n});\n\ntype TemplateParameterSchema = {\n  title: string;\n  steps: Array<{\n    title: string;\n    schema: JsonObject;\n  }>;\n};\n\nexport type LogEvent = {\n  type: 'log' | 'completion';\n  body: {\n    message: string;\n    stepId?: string;\n    status?: Status;\n  };\n  createdAt: string;\n  id: string;\n  taskId: string;\n};\n\nexport type CustomField = {\n  name: string;\n  component: Field;\n  validation: (data: JsonValue, field: FieldValidation) => void;\n};\n\nexport interface ScaffolderApi {\n  getTemplateParameterSchema(\n    templateName: EntityName,\n  ): Promise<TemplateParameterSchema>;\n\n  /**\n   * Executes the scaffolding of a component, given a template and its\n   * parameter values.\n   *\n   * @param templateName Name of the Template entity for the scaffolder to use. New project is going to be created out of this template.\n   * @param values Parameters for the template, e.g. name, description\n   */\n  scaffold(templateName: string, values: Record<string, any>): Promise<string>;\n\n  getTask(taskId: string): Promise<ScaffolderTask>;\n\n  getIntegrationsList(options: {\n    allowedHosts: string[];\n  }): Promise<{ type: string; title: string; host: string }[]>;\n\n  // Returns a list of all installed actions.\n  listActions(): Promise<ListActionsResponse>;\n\n  streamLogs({\n    taskId,\n    after,\n  }: {\n    taskId: string;\n    after?: number;\n  }): Observable<LogEvent>;\n}\n\nexport class ScaffolderClient implements ScaffolderApi {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly identityApi: IdentityApi;\n  private readonly scmIntegrationsApi: ScmIntegrationRegistry;\n\n  constructor(options: {\n    discoveryApi: DiscoveryApi;\n    identityApi: IdentityApi;\n    scmIntegrationsApi: ScmIntegrationRegistry;\n  }) {\n    this.discoveryApi = options.discoveryApi;\n    this.identityApi = options.identityApi;\n    this.scmIntegrationsApi = options.scmIntegrationsApi;\n  }\n\n  async getIntegrationsList(options: { allowedHosts: string[] }) {\n    return [\n      ...this.scmIntegrationsApi.azure.list(),\n      ...this.scmIntegrationsApi.bitbucket.list(),\n      ...this.scmIntegrationsApi.github.list(),\n      ...this.scmIntegrationsApi.gitlab.list(),\n    ]\n      .map(c => ({ type: c.type, title: c.title, host: c.config.host }))\n      .filter(c => options.allowedHosts.includes(c.host));\n  }\n\n  async getTemplateParameterSchema(\n    templateName: EntityName,\n  ): Promise<TemplateParameterSchema> {\n    const { namespace, kind, name } = templateName;\n\n    const token = await this.identityApi.getIdToken();\n    const baseUrl = await this.discoveryApi.getBaseUrl('scaffolder');\n    const templatePath = [namespace, kind, name]\n      .map(s => encodeURIComponent(s))\n      .join('/');\n    const url = `${baseUrl}/v2/templates/${templatePath}/parameter-schema`;\n\n    const response = await fetch(url, {\n      headers: {\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n    });\n\n    if (!response.ok) {\n      throw ResponseError.fromResponse(response);\n    }\n\n    const schema: TemplateParameterSchema = await response.json();\n    return schema;\n  }\n\n  /**\n   * Executes the scaffolding of a component, given a template and its\n   * parameter values.\n   *\n   * @param templateName Template name for the scaffolder to use. New project is going to be created out of this template.\n   * @param values Parameters for the template, e.g. name, description\n   */\n  async scaffold(\n    templateName: string,\n    values: Record<string, any>,\n  ): Promise<string> {\n    const token = await this.identityApi.getIdToken();\n    const url = `${await this.discoveryApi.getBaseUrl('scaffolder')}/v2/tasks`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n      body: JSON.stringify({ templateName, values: { ...values } }),\n    });\n\n    if (response.status !== 201) {\n      const status = `${response.status} ${response.statusText}`;\n      const body = await response.text();\n      throw new Error(`Backend request failed, ${status} ${body.trim()}`);\n    }\n\n    const { id } = (await response.json()) as { id: string };\n    return id;\n  }\n\n  async getTask(taskId: string) {\n    const token = await this.identityApi.getIdToken();\n    const baseUrl = await this.discoveryApi.getBaseUrl('scaffolder');\n    const url = `${baseUrl}/v2/tasks/${encodeURIComponent(taskId)}`;\n    const response = await fetch(url, {\n      headers: token ? { Authorization: `Bearer ${token}` } : {},\n    });\n\n    if (!response.ok) {\n      throw ResponseError.fromResponse(response);\n    }\n\n    return await response.json();\n  }\n\n  streamLogs({\n    taskId,\n    after,\n  }: {\n    taskId: string;\n    after?: number;\n  }): Observable<LogEvent> {\n    return new ObservableImpl(subscriber => {\n      const params = new URLSearchParams();\n      if (after !== undefined) {\n        params.set('after', String(Number(after)));\n      }\n\n      this.discoveryApi.getBaseUrl('scaffolder').then(\n        baseUrl => {\n          const url = `${baseUrl}/v2/tasks/${encodeURIComponent(\n            taskId,\n          )}/eventstream`;\n          const eventSource = new EventSource(url, { withCredentials: true });\n          eventSource.addEventListener('log', (event: any) => {\n            if (event.data) {\n              try {\n                subscriber.next(JSON.parse(event.data));\n              } catch (ex) {\n                subscriber.error(ex);\n              }\n            }\n          });\n          eventSource.addEventListener('completion', (event: any) => {\n            if (event.data) {\n              try {\n                subscriber.next(JSON.parse(event.data));\n              } catch (ex) {\n                subscriber.error(ex);\n              }\n            }\n            eventSource.close();\n            subscriber.complete();\n          });\n          eventSource.addEventListener('error', event => {\n            subscriber.error(event);\n          });\n        },\n        error => {\n          subscriber.error(error);\n        },\n      );\n    });\n  }\n\n  /**\n   * @returns ListActionsResponse containing all registered actions.\n   */\n  async listActions(): Promise<ListActionsResponse> {\n    const baseUrl = await this.discoveryApi.getBaseUrl('scaffolder');\n    const response = await fetch(`${baseUrl}/v2/actions`);\n\n    if (!response.ok) {\n      throw ResponseError.fromResponse(response);\n    }\n\n    return await response.json();\n  }\n}\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useApi } from '@backstage/core';\nimport {\n  catalogApiRef,\n  formatEntityRefTitle,\n} from '@backstage/plugin-catalog-react';\nimport { TextField } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { FieldProps } from '@rjsf/core';\nimport React from 'react';\nimport { useAsync } from 'react-use';\n\nexport const EntityPicker = ({\n  onChange,\n  schema: { title = 'Entity', description = 'An entity from the catalog' },\n  required,\n  uiSchema,\n  rawErrors,\n  formData,\n}: FieldProps<string>) => {\n  const allowedKinds = uiSchema['ui:options']?.allowedKinds as string[];\n  const defaultKind = uiSchema['ui:options']?.defaultKind as string | undefined;\n  const catalogApi = useApi(catalogApiRef);\n\n  const { value: entities, loading } = useAsync(() =>\n    catalogApi.getEntities(\n      allowedKinds ? { filter: { kind: allowedKinds } } : undefined,\n    ),\n  );\n\n  const entityRefs = entities?.items.map(e =>\n    formatEntityRefTitle(e, { defaultKind }),\n  );\n\n  const onSelect = (_: any, value: string | null) => {\n    onChange(value || '');\n  };\n\n  return (\n    <FormControl\n      margin=\"normal\"\n      required={required}\n      error={rawErrors?.length > 0 && !formData}\n    >\n      <Autocomplete\n        value={(formData as string) || ''}\n        loading={loading}\n        onChange={onSelect}\n        options={entityRefs || []}\n        autoSelect\n        freeSolo\n        renderInput={params => (\n          <TextField\n            {...params}\n            label={title}\n            margin=\"normal\"\n            helperText={description}\n            variant=\"outlined\"\n            required={required}\n            InputProps={params.InputProps}\n          />\n        )}\n      />\n    </FormControl>\n  );\n};\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldProps } from '@rjsf/core';\nimport React from 'react';\nimport { EntityPicker } from '../EntityPicker';\n\nexport const OwnerPicker = ({\n  schema: { title = 'Owner', description = 'The owner of the component' },\n  uiSchema,\n  ...props\n}: FieldProps<string>) => {\n  const ownerUiSchema = {\n    ...uiSchema,\n    'ui:options': {\n      allowedKinds: (uiSchema['ui:options']?.allowedKinds || [\n        'Group',\n        'User',\n      ]) as string[],\n      defaultKind: 'Group',\n    },\n  };\n\n  return (\n    <EntityPicker\n      {...props}\n      schema={{ title, description }}\n      uiSchema={ownerUiSchema}\n    />\n  );\n};\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useCallback, useEffect } from 'react';\nimport { FieldProps } from '@rjsf/core';\nimport { useApi, Progress } from '@backstage/core';\nimport { scaffolderApiRef } from '../../../api';\nimport { useAsync } from 'react-use';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nfunction splitFormData(url: string | undefined) {\n  let host = undefined;\n  let owner = undefined;\n  let repo = undefined;\n  let organization = undefined;\n\n  try {\n    if (url) {\n      const parsed = new URL(`https://${url}`);\n      host = parsed.host;\n      owner = parsed.searchParams.get('owner') || undefined;\n      repo = parsed.searchParams.get('repo') || undefined;\n      // This is azure dev ops specific. not used for any other provider.\n      organization = parsed.searchParams.get('organization') || undefined;\n    }\n  } catch {\n    /* ok */\n  }\n\n  return { host, owner, repo, organization };\n}\n\nfunction serializeFormData(data: {\n  host?: string;\n  owner?: string;\n  repo?: string;\n  organization?: string;\n}) {\n  if (!data.host) {\n    return undefined;\n  }\n  const params = new URLSearchParams();\n  if (data.owner) {\n    params.set('owner', data.owner);\n  }\n  if (data.repo) {\n    params.set('repo', data.repo);\n  }\n  if (data.organization) {\n    params.set('organization', data.organization);\n  }\n\n  return `${data.host}?${params.toString()}`;\n}\n\nexport const RepoUrlPicker = ({\n  onChange,\n  uiSchema,\n  rawErrors,\n  formData,\n}: FieldProps<string>) => {\n  const api = useApi(scaffolderApiRef);\n  const allowedHosts = uiSchema['ui:options']?.allowedHosts as string[];\n\n  const { value: integrations, loading } = useAsync(async () => {\n    return await api.getIntegrationsList({ allowedHosts });\n  });\n\n  const { host, owner, repo, organization } = splitFormData(formData);\n  const updateHost = useCallback(\n    (evt: React.ChangeEvent<{ name?: string; value: unknown }>) =>\n      onChange(\n        serializeFormData({\n          host: evt.target.value as string,\n          owner,\n          repo,\n          organization,\n        }),\n      ),\n    [onChange, owner, repo, organization],\n  );\n\n  const updateOwner = useCallback(\n    (evt: React.ChangeEvent<{ name?: string; value: unknown }>) =>\n      onChange(\n        serializeFormData({\n          host,\n          owner: evt.target.value as string,\n          repo,\n          organization,\n        }),\n      ),\n    [onChange, host, repo, organization],\n  );\n\n  const updateRepo = useCallback(\n    (evt: React.ChangeEvent<{ name?: string; value: unknown }>) =>\n      onChange(\n        serializeFormData({\n          host,\n          owner,\n          repo: evt.target.value as string,\n          organization,\n        }),\n      ),\n    [onChange, host, owner, organization],\n  );\n\n  const updateOrganization = useCallback(\n    (evt: React.ChangeEvent<{ name?: string; value: unknown }>) =>\n      onChange(\n        serializeFormData({\n          host,\n          owner,\n          repo,\n          organization: evt.target.value as string,\n        }),\n      ),\n    [onChange, host, owner, repo],\n  );\n\n  useEffect(() => {\n    if (host === undefined && integrations?.length) {\n      onChange(\n        serializeFormData({\n          host: integrations[0].host,\n          owner,\n          repo,\n          organization,\n        }),\n      );\n    }\n  }, [onChange, integrations, host, owner, repo, organization]);\n\n  if (loading) {\n    return <Progress />;\n  }\n\n  return (\n    <>\n      <FormControl\n        margin=\"normal\"\n        required\n        error={rawErrors?.length > 0 && !host}\n      >\n        <InputLabel htmlFor=\"hostInput\">Host</InputLabel>\n        <Select native id=\"hostInput\" onChange={updateHost} value={host}>\n          {integrations ? (\n            integrations\n              .filter(i => allowedHosts?.includes(i.host))\n              .map(i => (\n                <option key={i.host} value={i.host}>\n                  {i.title}\n                </option>\n              ))\n          ) : (\n            <p>loading</p>\n          )}\n        </Select>\n        <FormHelperText>\n          The host where the repository will be created\n        </FormHelperText>\n      </FormControl>\n      {host === 'dev.azure.com' && (\n        <FormControl\n          margin=\"normal\"\n          required\n          error={rawErrors?.length > 0 && !organization}\n        >\n          <InputLabel htmlFor=\"repoInput\">Organization</InputLabel>\n          <Input\n            id=\"repoInput\"\n            onChange={updateOrganization}\n            value={organization}\n          />\n          <FormHelperText>The name of the organization</FormHelperText>\n        </FormControl>\n      )}\n      <FormControl\n        margin=\"normal\"\n        required\n        error={rawErrors?.length > 0 && !owner}\n      >\n        <InputLabel htmlFor=\"ownerInput\">Owner</InputLabel>\n        <Input id=\"ownerInput\" onChange={updateOwner} value={owner} />\n        <FormHelperText>\n          The organization, user or project that this repo will belong to\n        </FormHelperText>\n      </FormControl>\n      <FormControl\n        margin=\"normal\"\n        required\n        error={rawErrors?.length > 0 && !repo}\n      >\n        <InputLabel htmlFor=\"repoInput\">Repository</InputLabel>\n        <Input id=\"repoInput\" onChange={updateRepo} value={repo} />\n        <FormHelperText>The name of the repository</FormHelperText>\n      </FormControl>\n    </>\n  );\n};\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldValidation } from '@rjsf/core';\n\nexport const repoPickerValidation = (\n  value: string,\n  validation: FieldValidation,\n) => {\n  try {\n    const { host, searchParams } = new URL(`https://${value}`);\n    if (!host || !searchParams.get('owner') || !searchParams.get('repo')) {\n      validation.addError('Incomplete repository location provided');\n    }\n  } catch {\n    validation.addError('Unable to parse the Repository URL');\n  }\n};\n","/*\n * Copyright 2021 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Extension, attachComponentData } from '@backstage/core';\nimport React from 'react';\nimport { FieldExtensionOptions } from './types';\n\nexport const FIELD_EXTENSION_WRAPPER_KEY = 'scaffolder.extensions.wrapper.v1';\nexport const FIELD_EXTENSION_KEY = 'scaffolder.extensions.field.v1';\n\nexport function createScaffolderFieldExtension<T = any>(\n  options: FieldExtensionOptions<T>,\n): Extension<() => null> {\n  return {\n    expose() {\n      const FieldExtensionDataHolder: any = () => null;\n\n      attachComponentData(\n        FieldExtensionDataHolder,\n        FIELD_EXTENSION_KEY,\n        options,\n      );\n\n      return FieldExtensionDataHolder;\n    },\n  };\n}\n\nexport const ScaffolderFieldExtensions: React.ComponentType = () => null;\nattachComponentData(\n  ScaffolderFieldExtensions,\n  FIELD_EXTENSION_WRAPPER_KEY,\n  true,\n);\n\nexport type { FieldExtensionOptions };\n\nexport { DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS } from './default';\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createExternalRouteRef, createRouteRef } from '@backstage/core';\n\nexport const registerComponentRouteRef = createExternalRouteRef({\n  id: 'register-component',\n  optional: true,\n});\n\nexport const rootRouteRef = createRouteRef({\n  title: 'Create new entity',\n});\n","/*\n * Copyright 2020 Spotify AB\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createApiFactory,\n  createPlugin,\n  createRoutableExtension,\n  discoveryApiRef,\n  identityApiRef,\n} from '@backstage/core';\nimport { scmIntegrationsApiRef } from '@backstage/integration-react';\nimport { scaffolderApiRef, ScaffolderClient } from './api';\nimport { EntityPicker } from './components/fields/EntityPicker';\nimport { OwnerPicker } from './components/fields/OwnerPicker';\nimport {\n  repoPickerValidation,\n  RepoUrlPicker,\n} from './components/fields/RepoUrlPicker';\nimport { createScaffolderFieldExtension } from './extensions';\nimport { registerComponentRouteRef, rootRouteRef } from './routes';\n\nexport const scaffolderPlugin = createPlugin({\n  id: 'scaffolder',\n  apis: [\n    createApiFactory({\n      api: scaffolderApiRef,\n      deps: {\n        discoveryApi: discoveryApiRef,\n        identityApi: identityApiRef,\n        scmIntegrationsApi: scmIntegrationsApiRef,\n      },\n      factory: ({ discoveryApi, identityApi, scmIntegrationsApi }) =>\n        new ScaffolderClient({ discoveryApi, identityApi, scmIntegrationsApi }),\n    }),\n  ],\n  routes: {\n    root: rootRouteRef,\n  },\n  externalRoutes: {\n    registerComponent: registerComponentRouteRef,\n  },\n});\n\nexport const EntityPickerFieldExtension = scaffolderPlugin.provide(\n  createScaffolderFieldExtension({\n    component: EntityPicker,\n    name: 'EntityPicker',\n  }),\n);\n\nexport const RepoUrlPickerFieldExtension = scaffolderPlugin.provide(\n  createScaffolderFieldExtension({\n    component: RepoUrlPicker,\n    name: 'RepoUrlPicker',\n    validation: repoPickerValidation,\n  }),\n);\n\nexport const OwnerPickerFieldExtension = scaffolderPlugin.provide(\n  createScaffolderFieldExtension({\n    component: OwnerPicker,\n    name: 'OwnerPicker',\n  }),\n);\n\nexport const ScaffolderPage = scaffolderPlugin.provide(\n  createRoutableExtension({\n    component: () => import('./components/Router').then(m => m.Router),\n    mountPoint: rootRouteRef,\n  }),\n);\n"],"names":[],"mappings":"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"}