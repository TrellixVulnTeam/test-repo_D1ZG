'use strict';

require('commander');
var chalk = require('chalk');
var index = require('./index-5c3253a4.cjs.js');
var fs = require('fs-extra');
require('@backstage/cli-common');
require('@backstage/config/package.json');
var path = require('path');
var parallel = require('./parallel-a4714c72.cjs.js');
require('child_process');
require('util');
var run = require('./run-92c96f17.cjs.js');
require('os');
require('tar');
var index$1 = require('./index-459a5920.cjs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

const PKG_PATH = "package.json";
var buildImage = async (cmd) => {
  if (cmd.args.includes("--help")) {
    await run.run("docker", ["image", "build", "--help"]);
    return;
  }
  console.warn(chalk.yellow(`
The backend:build-image command is deprecated and will be removed in the future.
Please use the backend:bundle command instead along with your own Docker setup.

  https://backstage.io/docs/deployment/docker
`));
  const pkgPath = index.paths.resolveTarget(PKG_PATH);
  const pkg = await fs__default['default'].readJson(pkgPath);
  const appConfigs = await findAppConfigs();
  const npmrc = await fs__default['default'].pathExists(index.paths.resolveTargetRoot(".npmrc")) ? [".npmrc"] : [];
  const tempDistWorkspace = await index$1.createDistWorkspace([pkg.name], {
    buildDependencies: Boolean(cmd.build),
    files: [
      "package.json",
      "yarn.lock",
      ...npmrc,
      ...appConfigs,
      {src: index.paths.resolveTarget("Dockerfile"), dest: "Dockerfile"}
    ],
    parallel: parallel.parseParallel(process.env[parallel.PARALLEL_ENV_VAR]),
    skeleton: "skeleton.tar"
  });
  console.log(`Dist workspace ready at ${tempDistWorkspace}`);
  await run.run("docker", ["image", "build", ".", ...cmd.args], {
    cwd: tempDistWorkspace
  });
  await fs__default['default'].remove(tempDistWorkspace);
};
async function findAppConfigs() {
  const files = [];
  for (const name of await fs__default['default'].readdir(index.paths.targetRoot)) {
    if (name.startsWith("app-config.") && name.endsWith(".yaml")) {
      files.push(name);
    }
  }
  if (index.paths.targetRoot !== index.paths.targetDir) {
    const dirPath = path.relative(index.paths.targetRoot, index.paths.targetDir);
    for (const name of await fs__default['default'].readdir(index.paths.targetDir)) {
      if (name.startsWith("app-config.") && name.endsWith(".yaml")) {
        files.push(path.join(dirPath, name));
      }
    }
  }
  return files;
}

exports.default = buildImage;
//# sourceMappingURL=buildImage-21169e35.cjs.js.map
