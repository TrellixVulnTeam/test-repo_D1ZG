/// <reference types="react" />
import * as _backstage_catalog_model from '@backstage/catalog-model';
import { Entity } from '@backstage/catalog-model';
import * as _backstage_core from '@backstage/core';
import { InfoCardVariants, DiscoveryApi } from '@backstage/core';

declare const jenkinsPlugin: _backstage_core.BackstagePlugin<{
    entityContent: _backstage_core.RouteRef<undefined>;
}, {}>;
declare const EntityJenkinsContent: (_props: {
    entity?: _backstage_catalog_model.Entity | undefined;
}) => JSX.Element;
declare const EntityLatestJenkinsRunCard: ({ branch, variant, }: {
    branch: string;
    variant?: _backstage_core.InfoCardVariants | undefined;
}) => JSX.Element;

declare const LatestRunCard: ({ branch, variant, }: {
    branch: string;
    variant?: InfoCardVariants | undefined;
}) => JSX.Element;

declare const isJenkinsAvailable: (entity: Entity) => boolean;
declare type Props = {
    /** @deprecated The entity is now grabbed from context instead */
    entity?: Entity;
};
declare const Router: (_props: Props) => JSX.Element;

declare const JENKINS_ANNOTATION = "jenkins.io/github-folder";

declare type CITableBuildInfo = {
    id: string;
    buildName: string;
    buildNumber: number;
    buildUrl: string;
    source: {
        branchName: string;
        url: string;
        displayName: string;
        author?: string;
        commit: {
            hash: string;
        };
    };
    status: string;
    tests?: {
        total: number;
        passed: number;
        skipped: number;
        failed: number;
        testUrl: string;
    };
    onRestartClick: () => void;
};

declare const jenkinsApiRef: _backstage_core.ApiRef<JenkinsApi>;
declare type Options = {
    discoveryApi: DiscoveryApi;
    /**
     * Path to use for requests via the proxy, defaults to /jenkins/api
     */
    proxyPath?: string;
};
declare class JenkinsApi {
    private readonly discoveryApi;
    private readonly proxyPath;
    constructor(options: Options);
    private getClient;
    retry(buildName: string): Promise<any>;
    getLastBuild(jobName: string): Promise<any>;
    extractScmDetailsFromJob(jobDetails: any): any | undefined;
    getJob(jobName: string): Promise<any>;
    getFolder(folderName: string): Promise<CITableBuildInfo[]>;
    private getTestReport;
    mapJenkinsBuildToCITable(jenkinsResult: any, jobScmInfo?: any): CITableBuildInfo;
    getBuild(buildName: string): Promise<any>;
    extractJobDetailsFromBuildName(buildName: string): {
        jobName: string;
        buildNumber: number;
    };
}

export { EntityJenkinsContent, EntityLatestJenkinsRunCard, JENKINS_ANNOTATION, JenkinsApi, LatestRunCard, Router, isJenkinsAvailable, isJenkinsAvailable as isPluginApplicableToEntity, jenkinsApiRef, jenkinsPlugin, jenkinsPlugin as plugin };
