/// <reference types="react" />
import { ApiRef, BackstagePlugin, RouteRef } from '@backstage/core';

declare enum MovedState {
    Down = -1,
    NoChange = 0,
    Up = 1
}

declare const techRadarApiRef: ApiRef<TechRadarApi>;
interface TechRadarApi {
    load: () => Promise<TechRadarLoaderResponse>;
}
/**
 * Types related to the Radar's visualization.
 */
interface RadarRing {
    id: string;
    name: string;
    color: string;
}
interface RadarQuadrant {
    id: string;
    name: string;
}
interface RadarEntry {
    key: string;
    id: string;
    quadrant: string;
    title: string;
    url: string;
    timeline: Array<RadarEntrySnapshot>;
    description?: string;
}
interface RadarEntrySnapshot {
    date: Date;
    ringId: string;
    description?: string;
    moved?: MovedState;
}
/**
 * Types related to data collection for the Radar.
 */
interface TechRadarLoaderResponse {
    quadrants: RadarQuadrant[];
    rings: RadarRing[];
    entries: RadarEntry[];
}
/**
 * Set up the Radar as a Backstage component.
 */
interface TechRadarComponentProps {
    width: number;
    height: number;
    svgProps?: object;
}

declare type TechRadarPageProps = TechRadarComponentProps & {
    title?: string;
    subtitle?: string;
    pageTitle?: string;
};
declare const RadarPage: {
    ({ title, subtitle, pageTitle, ...props }: TechRadarPageProps): JSX.Element;
    defaultProps: {
        title: string;
        subtitle: string;
        pageTitle: string;
    };
};

declare const techRadarPlugin: BackstagePlugin<{
    root: RouteRef<undefined>;
}, {}>;
declare const TechRadarPage: {
    ({ title, subtitle, pageTitle, ...props }: TechRadarPageProps): JSX.Element;
    defaultProps: {
        title: string;
        subtitle: string;
        pageTitle: string;
    };
};

declare const RadarComponent: (props: TechRadarComponentProps) => JSX.Element;

export { RadarEntry, RadarEntrySnapshot, RadarQuadrant, RadarRing, RadarPage as Router, TechRadarApi, RadarComponent as TechRadarComponent, TechRadarComponentProps, TechRadarLoaderResponse, TechRadarPage, techRadarPlugin as plugin, techRadarApiRef, techRadarPlugin };
